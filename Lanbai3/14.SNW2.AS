/*14SNW主合成         */
/* Shining World
 * by EPM - 2013
 *
 * The work, including all artwork described in code below, is licensed under Creative Commons Attribution-NoDerivs 3.0 Unported License.
 */
if($G._("___bw3_snw_maincomp")  )
stopExecution();//只为Error1009
var playerState = Player.state;
if (playerState == 'playing')
  Player.pause();

var Akari = Global._get( "__akari" );
Akari.stop();

Akari.Utilities.Factory.extend( this, Akari.Utilities );
Akari.Utilities.Factory.extend( this, Akari.Display );
Akari.Utilities.Factory.extend( this, Akari.Display.Text );
Akari.Utilities.Factory.extend( this, Akari.Animation );

	var Snw = {};



	Snw.Part6 = {};

	Snw.Part6.MasterComp = function()
	{
	  var rand = Randomizer.createTwister( 334893 );
	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 77574,
		duration : 25600,

		layers :
		[
		  Layer(
		  {
			inPoint : 77574,
			outPoint : 101574,

			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF })
		  }),
		  Layer(
		  {
			source : Snw.Art.Drawings.P4 ,//为开放接口而修改 By MianTang
			inPoint : 77574,
			outPoint : 101574,
			properties :
			{
			  x : 640 - 376,
			  y : 360 - 394,

			  scaleX : function( t )
			  {
				return 1.2 - ( t - 77574 ) / ( 101574 - 77574 ) * 0.2;
			  },
			  scaleY : Binder.Link({ name : "scaleX" })
			}
		  }),
		  // shapes
		  Factory.replicate( Layer, 48, function( id )
		  {
			var startTime = rand.integer( 77574, 101574 );
			var duraton = rand.integer( 1600, 4800 );
			var endTime = startTime + duraton;
			var xPos = rand.integer( 0, 1280 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var size = rand.uniform() * 250 + 50;
			var shape = Shape();
			shape.graphics.moveTo( size, 0 );
			shape.graphics.lineStyle( rand.integer( 4, 8 ), 0xA3A3A3 );

			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.lineStyle();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : Math.min( 101574, endTime ),

			  properties :
			  {
				x : xPos,
				y : KeyframesBind(
				{
				  keyframes :
				  [
					Keyframe({ time : startTime, value : 720 + size, interpolation : Interpolation.cubic.easeInOut }),
					Keyframe({ time : endTime, value : -size, interpolation : Interpolation.cubic.easeInOut })
				  ]
				}),
				rotation : function( time )
				{
				  return time * rotSpeed;
				}
			  }
			}];
		  }),
		  // outro flash
		  Layer(
		  {
			inPoint : 90374,
			outPoint : 103174,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 90374, value : 0.05, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 90764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 90774, value : 0.10, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 91164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 91174, value : 0.15, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 91564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 91574, value : 0.20, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 91964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 91974, value : 0.25, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 92364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 92374, value : 0.30, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 92764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 92774, value : 0.35, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 93164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 93174, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 93564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 93574, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 93964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 93974, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 94364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 94374, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 94764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 94774, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 95164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 95174, value : 0.65, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 95564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 95574, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 95964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 95974, value : 0.75, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 96364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 96374, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 96764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 96774, value : 0.10, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 96964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 96974, value : 0.15, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 97164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 97174, value : 0.20, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 97364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 97374, value : 0.25, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 97564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 97574, value : 0.30, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 97764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 97774, value : 0.35, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 97964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 97974, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 98164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 98174, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 98364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 98374, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 98564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 98574, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 98764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 98774, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 98964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 98974, value : 0.65, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 99164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 99174, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 99364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 99374, value : 0.75, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 99564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 99574, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 99764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 99774, value : 0.85, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 99964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 99974, value : 0.15, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100064, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100074, value : 0.20, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100174, value : 0.25, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100264, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100274, value : 0.30, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100374, value : 0.35, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100464, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100474, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100574, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100664, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100674, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100764, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100774, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100864, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100874, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 100964, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 100974, value : 0.65, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101064, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101074, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101174, value : 0.75, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101264, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101274, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101364, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101374, value : 0.85, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101464, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101474, value : 0.90, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 101564, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 101574, value : 1,  interpolation : Interpolation.hold }),
				  Keyframe({ time : 102774, value : 1,  interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 103174, value : 0 })
				]
			  })
			}
		  }),
		  // Vignette filter
		  Layer(
		  {
			inPoint : 77574,
			outPoint : 101574,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  // intro flash
		  Layer(
		  {
			inPoint : 77574,
			outPoint : 78314,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : function( t )
			  {
				return 1 - ( t - 77574 ) / 800;
			  }
			}
		  })
		]
	  });
	};








	Snw.present = function()
	{
	  Akari.execute( Snw.MainComp() );
	};

	Snw.MainComp = function()
	{
	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 0,
		duration : 109400,

		layers :
		[
		  DynamicSourceLayer(
		  {
			provider : Snw.Part1.MasterComp(),

			inPoint : 0,
			outPoint : 13574
		  }),
		  DynamicSourceLayer(
		  {
			provider : Snw.Part2.MasterComp(),

			inPoint : 13574,
			outPoint : 26374
		  }),
		  DynamicSourceLayer(
		  {
			provider : Snw.Part3.MasterComp(),

			inPoint : 26374,
			outPoint : 39174
		  }),
		  DynamicSourceLayer(
		  {
			provider : Snw.Part4.MasterComp(),

			inPoint : 39174,
			outPoint : 51574
		  }),
		  DynamicSourceLayer(
		  {
			provider : Snw.Part5.MasterComp(),

			inPoint : 51574,
			outPoint : 77574
		  }),
		  DynamicSourceLayer(
		  {
			provider : Snw.Part6.MasterComp(),

			inPoint : 77574,
			outPoint : 103174
		  })
		]
	  });
	};

	Snw.Art = {};

	Snw.Art.Fonts = {};

	// Placeholder font
	Snw.Art.Fonts.Placeholder = 
	{
	  size: 1,
	  underlinePosition: 0,
	  underlineThickness: 0,
	  width: 1,
	  height: 1,
	  glyphCount: 0
	};

	Snw.Art.Fonts.DFPHZ =
	{
	  size: 72,
	  underlinePosition: 78.1094,
	  underlineThickness: 0.390625,
	  width: 96,
	  height: 96,
	  glyphCount: 80,
	  ascender: 76,
	  descender: -19,
	  '始':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,2,2,2,3,3,2,3,3,2,3,3,3,3,2,1,3,2,3,3,1,2,2,3,2,3,2,2,2,3,2,3,3,1,2,2,3,3,1,2,2,2,3,3,3,3]),
		paths: $.toNumberVector([7.75,19.0938,19.8438,19.0938,21.8125,12.5313,24.0625,5.03125,33.7188,5.21875,31.2813,12.7188,29.3125,19.0938,46,19.0938,46,28,43,28,42.3438,51.6719,33.7188,66.8281,38.2188,70.3125,44.0313,74.375,44.0313,86.875,35.5,80.2969,28.4688,74.5625,20.5,84.3281,8.21875,89.4063,8.21875,79.375,16.0938,75.1563,21.4375,68.5938,21.25,68.3125,21.0625,68.2188,9.90625,59.875,9.90625,53.875,9.90625,52.2813,17.125,28,7.75,28,26.5938,61.0781,33.8125,47.8125,34.6563,28,26.5938,28,19.5625,50.3281,19.5625,52.3906,19.5625,55,26.5938,61.0781,60.2031,5.03125,70.75,5.03125,56.1563,35.2031,56.1563,36.9063,57.9688,37,75.9219,37,78.6563,36.625,78.6563,33.1406,78.6563,21.25,87.2813,21.25,87.2813,37.25,86.8125,44.9688,78.1875,45.9063,50.3594,45.9063,46.5781,45.7188,45.1563,40.375,45.1563,38.875,45.8281,36.2344,56.7188,58.0625,56.7188,78.9063,71.5938,78.9063,79.2188,77.5781,79.5938,67.5938,79.0313,58.9063,70.2813,58.0625,73.8438,87.25,48,87.25,48,50,72.9063,50,80.1406,50.5625,83.8906,55.1719,88.0313,60.1563,88.0313,68.3438,88.0313,76.8125,83.8906,81.7969,80.1406,87.0625,73.8438,87.25]),
		kernings: {}
	  },
	  'ま':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,3,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3]),
		paths: $.toNumberVector([83.5,26.1875,55.4688,26.1875,55.4688,37,82,37,82,46,55.4688,46,55.4688,58.6563,67.5625,62.6719,81.1563,70.4219,81.1563,81.4375,67.1875,72.9531,55,68.4688,52.2813,86.0313,33.3438,86.0313,25,86.0313,20.0313,82.7656,14.3125,78.8281,14.3125,70.8906,14.3125,62.3906,20.2188,58.2656,25.2813,54.625,34.375,54.625,39.7188,54.625,45.9063,55.9375,45.9063,46,14.5,46,14.5,37,45.9063,37,45.9063,26.1875,13,26.1875,13,17,45.9063,17,45.9063,8.5625,55.4688,8.5625,55.4688,17,83.5,17,45.8125,65.6719,39.5313,64,34.375,64,29.2188,64,27.0625,65.0313,23.7813,66.6094,23.7813,70.8906,23.7813,74.5156,26.9688,75.7188,28.9375,76.5625,33.3438,76.5625,40,76.5625,42.9063,73.7656,45.3438,71.25,45.8125,65.6719]),
		kernings: {}
	  },
	  'る':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,3,3,3,3,2,3,3,3,1,3,3,3,3]),
		paths: $.toNumberVector([85.375,59.6719,85.375,84.4688,49.3125,84.4688,21.0938,84.4688,21.0938,68.6094,21.0938,61.5625,26.8125,58.2188,31.2188,55.5313,38.4375,55.5313,45.9375,55.5313,53.8125,60.7969,61.125,65.7969,65.8125,73.0938,76,69.5156,76,59.6875,76,45,53.4844,45,39.5625,45,30.0313,49.125,25.5469,51.1406,10.7813,60.7813,10.7813,49.625,54.9375,20.0313,20.5313,20.0313,20.5313,10.6563,61.7813,10.6563,66.75,10.6563,68.7188,11.5156,72,12.8438,72,16.8438,72,19.4063,69.5625,21.5,68.8125,22.1719,65.1563,24.4531,44.3438,37.5938,50.2188,36,53.5781,36,67.6563,36,75.9531,41.2656,85.375,47.4688,85.375,59.6719,55.5938,74.9063,47.0625,65,38.4375,65,30.5625,65,30.5625,68.6406,30.5625,75.0938,49.4063,75.0938,52.7813,75.0938,55.5938,74.9063]),
		kernings: {}
	  },
	  'よ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,1,3,3,3,3,3]),
		paths: $.toNumberVector([84.5,70.5625,84.5,81.4375,68.0938,71.9688,53.375,67.6563,51.2188,87.4375,32.375,87.4375,23.6563,87.4375,17.9375,83.7813,11,79.375,11,71.125,11,62.5,17.8438,58.2813,23.375,54.9063,32.6563,54.9063,38.2813,54.9063,44.2813,55.8438,44.2813,9.4375,53.8438,9.4375,53.8438,25,82.9063,25,82.9063,34.0938,53.8438,34.0938,53.8438,58,68.4688,61.9375,84.5,70.5625,44.1875,65.5,38.1875,64.375,32.6563,64.375,20.375,64.375,20.375,71.125,20.375,77.9688,32.375,77.9688,38.75,77.9688,41.5625,74.4063,43.8125,71.5,44.1875,65.5]),
		kernings: {}
	  },
	  '夢':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,2,2,1,2,2,2,1,2,2,2,1,2,2,3,3,1,2,2,2,2,2,3,3,2,3,3,2,3,2,3,3,3,2,3,3,2,3,3,3,2,3,2,3,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([75.9219,22.9688,80.4219,23.4375,82.75,26.3906,85,29.5156,85,32.8438,85,37.8281,82.375,40.3281,79.9375,42.9063,75.0781,43,14.2813,43,14.2813,22.9688,23.0938,35.7813,34.5313,35.7813,34.5313,30,23.0938,30,42.9844,30,42.9844,35.7813,55.5625,35.7813,55.5625,30,64,30,64,35.7813,71.7656,35.7813,76.4688,35.6875,76.4688,32.75,76.4688,30.4375,71.5781,30,37.3438,54,17,54,17,64.2188,8.9375,64.2188,8.84375,46.3125,76.8438,46.4063,88.125,47.5313,88.2188,55.2188,87.9375,61.2188,86.4844,64.125,77.4063,64.125,79.375,58.7813,79.375,57.0938,79.375,54,74.6094,54,47.2344,54,45.7188,56.1719,43.8281,58,65.6563,58,74.7188,58.8594,74.7188,65.8906,74.7188,71.6875,59.0781,78.9219,36.2031,88.7188,15.9688,89.1875,15.9688,80.9375,30.4063,80.2813,42.4063,77,35.0938,73.625,31.4375,68.5625,41.2813,68.5625,44.5,71.9375,52.8125,73.5313,63.8125,68.5938,63.8125,66.0156,63.8125,65.0313,62.9688,65.0313,35.1875,65.0313,27.9688,69.8594,17.8438,74.0938,17.8438,64.9688,31.625,59.9375,37.3438,54,64.8281,16.6563,64.8281,20.2188,55.5625,20.2188,55.5625,4.84375,64.8281,4.84375,64.8281,8.40625,87.1875,8.40625,87.1875,16.6563,32.8438,5.03125,42.0313,5.03125,42.0313,20.0313,32.8438,20.0313,32.8438,16.6563,8.9375,16.6563,8.9375,8.40625,32.8438,8.40625]),
		kernings: {}
	  },
	  'の':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3]),
		paths: $.toNumberVector([87,48.2344,87,64.5,77.7656,74.2813,68.1406,84.3438,50.7969,84.3438,46.8438,84.3438,46.8438,74.9688,50.8125,74.9688,64.0313,74.9688,71.0156,67.7188,77.5313,60.75,77.5313,48.2344,77.5313,23.8438,52.5625,22.1563,52.0938,44.4531,47.9688,59.2344,41.5,82.2813,27.1563,82.2813,18.0625,82.2813,13.375,73.4375,9.53125,66.1094,9.53125,55.4844,9.53125,36.1094,20.5313,24.25,31.4375,12.5,48.9219,12.5,66.9688,12.5,76.9375,22,87,31.3125,87,48.2344,43.0938,22.4375,31.5625,24.3125,25.0938,33.6406,19,42.3906,19,55.4844,19,64.0469,21.7188,68.75,23.9688,72.7031,27.1563,72.7031,35.6875,72.7031,39.8125,53.5938,42.625,41.0781,43.0938,22.4375]),
		kernings: {}
	  },
	  'ス':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,3,2,3,3,3,2,2,2,3,3,3,3]),
		paths: $.toNumberVector([85.625,86.5313,70.5313,70.4063,51.9688,58.4063,51.2188,59.1563,33.6875,78.0938,11,84.6563,11,73.5,28.1563,69.1875,43.3438,53.4375,57.9688,38.0625,57.9688,26.0625,57.9688,21.6563,53,21.6563,15.7813,21.6563,15.7813,12,55.4375,12,61.4375,12,64.9063,15.6563,68.375,19.2188,68.375,25.2188,68.375,36.2813,58.0625,50.8125,72.125,60,85.625,72.75]),
		kernings: {}
	  },
	  'ト':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,2,2,2,2,3]),
		paths: $.toNumberVector([82.5625,68.3125,61.1875,50.4063,34,43.5625,34,88,24.5313,88,24.5313,7.75,34,7.75,34,33.5313,60.3438,39.5313,82.5625,55.8438]),
		kernings: {}
	  },
	  'ー':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2]),
		paths: $.toNumberVector([82.5625,52,13,52,13,42.8125,82.5625,42.8125]),
		kernings: {}
	  },
	  'リ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,2,3,3,2,2,1,2,2,2]),
		paths: $.toNumberVector([76,44.8438,76,68.5469,60.0156,78.5313,48.3438,85.8125,26.2813,86.1875,26.2813,76.4375,45.7969,76.0625,54.8594,70.2813,66.3438,62.9063,66.3438,44.8125,66.3438,9.75,76,9.75,29,57,19.3438,57,19.3438,9.75,29,9.75]),
		kernings: {}
	  },
	  'が':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,3,3,3,2,3,3,3,3,3,2,3,2,3,2,2,2,3,2,3,2,3,3]),
		paths: $.toNumberVector([92.7188,16.125,84.5625,16.125,82.3125,10.9375,78.6563,4.71875,86.625,4.71875,90.375,10.375,92.7188,16.125,81.4688,20,73.2188,20,70.2188,13.4375,66.375,6.96875,74.4375,6.96875,78.5625,12.9688,81.4688,20,85.6875,55.1094,75.375,55.1094,73.0313,40.5469,59.25,19.9063,69.9375,19.9063,81.4688,36.9063,85.6875,55.1094,63,58.8125,63,71.9844,60.0938,78.1094,55.6875,87.1875,43.4063,87.1875,39.6563,87.1875,29.0625,86.9063,29.0625,77.8125,39.6563,78.1875,43.4063,78.1875,51,78.1875,52.9688,71.4531,53.9063,68.5,53.9063,58.8125,53.9063,43.5781,51.2813,39.25,48.6563,35,39,35,36.4688,35,31.125,62.1094,20.9063,87.2813,10.4063,87.2813,21,61.8281,26.5313,35,9.75,35,9.75,26,28.2188,26,29.625,17.4688,30.8438,8.09375,40.5938,8.09375,39.4688,17.4688,38.1563,26,39,26,54.1875,26,59.1563,34.625,63,41.2969,63,58.8125]),
		kernings: {}
	  },
	  '追':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,3,1,2,3,2,3,3,3,2,3,3,3,2,3,2,3,2,1,2,3,2,3,3,3,3,2,2,2,3,3,3,3,2,2,2,2,2,3,1,2,2,3,3,3,3,1,2,2,3,3,3,3]),
		paths: $.toNumberVector([10.5313,10.5938,22.7188,13.5938,28.9063,19.7813,28.9063,30.5625,23,24.1875,10.5313,19.5,8.9375,38.0625,18.5938,38.0625,27.6875,39.75,28.8125,48.625,28.8125,66.7969,28.8125,72.9219,34.4375,74.7031,41.8438,78.375,60.9688,78.8438,80.0938,78.8438,89,78.1719,89.0938,86.4375,84.5938,87.2813,58.8125,87.2813,32,86.7188,23.4688,77.8906,19.8125,84.2813,8.84375,87.4688,8.84375,78.5625,18.875,74,20.2813,65.7188,20.2813,50.0156,20.2813,47.125,16.8125,45.9063,9.03125,45.9063,51.5,4.96875,60.6875,4.96875,59.8438,7.875,58.8125,10.3125,72.5938,10.3125,79.1563,10.6875,82.625,14.4375,85.9063,18,85.9063,24.6563,85.9063,30.9375,82.625,34.2188,79.3438,37.7813,72.875,37.9688,45.0313,37.9688,45.0313,42.8125,72.5938,42.8125,79.4375,43.1875,83,47.1094,86.5625,50.9531,86.5625,57.9688,86.5625,64.6094,83,68.0781,79.625,71.8125,72.875,72.0938,36.5,72.0938,36.5,10.4063,38.0938,10.4063,38.0938,10.3125,49.25,10.3125,50.5625,7.59375,51.5,4.96875,45.0313,50.7813,45.0313,64.0313,71.2813,64.0313,74.6563,63.8438,76.25,62.25,77.9375,60.5781,77.9375,57.9688,77.9375,54.8906,76.1563,52.9219,74.375,51.1563,70.9063,50.7813,45.0313,18,45.0313,30.0938,71.2813,30.0938,74.5625,29.9063,76.1563,28.3125,77.6563,26.9063,77.6563,24.4688,77.6563,21.75,76.0625,19.9688,74.1875,18.2813,70.9063,18]),
		kernings: {}
	  },
	  'い':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,3,3,3,2,3,3,3]),
		paths: $.toNumberVector([86.375,76.75,77,76.75,77,43.75,59.0781,14.5938,69.3438,14.5938,86.375,39.9063,86.375,76.75,49.75,71.6875,39.5313,83.125,31.6563,83.125,15.4375,83.125,15.4375,43.75,15.4375,31.1875,16,12.1563,25.2813,12.1563,24.7188,27.3438,24.7188,39.625,24.7188,72.7188,32.5938,72.7188,38.875,72.7188,49.75,58.2813]),
		kernings: {}
	  },
	  'つ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,2,3,3,3,3,3,3,2,3,3,3]),
		paths: $.toNumberVector([88.4063,47.8125,88.4063,67.0625,73.3125,75.0156,61.2188,81.4688,36.5625,81.5625,32.9063,81.5625,24.375,81.375,24.375,71.8125,32.625,72.0938,36,72.0938,58.6875,72.0938,68.4375,66.8594,78.9375,61.3594,78.9375,47.8125,78.9375,39.9688,73.5938,35.3906,67.875,30.4375,57.0938,30.4375,36.4688,30.4375,9.84375,36.6875,9.84375,27.0625,36.375,20.9688,57.0938,20.9688,71.3438,20.9688,79.875,28.2656,88.4063,35.5625,88.4063,47.8125]),
		kernings: {}
	  },
	  'づ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,2,3,2,3,1,3,3,3,2,3,3,3,3,3,3,2,3,3,3]),
		paths: $.toNumberVector([91.4063,16.0938,83.25,16.0938,80.9063,10.9375,77.25,4.75,85.2188,4.75,88.9688,10.375,91.4063,16.0938,80.1563,19.9375,71.9063,19.9375,68.8125,13.4688,65.0625,7,73.0313,7,77.1563,12.9063,80.1563,19.9375,88.4063,47.8125,88.4063,67.0625,73.3125,75.0156,61.2188,81.4688,36.5625,81.5625,32.9063,81.5625,24.375,81.375,24.375,71.8125,32.625,72.0938,36,72.0938,58.6875,72.0938,68.4375,66.8594,78.9375,61.3594,78.9375,47.8125,78.9375,39.9688,73.5938,35.3906,67.875,30.4375,57.0938,30.4375,36.4688,30.4375,9.84375,36.6875,9.84375,27.0625,36.375,20.9688,57.0938,20.9688,71.3438,20.9688,79.875,28.2656,88.4063,35.5625,88.4063,47.8125]),
		kernings: {}
	  },
	  'け':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,3,3,2,3,3,3,2,2,2,2,2,2,2,2,1,2,3,3,2,3,3]),
		paths: $.toNumberVector([89,36,72.4063,36,72.7813,53.3281,73.0625,73.7813,62.1875,80.7031,54.4063,85.7188,33.875,86.1875,33.6875,76.625,45.3125,76.4375,49.8125,75.4844,56.8438,73.9688,60.0313,69.3125,63.5,63.9063,63.3125,53.0938,63.0313,36,30.0313,36,30.0313,27,62.8438,27,62.375,7.03125,71.9375,7.03125,72.3125,27,89,27,26.2813,84.6875,16.625,84.6875,13.4375,59.875,13.4375,44.0156,13.4375,26.8438,16.4375,8.53125,26,8.53125,23,26.5625,23,44.0156,23,59.2031,26.2813,84.6875]),
		kernings: {}
	  },
	  '僕':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,3,2,3,2,2,2,3,2,2,2,2,2,2,2,2,3,2,2,2,3,2,3,3,2,3,2,2,2,3,2,2,2,2,2,2,2,2,3,2,2,2,3,2,3,2,1,2,3,2,3,1,3,2,3,2,3,2,2]),
		paths: $.toNumberVector([48.8438,5.5,56.8125,5.5,56.8125,17.4063,61.3125,17.4063,61.3125,5.5,69.1875,5.5,69.1875,17.4063,72.6563,17.4063,74.1563,12.0625,75.1875,7.09375,83.3438,7.09375,82.4063,12.7188,81.0938,17.4063,87,17.4063,87,25.375,78.375,25.375,77.5313,29.7656,76.5,33.5156,86.9063,33.5156,86.9063,41.4844,63.375,41.4844,63.375,47.7656,85.7813,47.7656,85.7813,55.7344,63.375,55.7344,63.375,58.1719,63.375,60.0469,63.2813,61.7344,87.2813,61.7344,87.2813,70.0625,64.5,70.0625,70.7813,79.7188,87.0938,80.0938,87.0938,88.625,66.4688,87.5,58.6875,76.5313,50.9063,88.4375,30.9375,88.4375,30.9375,80.4688,46.7813,80.1875,51.9375,70.0625,30.75,70.0625,30.75,61.7344,54.375,61.7344,54.6563,59.6719,54.6563,57.7031,54.6563,55.7344,31.7813,55.7344,31.7813,47.7656,54.6563,47.7656,54.6563,41.4844,30.4688,41.4844,30.4688,33.5156,42.1875,33.5156,41.3438,29.7656,40.5,25.375,30,25.375,30,17.4063,37.3125,17.4063,35.9063,12.7188,34.6875,7,42.4688,7,43.875,12.4375,45.4688,17.4063,48.8438,17.4063,50.625,33.5156,67.9688,33.5156,69,29.4063,69.9375,25.375,48.75,25.375,49.6875,29.7656,50.625,33.5156,15,36.0469,10.7813,41.0156,5.8125,44.6719,5.8125,33.3281,15.9375,23.2031,21.0938,5,29.7344,5,27.4844,14.2031,24.1875,21.625,24.1875,89.2813,15,89.2813]),
		kernings: {}
	  },
	  'ら':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,3,3,3,2,3,3,3,3,3,3,2,3,2,3,3,3,3]),
		paths: $.toNumberVector([59.6406,12.9063,59.6406,22.8281,43,19.75,22.875,19.375,22.875,9.8125,43,10.0938,59.6406,12.9063,82,61.4531,82,74.2969,69.9688,80.5313,59.9063,85.8438,42.625,85.8438,36.7031,85.8438,26.8281,85.1875,26.8281,75.625,37.1719,76.2813,42.625,76.2813,71.9688,76.2813,71.9688,61.4531,71.9688,55.4219,68.2969,52.4531,63.7813,48.9375,53.1563,48.9375,45.8281,48.9375,37.6406,52.0313,29.3594,55.125,23.0625,60,13.6875,60,13.4063,42,14.625,24.6563,24.2813,24.6563,23.4375,36.0938,23.3438,48.1875,37.625,39.4688,53.1406,39.4688,66.7656,39.4688,74.2031,44.7813,82,50.4531,82,61.4531]),
		kernings: {}
	  },
	  'S':
	  {
		advanceHori: 62,
		commands: $.toIntVector([1,3,2,2,2,3,3,3,2,3,3,3,3,2,2,2,3,3,3,2,3,3]),
		paths: $.toNumberVector([58.7188,60.1094,58.7188,80,37,80,4.65625,80,4.65625,71.1875,37.1563,71.1875,43.5781,71.1875,46.3125,69.0938,50,66.625,50,60.0469,50,51,38.2031,51,24.4219,51,15.7344,51,9.79688,46.9063,3,42.2344,3,33.7656,3,24.5313,10.5313,20.1719,15.8906,17,23.2188,17,56.2344,17,56.2344,25.8125,23.0625,25.8125,11.7188,25.8125,11.7188,33.7656,11.7188,37.5156,14.7344,39.6563,18.1406,42.1875,24.1719,42.1875,37.9531,42.1875,45.8906,42.1875,51.5469,45.875,58.7188,50.5938,58.7188,60.1094]),
		kernings: {}
	  },
	  'h':
	  {
		advanceHori: 43,
		commands: $.toIntVector([1,2,2,3,3,2,2,2,2,2,2,2,3]),
		paths: $.toNumberVector([40.7188,80,32,80,32,54.5313,32,48.75,30.125,46.5781,27.7813,43.8125,21.4063,43.8125,10.7188,43.8125,10.7188,80,2,80,2,17,10.7188,17,10.7188,35,21.4063,35,40.7188,35,40.7188,54.5781]),
		kernings: {}
	  },
	  'i':
	  {
		advanceHori: 26,
		commands: $.toIntVector([1,2,2,2,1,2,2,2]),
		paths: $.toNumberVector([17.7188,25.8125,9,25.8125,9,17,17.7188,17,17.7188,80,9,80,9,35,17.7188,35]),
		kernings: {}
	  },
	  'n':
	  {
		advanceHori: 45,
		commands: $.toIntVector([1,2,2,3,3,2,2,2,2,2,3,3]),
		paths: $.toNumberVector([43,80,34.2813,80,34.2813,58.3594,34.2813,49.5,30.8906,46.375,27.9688,43.8125,20.6094,43.8125,10.7188,43.8125,10.7188,80,2,80,2,35,20.625,35,31.3438,35,36.7031,39.8125,43,45.4844,43,58.3906]),
		kernings: {}
	  },
	  'g':
	  {
		advanceHori: 47,
		commands: $.toIntVector([1,3,2,2,2,3,2,3,3,3,3,2,1,2,2,3,3,3,3]),
		paths: $.toNumberVector([45,79.1094,45,94,26.9844,94,7.1875,94,7.1875,85.1875,27.1406,85.1875,36.2813,85.1875,36.2813,76.8125,24.4531,76.8125,12.6094,76.8125,6.70313,69.5313,2,63.75,2,55.9063,2,47.875,6.65625,42.2813,12.5469,35,24.2969,35,45,35,36.2813,68,36.2813,43.8125,24.8594,43.8125,17.1719,43.8125,13.625,48.0156,10.7188,51.1563,10.7188,55.9063,10.7188,60.5625,13.625,63.7969,17.1719,68,24.8594,68]),
		kernings: {}
	  },
	  ' ':
	  {
		advanceHori: 32,
		commands: $.toIntVector([]),
		paths: $.toNumberVector([]),
		kernings: {}
	  },
	  'w':
	  {
		advanceHori: 72,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([69.375,35,56.8125,80,47.7188,80,35.9063,49.9063,24.0938,80,15,80,2.4375,35,11.625,35,20.1563,65.6563,32.1563,35,39.5625,35,51.5625,65.6563,60.1875,35]),
		kernings: {}
	  },
	  'o':
	  {
		advanceHori: 53,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3]),
		paths: $.toNumberVector([50.7188,57.6406,50.7188,67.7188,43.5781,74.8594,36.4219,82,26.3594,82,16.2031,82,9.04688,74.8594,2,67.7188,2,57.6406,2,47.4844,9.04688,40.3281,16.2031,33.1875,26.3594,33.1875,36.4219,33.1875,43.5781,40.3281,50.7188,47.4844,50.7188,57.6406,42,57.6875,42,51.1719,37.2813,46.5469,32.7656,42,26.3594,42,19.8594,42,15.3281,46.5469,10.7188,51.1719,10.7188,57.6875,10.7188,64.1094,15.3281,68.6563,19.8594,73.1875,26.3594,73.1875,32.7656,73.1875,37.2813,68.6563,42,64.1094,42,57.6875]),
		kernings: {}
	  },
	  'r':
	  {
		advanceHori: 34,
		commands: $.toIntVector([1,2,2,3,2,2,2,2,2,3]),
		paths: $.toNumberVector([32,57.7031,23.2813,57.7031,23.2813,51.4688,23.2813,43.8125,16.8594,43.8125,10.7188,43.8125,10.7188,80,2,80,2,35,17.4688,35,32,35,32,51.4844]),
		kernings: {}
	  },
	  'l':
	  {
		advanceHori: 13,
		commands: $.toIntVector([1,2,2,2]),
		paths: $.toNumberVector([10.7188,80,2,80,2,17,10.7188,17]),
		kernings: {}
	  },
	  'd':
	  {
		advanceHori: 48,
		commands: $.toIntVector([1,2,3,3,3,3,2,2,2,1,2,2,3,3,3,3]),
		paths: $.toNumberVector([45.7188,80,23.0156,80,14.8125,80,8.78125,74.5156,2,68.1875,2,57.5938,2,46.7344,8.8125,40.4844,14.7656,35,23.0938,35,37,35,37,17,45.7188,17,37,71.1875,37,43.8125,23.0469,43.8125,18.0781,43.8125,14.7344,46.9688,10.7188,50.7656,10.7188,57.5938,10.7188,64.2344,14.7344,67.9531,18.1719,71.1875,23.0469,71.1875]),
		kernings: {}
	  },
	  '羽':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,2,3,2,3,1,2,3,3,3,3,3,3,2,3,3,3,3,3,2,1,2,3,3,3,3,3,3,2,3,3,3,3,3,2,1,3,2,3,1,3,2,3]),
		paths: $.toNumberVector([32,48.25,32,57.5625,21.875,62.2656,9.125,66.0313,9.125,56.9063,20.4688,53.3281,32,48.25,73.6563,48.3438,73.6563,58.125,62.875,62.4531,49,65.9375,49,56.625,61.2813,53.1406,73.6563,48.3438,49.0938,7,70.375,7,76.7656,7.5625,80.0469,10.8594,83.3438,13.8594,84.4688,18.4688,87,25.9844,87,42.7031,87,68.0781,84.9375,72.9688,80.9844,86.3125,65.875,87.625,57.0625,87.625,51.5313,86.125,51.5313,77.5938,56.875,78.7188,65.5156,78.7188,73.7813,78.3438,76.0313,70.6406,77.7188,67.25,77.7188,43.9219,77.7188,30.7656,76.3125,21.7344,74.4219,16.4688,68.125,15.7188,49.0938,15.7188,9.78125,7,28.5313,7,34.9375,7.46875,38.2188,10.7656,41.4219,13.7656,42.6406,18.375,45,25.9844,45,42.7031,45,68.2656,43.125,73.1563,39.4531,86.5938,25.25,88,16.9063,88,11.75,86.4063,11.75,77.875,16.6406,79,24.625,79,32.1406,78.625,34.3125,70.9219,35.8125,67.4375,35.8125,44.0156,35.8125,30.6719,34.4844,21.6406,32.6094,16.375,26.375,15.625,9.78125,15.625,9.21875,25.6875,22.3438,28.125,32.0938,32.9219,32.0938,42.6094,20,37.625,9.21875,34.9063,48.9063,26.4375,63.0625,28.7813,73.75,33.5781,73.75,42.7969,60.625,37.9063,48.9063,35.1875]),
		kernings: {}
	  },
	  '生':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([8.6875,77,43.75,77,43.75,55.0938,10.2813,55.0938,10.2813,46,43.75,46,43.75,24,23.5,24,19.375,34.5938,9.4375,39.4688,9.4375,28.875,17.2188,22.0625,17.2188,6.9375,26.5938,6.9375,26.5,11.1563,25.8438,14.9063,43.75,14.9063,43.75,5.0625,53.2188,5.0625,53.2188,14.9063,86.5,14.9063,86.5,24,53.2188,24,53.2188,46,86.2188,46,86.2188,55.0938,53.2188,55.0938,53.2188,77,88,77,88,86.1875,8.6875,86.1875]),
		kernings: {}
	  },
	  'え':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,3,1,3,3,3,3,3,3,3,2,3,2,2,2,3,3,3,3,3,3]),
		paths: $.toNumberVector([67.0313,21.125,46.7813,18.0938,24.75,18,24.75,9,46.5938,9,67.0313,11.8125,87.5625,82.875,76.6875,84,64.2188,84,55.6875,84,52.4063,78.5625,50.1563,74.8281,49.3125,64.9063,48.8438,60.0313,46.875,60.0313,45.2813,60.0313,42,62.7031,33.9375,69.2656,25.9688,76.0313,16.5938,83.6406,9,88.3125,9,77.3438,41.7188,52.0469,59.5313,35,15.1875,35,15.1875,25.9063,60.9375,25.9063,70.2188,25.9063,70.2188,34.25,70.2188,38.2813,63.75,44.4688,61.875,46.25,53.7188,52.8125,58.125,54.25,58.125,59.2188,58.125,75,64.2188,75,80.0625,75,87.5625,73.6406]),
		kernings: {}
	  },
	  'た':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,1,3,3,3,3,2,3,3,3,1,2,3,2,3,2,2,2,3,2,3,2]),
		paths: $.toNumberVector([84.5313,45.8125,42.9063,45.8125,42.9063,37,84.5313,37,88.4688,85.7188,71.9688,86.1875,65.5938,86.1875,54.25,86.1875,48.5313,83.9375,39.625,80.3594,39.625,70.8594,39.625,65.875,41.5,59.9531,51.5313,59.9531,48.9063,64.9375,48.9063,70.875,48.9063,77,62.3125,77,71.2188,77,88.4688,76.3438,59.5,28.7188,36.1563,28.7188,31.6563,58.2969,17.6875,87.3125,7.46875,87.3125,22.1875,58.1094,26.7813,28.7188,10,28.7188,10,20,28,20,28.6563,14,28.8438,7.90625,38.125,7.90625,37.9375,14,37.1875,20,59.5,20]),
		kernings: {}
	  },
	  'う':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,2,2,3,1,3,3,2,3,3,3,3,3,3,2,3,3]),
		paths: $.toNumberVector([74.1563,22.7031,59.1563,20,39.9375,20,22.875,20,22.875,11,39.9375,11,58.7813,11,74.0625,13.4375,82.9688,52.6875,82.9688,85.2813,36.6563,85.2813,32.5313,85.2813,24.4688,84.7188,24.4688,75.7188,32.5313,76.1875,36.6563,76.1875,55.0313,76.1875,64.125,70.9063,73.875,65.2344,73.875,52.7188,73.875,44.8281,65.8125,41.9531,60.75,40,50.9063,40,30.0938,40,13.0313,44.6406,13.0313,35.3125,30.2813,31,50.9063,31,82.9688,31,82.9688,52.6875]),
		kernings: {}
	  },
	  'な':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,2,2,2,2,2,3,1,2,3,2,3,2,2,2,3,2,3,2,1,3,3,3,3]),
		paths: $.toNumberVector([85.25,79.4375,75.5,73.3125,67.4375,70.1563,65.5781,77.3281,60.2813,81.5313,54.7969,86,46.9844,86,38.9844,86,34.1406,82.5469,28.6563,78.6406,28.6563,70.9844,28.6563,56.7188,48.4219,56.7188,53.3438,56.7188,59,57.9375,59,19.5313,83.1875,19.5313,83.1875,29,68.375,29,68.375,60.5625,76.25,63.3594,85.25,68.125,52.5625,28.625,36.25,28.625,29.5938,52.125,21.0625,73.5781,10.6563,73.5781,19.4688,52.125,26.2188,28.625,10,28.625,10,19.5313,28.6563,19.5313,30.25,13.5469,31.6563,7.375,41.5938,7.375,40.1875,13.5469,38.6875,19.5313,52.5625,19.5313,58.375,67.2969,52.8281,66,47.5625,66,38.3125,66,38.3125,70.7031,38.3125,76.4375,46.9063,76.4375,55.9688,76.4375,58.375,67.2969]),
		kernings: {}
	  },
	  'e':
	  {
		advanceHori: 47,
		commands: $.toIntVector([1,2,3,3,2,2,2,3,3,3,3,3,1,3,3]),
		paths: $.toNumberVector([44.9375,61.8125,11.0469,61.8125,11.8906,67,15.375,69.0938,18.7656,71.1875,25.8281,71.1875,44,71.1875,44,80,25.8281,80,2,80,2,57.25,2,47.8594,6.89063,41.3594,12.9219,33.1875,24.4063,33.1875,35.6094,33.1875,40.9844,42.5,44.9375,48.9844,44.9375,57.25,35.7188,53,33.5469,42,24.4219,42,13.5,42,11.2344,53]),
		kernings: {}
	  },
	  'a':
	  {
		advanceHori: 47,
		commands: $.toIntVector([1,2,3,3,3,3,2,3,2,2,2,3,3,1,2,2,3,3,3,3]),
		paths: $.toNumberVector([45,80,16.8906,80,12.0469,80,7.95313,77.25,2,73.4375,2,65.6406,2,57.8438,7.95313,53.9375,12.0313,51.1875,16.8594,51.1875,36,51.1875,34.7031,43.8125,24.4844,43.8125,3.01563,43.8125,3.01563,35,24.5156,35,34.3906,35,39.6875,40.0781,45,45.3438,45,54.3906,36.2813,71.1875,36.2813,60,16.8594,60,14.4375,60,12.6719,61.25,10.7188,62.7969,10.7188,65.5781,10.7188,68.3906,12.6719,69.9375,14.4375,71.1875,16.8594,71.1875]),
		kernings: {}
	  },
	  'm':
	  {
		advanceHori: 67,
		commands: $.toIntVector([1,2,2,3,3,2,2,2,2,2,2,2,2,2,3]),
		paths: $.toNumberVector([64.7188,80,56,80,56,56.3906,56,49.2031,52.4063,46.2813,49.2813,43.8125,42.6406,43.8125,37.7188,43.8125,37.7188,80,29,80,29,43.8125,10.7188,43.8125,10.7188,80,2,80,2,35,42.625,35,64.7188,35,64.7188,56.4219]),
		kernings: {}
	  },
	  's':
	  {
		advanceHori: 46,
		commands: $.toIntVector([1,3,2,2,2,3,3,3,2,3,3,3,2,2,2,3,3,3,2,3,3]),
		paths: $.toNumberVector([44,66.0469,44,80,26.9688,80,3.85938,80,3.85938,71.1875,26.9531,71.1875,31.6406,71.1875,33.4063,70.0469,35.2813,68.9063,35.2813,66.0469,35.2813,61,28.2656,61,18.9219,61,2,61,2,48.0156,2,40.75,7.70313,37.4531,11.8125,35,18,35,41.1875,35,41.1875,43.8125,17.9375,43.8125,10.7188,43.8125,10.7188,48.0156,10.7188,51.0469,13.5313,51.9063,14.75,52.1875,18.875,52.1875,28.25,52.1875,35.4688,52.1875,39.7813,55.7656,44,59.3438,44,66.0469]),
		kernings: {}
	  },
	  'k':
	  {
		advanceHori: 48,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([45.7813,80,33.125,80,10.7188,57.9219,10.7188,80,2,80,2,17,10.7188,17,10.7188,50.8281,31.0625,35,45.3125,35,20.0938,54.7031]),
		kernings: {}
	  },
	  'y':
	  {
		advanceHori: 44,
		commands: $.toIntVector([1,3,3,2,2,2,3,3,2,3,2,2,2,3,3,2,2,2]),
		paths: $.toNumberVector([41.7188,73.7344,41.7188,84.5625,37,89.2031,32.2813,94,21.9063,94,3.125,94,3.125,85.1875,22,85.1875,27.3125,85.1875,29.7813,83.1406,32.25,81.0781,32.25,76,21.625,76,2,76,2,56.8594,2,35,10.7188,35,10.7188,56.8594,10.7188,63.1406,13.4844,65.3906,15.8594,67.1875,21.5781,67.1875,33,67.1875,33,35,41.7188,35]),
		kernings: {}
	  },
	  '不':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,3,2,2,2,3,2,3,2,1,3,2,3]),
		paths: $.toNumberVector([9.28125,8.09375,87,8.09375,87,17,54.375,17,53.0625,20.6563,51.4688,24.125,51.4688,88.1563,42.0938,88.1563,42.0938,38.9375,29.4375,54.5938,7.125,67.7188,7.125,56.6563,35.3438,39.3125,44.1563,17,9.28125,17,55.3125,27.9688,74.7188,48.125,89.4375,57.875,89.4375,69.0313,67.0313,55.7188,55.3125,40.7188]),
		kernings: {}
	  },
	  '可':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,3,3,3,3,2,3,3,3,3,2,1,3,3,3,3,2,2,1,2,3,3,2]),
		paths: $.toNumberVector([8.78125,8.90625,88,8.90625,88,18,76.8438,18,77.125,31.6563,77.125,61.7969,77.125,73.3125,75.7188,77.6094,72.8125,86.7813,59.0313,87.4375,44.5938,87.1563,36.8125,85.4688,36.8125,76.375,48.8125,77.9688,58,77.9688,63.9063,77.7813,66.3438,73.9531,67.5625,71.6094,67.5625,61.875,67.375,30.5313,67.1875,18,8.78125,18,40.5625,25.5625,48.4375,25.5625,52.6563,31.75,57.0625,37.4688,57.4375,46.6563,57.4375,56.3125,53.125,61.6563,48.625,68.125,41.0313,68.5938,16,68.5938,16,25.5625,25.1875,59.9688,40,59.9688,48.1563,58.9375,48.1563,46.5625,48.1563,34.9375,40.0938,34,25.1875,34]),
		kernings: {}
	  },
	  '能':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,3,3,3,2,3,3,3,3,2,3,3,1,2,3,3,3,3,2,3,3,3,3,2,3,3,1,3,3,3,3,3,2,3,3,3,2,2,2,2,1,2,2,3,2,1,2,3,3,2,1,2,3,2,2,2,2,3,2,3,3]),
		paths: $.toNumberVector([87.2813,53.9688,87.2813,62.8438,76.5156,64.6094,61.5313,65.875,61.625,69.8906,61.8125,72.1719,63.125,79.3906,69.1406,79.3906,80.3906,78.8281,87.7188,77.3438,87.7188,85.7188,83.125,87.5938,67.1719,87.5938,54.9688,87.5938,53,74.7188,52.4375,68.7969,52.4375,62.3125,52.4375,52.9531,53,44.5313,62.1875,44.5313,61.625,49.8125,61.5313,56.9688,74.2656,55.8438,87.2813,53.9688,87,12.625,87,21.25,75.7656,22.75,60.3125,23.5,60.3125,26.2656,60.5,27.9219,61.7188,33.8125,67.8906,33.8125,79.4219,33.3438,86.9063,31.9688,86.9063,40.4063,82.2188,42.0938,66.2969,42.0938,53.9375,42.0938,52.0625,31.0938,51.5,26.1094,51.5,20.4531,51.5,12.5625,52.0625,5.40625,60.875,5.40625,60.4063,9.625,60.3125,15.1563,73.4219,14.3125,87,12.625,38.1094,36.9375,45.4219,38.4219,47.4844,45.1094,48.6094,50.1094,48.7969,63.8438,48.7969,72.375,48.3281,77.4844,46.6406,87.5,38.7656,88.1563,31.6563,88.1563,28,87.3125,28,79.5625,31.6563,79.9063,35.7656,80.0938,39.0469,79.9063,39.7031,76.7188,39.8906,74.9531,39.9844,73,19.5313,73,19.5313,88.25,11,88.25,11,36.9375,19.5313,64.6563,40.1719,64.6563,40.1719,63.8438,40.1719,60.625,40.0781,58,19.5313,58,19.5313,50.0313,39.6094,50.0313,39.5156,49.4375,39.4219,48.9375,39.2344,45,35.0625,45,19.5313,45,21.5469,4.40625,31.75,4.40625,23.7344,18,18.7813,24.2813,39.5156,24.2813,39.5156,9.375,47.8594,9.375,47.8594,26.0625,47.8594,32.3438,40.7344,33,13.2813,33,8.28125,33,8.09375,27.1875,8.375,23.8125,21.5469,4.40625]),
		kernings: {}
	  },
	  'ん':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,3]),
		paths: $.toNumberVector([85.5313,54.5938,81.6875,86,65,86,56.1875,86,52.7188,78.3281,50.5625,73.5469,49.8125,62.8906,49.5313,57.1719,48.5938,55.0313,47,51,42.5,51,35.5625,51,29.75,60.3594,25.25,67.8438,22.8125,78.5156,22.1563,80.6719,21.0313,85.9063,11.1875,85.9063,19.5313,52.2813,37.4375,9.375,48.6875,9.375,41,25.3125,34.625,43.5,38.4688,41.625,43.1563,41.625,51.3125,41.625,55.1563,46.1094,58.5313,50.0313,59.0938,58.0625,60.125,70.1563,60.3125,71.0938,61.3438,76.5313,65,76.5313,73.0625,76.5313,76.0625,54.5938]),
		kernings: {}
	  },
	  'て':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,2,2,3,3,3,2,2,2,3,3,3]),
		paths: $.toNumberVector([84.75,16.9375,84.75,20.4844,78.2813,22.9219,60,29.7656,52.3125,34.1719,35.5313,43.5313,35.5313,53.8281,35.5313,67.875,51.375,72.4688,59.9063,75,78.6563,75,78.6563,84.1875,76.3125,84.1875,62.625,84.1875,55.6875,83.1563,25.6875,78.1875,25.6875,54.2188,25.6875,36.1406,55.0313,22,12,22,12,12.5313,58.875,12.5313,61.6875,12.5313,67.5938,12.3438,73.3125,12.1563,76.3125,12.1563,84.75,12.1563,84.75,16.9375]),
		kernings: {}
	  },
	  '無':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,2,3,2,3,1,2,3,2,3,1,2,3,2,3,1,3,2,3]),
		paths: $.toNumberVector([18.6563,24.7969,14.8125,28.2656,10.5938,30.7031,10.5938,20.6875,18.5625,15.0625,23.1563,4.84375,32.9063,4.84375,31.125,8.6875,29.0625,11.9688,85.0313,11.9688,85.0313,20.4063,78.5625,20.4063,78.5625,35.4688,87.1875,35.4688,87.1875,44,78.5625,44,78.5625,59,86.5313,59,86.5313,67.4375,10.6875,67.4375,10.6875,59,18.6563,59,18.6563,44,8.8125,44,8.8125,35.4688,18.6563,35.4688,26.8125,20.4063,26.8125,35.4688,35.5313,35.4688,35.5313,20.4063,26.8125,44,26.8125,59,35.5313,59,35.5313,44,70.4063,59,70.4063,44,61.125,44,61.125,59,70.4063,35.4688,70.4063,20.4063,61.125,20.4063,61.125,35.4688,52.9688,59,52.9688,44,43.6875,44,43.6875,59,52.9688,35.4688,52.9688,20.4063,43.6875,20.4063,43.6875,35.4688,31.125,71.5625,39.9375,71.5625,42.1875,79.25,44.1563,87.7813,35.0625,87.7813,33.4688,79.5313,31.125,71.5625,51.9375,71.2813,60.75,71.2813,63.375,79.0625,65.5313,87.7813,56.5313,87.7813,54.75,79.3438,51.9375,71.2813,71.7188,71,80.7188,71,84.4688,79.3438,87.8438,88.625,78.5625,88.625,75.8438,79.625,71.7188,71,24.2813,71.1875,23.5313,85.5313,8.0625,90.125,8.0625,81.125,15.5625,78.7813,15.9375,71.2813]),
		kernings: {}
	  },
	  '限':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,2,3,3,2,3,3,2,3,2,2,3,3,2,3,3,2,1,2,2,3,1,2,2,2,3,1,3,3,3,3,2,2,2,3,3,3,3,2,2,2,2]),
		paths: $.toNumberVector([68.4063,6.71875,76.2969,7.28125,80.5781,13.5,84.75,18.7813,84.75,27.8438,84.4688,37.8438,80.375,43.125,76.3594,48.5,68.5313,48.875,66.5781,48.875,67.9531,53.2656,69.6875,57.1094,77.9219,51.5156,87.75,50.6719,87.75,58.6875,80.8125,59.4375,73.5938,63.8125,79.5938,72.3906,88.5938,77.7031,88.5938,86.5938,65.9219,78.3906,58.2188,49,52.7188,49,52.7188,73.5938,53.1719,78.7188,57.8594,79.375,65.0156,79.375,71.25,77.7031,71.25,86.4063,65.8438,88,56.1094,88,45.2969,86.9688,44,74.5313,44,6.71875,52.7188,14.7813,52.7188,23.9375,75.5625,23.9375,74.1719,16.125,67.2188,14.7813,75.2813,32,52.7188,32,52.7188,40.8438,65.375,40.8438,73.4219,40.0938,75.2813,32,30.875,6.90625,39.7188,7.1875,39.7188,16.1875,39.1563,24.8906,31.9375,34.3594,39.9844,52.0313,41.0313,65.125,41.0313,79.9375,29.4688,79.9375,21.9375,79.9375,21.9375,71.8281,28.8906,71.8281,32.875,71.6406,32.875,65.6719,30,49.0313,23.4219,34.0625,27.5781,29.8906,31,17.0938,31,15.0781,28.6875,14.5938,19,14.5938,19,89.3125,10.4688,89.3125,10.4688,6.90625]),
		kernings: {}
	  },
	  'パ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,3,1,2,3,2,3,1,2,3,3,2,3,3,2,1,3,3,3,3,3,3,3,3]),
		paths: $.toNumberVector([88.0313,13.1094,88.0313,16.8281,85.3125,19.5156,82.7031,22.2188,78.8594,22.2188,75.0156,22.2188,72.3125,19.5156,69.5938,16.8281,69.5938,13.1094,69.5938,9.39063,72.3125,6.70313,75.0156,4,78.8594,4,82.7031,4,85.3125,6.70313,88.0313,9.39063,88.0313,13.1094,89.0625,84.1875,77.6406,84.1875,61.9844,56.2813,54.6719,12.9219,64.5313,12.9219,72.2031,57.4063,89.0625,84.1875,36.75,12.8281,36.75,15.0781,36.75,33.5313,32.4375,51.125,27.75,70.2344,18.75,84.1875,6.75,84.1875,16.6875,71.0781,22.125,51.9688,27,34.2656,27,14.9844,27,12.8281,83.7188,13.1094,83.7188,11.0781,82.3125,9.6875,80.8281,8.21875,78.8594,8.21875,76.7969,8.21875,75.4063,9.6875,74,11.0781,74,13.1094,74,15.0469,75.4063,16.4375,76.7969,18,78.8594,18,80.8281,18,82.3125,16.4375,83.7188,15.0469,83.7188,13.1094]),
		kernings: {}
	  },
	  'ワ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,2,2,2,3,3,3,3,2,2,2,2,2,3]),
		paths: $.toNumberVector([83.2188,29.6719,83.2188,56.0938,66.2813,70.8906,51.1094,84,28.375,84,25.9375,84,25.9375,74.25,28.375,74.25,47.5469,74.25,59.625,63.4844,73,51.5938,73,29.6719,73,25.75,71.5,24.0625,69.625,22,64.9531,22,22.8438,22,22.8438,50.875,13,50.875,13,12.1563,65.4375,12.1563,83.2188,12.1563,83.2188,29.6719]),
		kernings: {}
	  },
	  '明':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,3,3,1,3,3,2,2,1,2,3,2,2,3,1,3,3,2,2,1,3,3,2,3,3,2,2,3,3,3,3,3,3,2,3,3,3,1,3,3,3,3,3,3,2,2]),
		paths: $.toNumberVector([19.9063,45.9063,19.9063,66,27.0313,66,32,65.125,32,60,32.8438,55.8125,32.9375,45.9063,32.8438,37,32.6563,30.8281,32.0938,25.5,31.9063,18.4844,25.3438,17.7188,19.9063,17.7188,19.9063,37,53.9375,39.9063,53.9375,42.3594,53.8438,48.2656,53.6563,54,78.125,54,78.125,48.3594,78.0313,44,77.8438,39.9063,77.1875,31.0156,76.9063,27.0313,76.4375,23.4219,76.0625,16.4219,68.5313,15.4688,53.9375,15.4688,53.9375,31.0156,53.2813,62.8125,53.0938,65.7031,52.9063,68.3906,52.1563,79.8438,50.9375,88.7813,41.9063,88.6875,43.1563,80.0156,43.9063,68.25,44.8438,54.8125,44.9375,42.2188,44.9375,7.125,68.1406,7.125,76.0313,7.59375,80.8281,11.7031,85.25,16.0781,85.9063,22.7969,87.3125,32.7813,87.4063,47.625,87.4063,61.0625,86.4688,72.4375,84.2031,87.0938,70.0156,87.0938,62.5938,87.0938,57.7031,85.875,57.7031,77.0781,64.1094,78,67.7813,78,76.5313,78,77.6563,70.3125,77.8438,67.2344,77.9375,62.8125,26.8438,9,32.0938,9.5625,35.6406,12.7344,39.1094,16.375,39.6719,20.8594,41.1719,28.1563,41.1719,43.5625,41.0781,56.0781,40.4375,60.4688,40.3438,66.1719,37.25,70.4375,33.5,74.7188,28.1563,75,11,75,11,9]),
		kernings: {}
	  },
	  '日':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,2,2,1,2,3,3,3,2,1,2,3,2]),
		paths: $.toNumberVector([57.5156,7,80.1875,9.4375,81.2188,43.25,81.2188,54.0469,81.0313,59.8594,80.1875,71.875,74.3438,78.6406,67.2031,87,58.625,87,19.0938,87,19,7,28.5625,77.4375,57.0469,77.4375,62.5156,77.4375,66.7656,72.7344,70.4375,68.7656,70.9063,60.1094,71.375,56.9063,71.5625,51.1563,28.5625,51.1563,28.5625,41.9688,71.5625,41.9688,70.5313,18.3438,55.3438,16.0938,28.4688,16.0938]),
		kernings: {}
	  },
	  'は':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,3,1,2,3,3,2,3,3,1,3,3,3,3]),
		paths: $.toNumberVector([84.5,69.8438,84.5,81.0313,75.4063,75.0156,67.25,71.3125,63.8906,86,46.8125,86,38.9844,86,34.125,82.5625,28.5313,78.6563,28.5313,71.2188,28.5313,63.6875,33.75,59.875,38.5,56.5313,46.2344,56.5313,51.9219,56.5313,58.8125,58.4063,58.8125,33,28.9063,33,28.9063,24,58.8125,24,58.8125,9.9375,68.2813,9.9375,68.2813,24,84.3125,24,84.3125,33,68.2813,33,68.2813,61.6875,76.3438,64.8438,84.5,69.8438,23.7344,84.3125,14,84.3125,11,60.2969,11,44.9844,11,28.25,13.9063,10.3125,23.5469,10.3125,20.4688,27.9688,20.4688,44.9844,20.4688,59.7344,23.7344,84.3125,58.4375,67.9219,51.8438,66,46.2656,66,38,66,38,71.2188,38,76.4375,46.8281,76.4375,56.9531,76.4375,58.4375,67.9219]),
		kernings: {}
	  },
	  'ど':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,2,3,2,3,1,3,3,3,3,2,2,2,3,2,3,3,3,3,3]),
		paths: $.toNumberVector([91.4688,21.0938,83.3125,21.0938,80.9688,15.9375,77.3125,9.84375,85.2813,9.84375,89.0313,15.2813,91.4688,21.0938,80.2188,25.0313,71.9688,25.0313,68.875,18.375,65.125,12,73.0938,12,77.2188,18,80.2188,25.0313,83.9688,85.3438,72.3906,86.4688,57.9844,86.4688,38.8906,86.4688,28.9063,83,12.625,77.4844,12.625,62.125,12.625,44.2344,39.8125,35.8125,39.4375,7.96875,48.9063,7.96875,49.1875,33.4688,64.8438,30.0938,82.6563,29.9063,82.75,39.375,63.5313,39.6563,47.2344,43.5938,22,49.7656,22,62.125,22,72.0469,36.0313,75.3125,43.0938,77,57.9688,77,72.4844,77,83.9688,75.7813]),
		kernings: {}
	  },
	  'か':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,3,3,3,2,3,3,3,3,3,2,3,2,3,2,2,2,3,2,3,2,3,3]),
		paths: $.toNumberVector([86.3438,55.1094,75.9375,55.1094,73.6875,40.625,59.8125,20.0938,70.5938,20.0938,82.125,37,86.3438,55.1094,63,58.8125,63,71.9844,60.0938,78.1094,55.6875,87.1875,43.4063,87.1875,39.6563,87.1875,29.0625,86.9063,29.0625,77.8125,39.6563,78.1875,43.4063,78.1875,51,78.1875,52.9688,71.4531,53.9063,68.5,53.9063,58.8125,53.9063,43.5781,51.2813,39.25,48.6563,35,39,35,36.4688,35,31.125,62.1094,20.9063,87.2813,10.4063,87.2813,21,61.8281,26.5313,35,9.75,35,9.75,26,28.2188,26,29.625,17.4688,30.8438,8.09375,40.5938,8.09375,39.4688,17.4688,38.1563,26,39,26,54.1875,26,59.1563,34.625,63,41.2969,63,58.8125]),
		kernings: {}
	  },
	  '？':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,2,2,2,3,3,3,3,3,2,3,3,3,1,2,2,2]),
		paths: $.toNumberVector([67,30.9844,67,36.9531,63.4688,41.8906,61.625,44.2188,55.4063,50.1719,51.5156,53.7969,50.7656,54.6406,47.9844,57.7188,47.4375,59.9531,47.1563,61.3438,47.1563,64.0469,47.1563,68.0469,37.6875,68.0469,37.6875,61.0781,37.6875,55.9531,44.1719,49.0781,49.2813,43.875,54.375,38.7656,57.4375,35.0469,57.4375,31.3281,57.4375,21,41.7813,21,37.0938,21,29.125,23.1406,29.125,13.6875,35.9688,11.7188,43.5625,11.7188,53.7813,11.7188,59.9688,16.1875,67,21.125,67,30.9844,48,85.0625,36.8438,85.0625,36.8438,74,48,74]),
		kernings: {}
	  },
	  '誰':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,1,2,2,2,1,2,2,2,1,2,2,2,1,3,3,3,3,2,2,1,2,3,3,2,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,3,2,3,1,2,2,2,1,2,2,2,1,2,2,2]),
		paths: $.toNumberVector([10.5,8.84375,37.5938,8.84375,37.5938,17,10.5,17,7.96875,20.9375,39,20.9375,39,29,7.96875,29,9.9375,33.5,37.6875,33.5,37.6875,41.8125,9.9375,41.8125,9.75,45.75,37.9688,45.75,37.9688,54,9.75,54,28.3594,58.2188,33.5313,58.2188,37.2813,62.25,40.3906,66,40.3906,72,40.3906,78.1875,36.9063,82.3125,33.3438,86.25,28.0781,86.5313,9.65625,86.5313,9.65625,58.2188,18,78.75,26.9063,78.75,31.7813,78,31.7813,71.7188,31.7813,66.375,26.625,65.25,18,65.25,63.7656,7.09375,72.6875,7.09375,73.25,10.9219,73.7188,14.75,87.1875,14.75,87.1875,23.4688,74,23.4688,74,36,86.0781,36,86.0781,44.9063,74,44.9063,74,57.1875,86.1719,57.1875,86.1719,66,74,66,74,78.2813,87.75,78.2813,87.75,87,44.4688,87,44.4688,35.2344,42.9688,37.0313,41.2813,38.625,41.2813,25.625,47.1875,18.6406,49.9063,5.59375,58.6719,5.59375,57.6406,10.4688,56.2188,14.75,64.9063,14.75,64.3281,10.9219,63.7656,7.09375,65,78.2813,65,66,53,66,53,78.2813,65,57.1875,65,44.9063,53,44.9063,53,57.1875,65,36,65,23.4688,53,23.4688,53,36]),
		kernings: {}
	  },
	  'に':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,1,3,3,3,2,3,3,3,1,2,3,3,2,3,3]),
		paths: $.toNumberVector([79.625,25.8594,33.125,25.8594,33.125,16.7813,79.625,16.7813,83.6563,78.2813,70.3438,80.1563,60.0313,80.1563,31.625,80.1563,31.625,63.2656,31.625,57.7344,33.7813,49.6563,43.625,49.6563,41,57.8125,41,63.2656,41,70.6719,60.0313,70.6719,70.4375,70.6719,83.6563,68.6094,25.3906,84.5625,15.8125,84.5625,12.5313,67.2188,12.5313,40.4063,12.5313,26.3438,15.4375,9,25.0156,9,22,26.625,22,40.4063,22,67.6875,25.3906,84.5625]),
		kernings: {}
	  },
	  'も':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,2,2,2,3,2,2,2,3,2,3,2,2,2,3,2,2,2,3,3,3,3,3,2,3]),
		paths: $.toNumberVector([85.6563,65.0313,85.6563,79.5938,77.125,84.4063,71.7656,87.375,57.8906,87.375,45.0469,87.375,38.75,83.1094,33.125,79.2188,31.4375,70.8906,30.125,65.1563,30.125,52,11,52,11,43,30.2188,43,30.5,36.9844,30.875,30.0938,12.9688,30.0938,12.9688,21,31.4375,21,31.9063,14.3438,32.4688,7.40625,41.9375,7.40625,41.375,14.1563,40.9063,21,72.8906,21,72.8906,30.0938,40.3438,30.0938,39.9688,36.9844,39.7813,43,69.9688,43,69.9688,52,39.6875,52,39.6875,68.7813,42.125,72.8438,45.2188,78,57.8906,78,69.4375,78,72.3438,76.1563,76,73.9375,76,64.9688,76,56.5625,74.5938,48.3438,84.1563,48.3438,85.6563,57.7031,85.6563,65.0313]),
		kernings: {}
	  },
	  '分':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,3,3,3,3,2,3,3,3,2,3,2,3,1,3,3,2,3,3,2,2,1,2,3,2,3]),
		paths: $.toNumberVector([33,49.625,19.4063,49.625,19.4063,40.0625,58.875,40.0625,67.7813,41,73.5938,46.75,78.75,53.25,78.75,65.2969,78.75,88.2813,54.5625,88.2813,45.4688,88.2813,37.3125,87.625,37.3125,77.6719,43.9688,78.9063,54.1875,78.9063,69.0938,78.9063,69.0938,64.3594,69,50.375,56.625,49.625,42.2813,49.625,40.5,77.1563,11.625,90.1563,11.625,79.5625,31.4063,69.4531,33,49.625,61.2188,7,69.0938,7.9375,74.8125,15.2031,83.0625,32.0781,88.9688,47.4688,77.9063,47.4688,72.8438,33.7813,66.9375,20,63.8438,15.625,59.5313,15.625,40.3125,15.625,40.3125,7,27.375,7,37.3125,7,28.875,34.9688,8.53125,48.0313,8.53125,36.4375,21,26,27.375,7]),
		kernings: {}
	  },
	  'キ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([88.0313,56.7813,55.2188,59.5938,60.4688,87.5313,50.8125,87.5313,45.6563,60.4375,8.8125,63.625,7.96875,54.25,43.9688,51.0625,40.5938,33.5313,11.8125,35.9688,10.9688,26.5938,38.9063,24.1563,35.8125,7.75,45.375,7.75,48.375,23.3125,79.2188,20.5938,79.9688,30.0625,50.1563,32.5938,53.4375,50.3125,87.1875,47.3125]),
		kernings: {}
	  },
	  'ラ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,1,3,3,2,3,3,3,2,2,2,3,3]),
		paths: $.toNumberVector([75.75,20.3125,18,20.3125,18,10.9375,75.75,10.9375,84.2813,43.8594,84.2813,58,67.6875,71.125,51,84.25,23.5313,85.75,23.5313,76.375,42.9375,76,57,66.8125,74.4375,55.5,74.4375,43.6406,74.4375,39,66.75,39,11.9063,39,11.9063,29.5313,68.4375,29.5313,75.1875,29.5313,79.5938,33.1563,84.2813,37.25,84.2813,43.8594]),
		kernings: {}
	  },
	  '世':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,2,3,3,3,3,2,3,3,3,3,2,1,2,3,2,3,2]),
		paths: $.toNumberVector([8,24.5313,17.1875,24.5313,17.375,16.0938,17.75,7.5625,27.125,7.5625,26.6563,15.7188,26.5625,24.5313,39.3125,24.5313,39.3125,5.3125,48.3125,5.3125,48.3125,24.5313,66.9688,24.5313,66.9688,5.3125,75.875,5.3125,75.875,24.5313,87.4063,24.5313,87.4063,34,75.875,34,75.875,59.2656,75.875,66.8125,67.5313,67,47.1875,67,40.5313,66.8125,39.3125,59.4063,39.3125,34,26.4688,34,26.4688,34.5625,26.4688,35.1094,26.4688,58.0938,26.9375,66.2813,27.5938,78,35.0938,78,66.7813,78,85.0625,75.2344,85.0625,84.375,70.8125,87,35.75,87,19.7188,87,17.6563,70.3906,17.0938,53.0469,17,35.2188,17,34.4688,17,34,8,34,48.3125,34,48.3125,56.1094,48.3125,58,50,58,65.1875,58,66.9688,58,66.9688,56.6719,66.9688,34]),
		kernings: {}
	  },
	  '界':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,2,3,2,3,2,2,2,2,3,2,3,2,2,3,2,3,3,2,3,2,2,1,2,2,2,1,2,2,3,1,2,2,2,1,2,2,3]),
		paths: $.toNumberVector([69.2188,6.9375,85.625,7.5,85.625,26.4688,85.625,43.75,71.4688,45.25,66.7813,45.25,76.0625,56.0781,88.9063,59.2188,88.9063,69.3438,75.875,65.7813,67.0625,58.4688,67.0625,89.875,57.7813,89.875,57.7813,55,63.3125,55,59.125,50.5781,56.1875,45.25,38.3438,45.1563,36.2969,50.4844,32.5,54.9063,37.2813,54.9063,37.2813,57.7188,36.8125,86.4063,16,90.9063,16,80.7813,28,77.125,28.2813,58.8438,20.3125,65.125,7.75,69.3438,7.75,59.7813,23.4063,53.8906,28.1875,45.1563,13.8125,45.1563,13.8125,6.9375,23,37,43,37,43,30.0625,23,30.0625,52.0938,30.0625,52.0938,37,69.6875,37.0938,75.2969,37,76.25,30.0625,23,22,43,22,43,15,23,15,52.0938,15,52.0938,22,76.1563,22,74.9219,15,68.9219,15]),
		kernings: {}
	  },
	  'p':
	  {
		advanceHori: 47,
		commands: $.toIntVector([1,3,3,2,2,2,2,2,3,3,1,3,3,2,2,2,3,3]),
		paths: $.toNumberVector([44.7188,57.3594,44.7188,66.9531,38.8125,73.5156,32.7344,80,23.3594,80,10.7188,80,10.7188,95,2,95,2,35,23.4063,35,32.75,35,38.8281,41.3906,44.7188,47.6875,44.7188,57.3594,36,57.3594,36,51.1563,32.5156,47.5,28.9531,43.8125,23.4063,43.8125,10.7188,43.8125,10.7188,71.1875,23.4063,71.1875,28.8594,71.1875,32.4219,67.3281,36,63.5625,36,57.3594]),
		kernings: {}
	  },
	  'き':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,3,2,3,3,2,3,3,3,2,3,3,2,3,3,2,3,3,3,1,3,3,3,2,3,3,3,3,3]),
		paths: $.toNumberVector([86.4375,36.3594,86.4375,45.375,76.0313,46.4063,63.1875,47.0625,68.8125,56.5781,74.1563,64,62.5313,64,57.4688,56.4844,52.4063,47.625,32.625,48.375,9,48.375,9,39.375,29.4375,39.375,47.4375,38.7188,45.0938,34.6719,42.9375,30.7188,29.1563,31.0938,12.5625,31.1875,12.4688,22.0938,25.5938,22.0938,38.5313,21.8125,35.0625,14.5,32.4375,8.03125,42.8438,8.03125,45.4688,14.4063,48.9375,21.3438,65.5313,20.5938,79.875,19,79.875,28.0938,67.5,29.5938,53.3438,30.25,55.6875,34.3281,58.125,38.4063,74.0625,37.5625,86.4375,36.3594,76.125,86,64.875,86.9375,46.125,86.9375,19.3125,86.9375,19.3125,69.2188,19.3125,62.8438,25.0313,55.25,37.125,55.25,29.0625,64.0625,29.0625,69.2188,29.0625,74.6563,35.4375,76.4375,38.9063,77.4688,46.125,77.4688,57.5625,77.4688,66.9375,76.8125,71.5313,76.5313,76.125,76.1406]),
		kernings: {}
	  },
	  'っ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,2,3,3,3,3,3,3,2,3,3,3]),
		paths: $.toNumberVector([79,56.8594,79,72.3594,66.8125,78.8906,57.1563,83.9063,37.8438,84,35.0313,84,27.4375,83.8125,27.4375,74.9063,34.75,75.0938,37.2813,75.0938,54.8125,75.0938,62.2188,71.0938,70,66.9219,70,56.8438,70,51.0313,66.1563,47.7031,61.9375,44,53.875,44,37.8438,44,16.1875,49.2344,16.1875,39.875,37.6563,35,53.875,35,65.125,35,72.0625,41.0469,79,46.9219,79,56.8594]),
		kernings: {}
	  },
	  'と':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,2,2,2,3,2,3,3,3,3,3]),
		paths: $.toNumberVector([83.9688,85.3438,72.3906,86.4688,57.9844,86.4688,38.8906,86.4688,28.9063,83,12.625,77.4844,12.625,62.125,12.625,44.2344,39.8125,35.8125,39.4375,8.25,48.9063,8.25,49.1875,33.4688,64.8438,30.0938,82.6563,29.9063,82.75,39.375,63.5313,39.6563,47.2344,43.5938,22,49.7656,22,62.125,22,72.0469,36.0313,75.3125,43.0938,77,57.9688,77,72.4844,77,83.9688,75.7813]),
		kernings: {}
	  },
	  '待':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,2,3,2,2,2,3,3,3,2,2,2,3,3,2,1,2,3,2,3,1,3,2,3,2,3,2,2,1,2,3,2,3]),
		paths: $.toNumberVector([36.5313,32.5,57.1563,32.5,57.1563,22.2813,35.2188,22.2813,35.2188,13.6406,57.1563,13.6406,57.1563,5.28125,66.4375,5.28125,66.4375,13.6406,88,13.6406,88,22.2813,66.4375,22.2813,66.4375,32.5,86.7813,32.5,86.7813,41.2188,36.5313,41.2188,33.7188,49.2813,70.9375,49.2813,70.6563,46.5625,70.375,44.4063,79.8438,44.4063,80.125,46.6563,80.2188,49.2813,88,49.2813,88,57.8906,80.5938,57.8906,80.7813,64.2656,80.7813,72.4219,80.7813,80.1875,77.4063,84.125,73.8438,88.25,67.75,88.25,57.25,88.25,57.25,79.7188,65.7813,79.7188,71.7813,79.7188,71.7813,72.125,71.7813,64.0781,71.5,57.8906,33.7188,57.8906,41.2188,61.6406,50.875,61.6406,53.0313,74,54.0625,86,44.6875,86,43.75,75.5,41.2188,61.6406,17,48.25,12.125,52.3594,6.59375,55.2656,6.59375,44.875,18.7813,37.4688,25.625,23.9688,35.7813,23.9688,31.2813,32.6875,25.7188,39.3438,25.7188,89.375,17,89.375,22.3438,5,32.6563,5,22.5469,27.1406,6.5,36.25,6.5,25.6563,16.625,18.3281,22.3438,5]),
		kernings: {}
	  },
	  'こ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,2,3,2,2,2,3,3,1,3,3,3,3,3,3,2,3,3,3,3]),
		paths: $.toNumberVector([75.0313,18.0938,75.0313,21.9375,69.5938,24.8438,61.0625,29.5313,54.5938,34.125,38.1875,34.125,45.5938,29.0625,56.2813,21.2813,16.0625,21.2813,16.0625,12,67.8125,12,70.9063,12,72.875,13.5938,75.0313,15.0938,75.0313,18.0938,81.875,83.1563,72.6875,84.4688,58.4375,84.4688,43.4375,84.4688,40.4375,84.2813,28.625,83.5313,22.3438,79.9688,14,75.4688,14,66.1875,14,61.3125,17.375,56.3438,18.7813,54.4688,24.4063,48.4688,38.6563,48.4688,24.0313,59.625,24.0313,66.1875,24.0313,72,33.4063,73.9688,38.1875,75,47.4688,75,70.1563,75,81.875,73.0313]),
		kernings: {}
	  },
	  '魔':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,3,3,2,3,3,2,1,2,2,3,2,3,2,3,2,3,3,3,3,2,3,2,2,2,2,3,3,2,3,3,3,2,2,3,3,2,3,3,2,2,2,2,3,1,2,2,2,1,2,2,3,1,2,2,2,1,2,2,3,1,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,3,3,3,3,2,3,3,3,3,1,2,3,2,3]),
		paths: $.toNumberVector([45.9688,4.9375,55.875,4.9375,55.875,8.875,87.1875,8.96875,87.1875,17.3125,19.625,17.2188,19.625,24.5156,19.5313,31.9063,19.1563,62.2813,17.5625,88.8438,8.75,89.0313,11,61.0625,11,30.2031,11.0938,20.8438,11.0938,8.875,45.9688,8.875,49.25,46.6563,55,46.6563,55,37.7344,56.7344,35.375,56.7344,31.5156,62.2813,31.5156,62.0938,41.9063,55.4375,46.6563,58.8281,46.6563,58.2188,47.875,57.3438,49,70.1875,49,76.7969,49,80.375,52.1406,84.0625,55.0156,84.4375,59.5938,84.3438,64.5938,80.7344,67.4219,76.9219,70.9063,70.6563,71.0938,68.9375,71.0938,68.0781,72.0781,67.3281,73,77.3125,73,77.3125,70.5625,84.7969,70.5625,84.7969,75.1563,84.7969,76.4688,83,77.4063,81.1875,78.1563,79.4844,78.1563,63.7188,78.1563,61.8125,77.9844,60.3906,76.9219,59.4375,75.6875,59.4375,74.7188,59.4375,74.2656,61.0469,71.0938,56.6563,71.0938,56.6563,76.6719,56.75,81.0625,65.0313,81.0625,77.5938,81.0625,87.4688,79.8594,87.4688,87.0625,81.1875,88,61.6094,88,48.9688,88,48.125,79.2656,48.125,71.0938,25.0625,71.0938,25.0625,49,47.75,49,48.5938,47.7813,49.25,46.6563,32.8438,65,48.5,65,48.5,62.4063,32.8438,62.4063,56.6563,62.4063,56.6563,65,69.6875,65,74.375,64.7188,75.6875,62.4063,32.8438,56.9688,48.5,56.9688,48.5,55,32.8438,55,56.6563,55,56.6563,56.9688,75.6875,56.9688,74.0938,55.2813,69.7813,55,35.2813,73,43.0625,73,42.5,84.1875,22.5938,89.5,22.5938,81.625,35.1875,78.3594,35.2813,73,23.8438,22.5,33.6875,22.5,33.6875,20.0938,41.0938,20.0938,41.0938,22.5,51.3125,22.5,51.3125,30,41.0938,30,41.0938,45.4375,33.6875,45.4375,33.6875,30,23.8438,30,44.4688,31.4219,51.125,31.4219,51.125,44.3125,44.4688,44.3125,55,22.5,64.8594,22.5,64.8594,20.5469,72.4531,20.5469,72.4531,22.5,84.625,22.5,84.625,30,72.4531,30,72.4531,45.4375,64.8594,45.4375,64.8594,30,55,30,76.2656,31.6094,83.1094,31.6094,83.0156,33.875,83.0156,36.0469,83.0156,37.3594,83.1875,38.5,83.5313,39.4375,84.75,39.4375,85.9531,39.4375,87,39.3438,87,45.8125,85.7188,46,81.8594,46,77.4531,46,76.5313,42.8906,76.0781,40.7344,76.0781,38.4688,76.0781,34.7188,76.2656,31.6094,25.4375,31.7031,31.1563,31.7031,30.9688,42.75,23.5313,47.7813,23.5313,38.5,25.3438,35.9531,25.4375,31.7031]),
		kernings: {}
	  },
	  '法':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,2,3,1,3,2,3,1,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,2,2,3,2,3,3,2,2,2,2,2,2]),
		paths: $.toNumberVector([8.84375,8.21875,20,10.9375,29.1875,14.9688,29.1875,25.4688,19.0625,20.5,8.84375,18.0625,8.5625,28.0938,19.8125,31.0469,29,35.5781,29,45.7813,18.7813,40.3125,8.5625,37.625,19.4375,50.6563,28.5313,50.6563,23.5625,72.5938,8.65625,86.1563,8.65625,72.3438,15.9688,64.7969,19.4375,50.6563,33.3125,19,55.5313,19,55.5313,5.125,64.8125,5.125,64.8125,19,86.6563,19,86.6563,28,64.8125,28,64.8125,43.9063,88.4375,43.9063,88.4375,53,60.9688,53,46.4375,76.1094,46.4375,77.9063,48.5,78,72.5,78,75.3125,77.625,75.3125,74.1406,75.3125,61.7813,84.7813,61.7813,84.7813,78.1563,84.3125,86.0625,74.9375,86.9063,39.7813,86.9063,35.5625,86.625,33.9688,81.2813,33.9688,79.7656,34.8125,77.1406,49.9063,53,32,53,32,43.9063,55.5313,43.9063,55.5313,28,33.3125,28]),
		kernings: {}
	  },
	  'ば':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,3,2,3,1,2,3,2,3,1,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,3,1,2,3,3,2,3,3,1,3,3,3,3]),
		paths: $.toNumberVector([95.375,15.0938,87.2188,15.0938,84.7813,9.9375,81.125,3.75,89.0938,3.75,92.9375,9.28125,95.375,15.0938,84.2188,18.9375,76.0625,18.9375,72.9688,12.375,69.125,6,77.0938,6,81.3125,11.9063,84.2188,18.9375,84.5,69.8438,84.5,81.0313,75.4063,75.0156,67.25,71.3125,63.8906,86,46.8125,86,38.9844,86,34.125,82.5625,28.5313,78.6563,28.5313,71.2188,28.5313,63.6875,33.75,59.875,38.5,56.5313,46.2344,56.5313,51.9219,56.5313,58.8125,58.4063,58.8125,33,28.9063,33,28.9063,24,58.8125,24,58.8125,10.125,68.2813,10.125,68.2813,24,84.3125,24,84.3125,33,68.2813,33,68.2813,61.6875,76.3438,64.8438,84.5,69.8438,23.7344,84.3125,14,84.3125,11,60.3594,11,45.0781,11,28.3906,13.9063,10.5,23.5469,10.5,20.4688,28.1094,20.4688,45.0781,20.4688,59.7969,23.7344,84.3125,58.4375,67.9219,51.8438,66,46.2656,66,38,66,38,71.2188,38,76.4375,46.8281,76.4375,56.9531,76.4375,58.4375,67.9219]),
		kernings: {}
	  },
	  '　':
	  {
		advanceHori: 96,
		commands: $.toIntVector([]),
		paths: $.toNumberVector([]),
		kernings: {}
	  },
	  'ほ':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1,2,3,3,2,3,3,1,3,3,3,3,3]),
		paths: $.toNumberVector([84.5,78.0625,75.5938,72.625,67.3438,69.4375,64.3281,85.2813,47,85.2813,39.0781,85.2813,34.1875,81.8125,28.4375,77.875,28.4375,70.375,28.4375,62.5938,33.8125,58.6563,38.4375,55.0938,46.3594,55.0938,52.0156,55.0938,58.625,56.5938,58.625,40.9375,28.7188,40.9375,28.7188,31.8438,58.625,31.8438,58.625,19.9375,30.2188,19.9375,30.2188,10.9375,77.6563,10.9375,77.6563,19.9375,68.0938,19.9375,68.0938,31.8438,82.9063,31.8438,82.9063,40.9375,68.0938,40.9375,68.0938,59.5,76.25,62.5,84.5,67,23.4844,86.0313,14,86.0313,11,65.7813,11,44.125,11,25,13.9063,8.875,23.3906,8.875,20.375,24.8125,20.375,44.125,20.375,65.875,23.4844,86.0313,58.4375,66.3438,51.8125,64.5625,46.3281,64.5625,38,64.5625,38,70.375,38,75.7188,46.9844,75.7188,52.9531,75.7188,55.5938,73.2813,57.9688,71.0313,58.4375,66.3438]),
		kernings: {}
	  },
	  'T':
	  {
		advanceHori: 63,
		commands: $.toIntVector([1,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([60,25.8125,36,25.8125,36,80,27.2813,80,27.2813,25.8125,3,25.8125,3,17,60,17]),
		kernings: {}
	  },
	  'c':
	  {
		advanceHori: 46,
		commands: $.toIntVector([1,2,3,3,3,3,2,2,2,3,3,3,3,2]),
		paths: $.toNumberVector([43.5,80,22.8438,80,14.7188,80,8.64063,74.5313,2,68.2188,2,57.6406,2,46.8906,8.64063,40.5625,14.625,35,22.8438,35,43.5,35,43.5,43.8125,22.8906,43.8125,18.125,43.8125,14.6563,47.0469,10.7188,50.8281,10.7188,57.6406,10.7188,64.2656,14.75,67.9688,18.125,71.1875,22.8906,71.1875,43.5,71.1875]),
		kernings: {}
	  },
	  'u':
	  {
		advanceHori: 46,
		commands: $.toIntVector([1,2,3,2,2,2,3,3,2,2,2]),
		paths: $.toNumberVector([44,80,24.4531,80,2,80,2,58.2969,2,35,10.7188,35,10.7188,58.3281,10.7188,66.1875,14.7969,69.0156,17.8281,71.1875,24.4688,71.1875,35.2813,71.1875,35.2813,35,44,35]),
		kernings: {}
	  },
	  'v':
	  {
		advanceHori: 56,
		commands: $.toIntVector([1,2,2,2,2,2,2]),
		paths: $.toNumberVector([53.3438,35,31.6875,80,24.0938,80,2.4375,35,12.1875,35,27.8438,67.6406,43.5938,35]),
		kernings: {}
	  },
	  '止':
	  {
		advanceHori: 96,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,3,2,3,2,2,2,2]),
		paths: $.toNumberVector([8,77,18.4063,77,18.4063,14.4688,27.6875,14.4688,27.6875,77,47.2813,77,47.2813,4.53125,56.75,4.53125,56.75,29.5625,73.0625,27.9688,86.0938,26,86.0938,35.2813,74.1875,37.3438,56.75,38.6563,56.75,77,87.5938,77,87.5938,86.1875,8,86.1875]),
		kernings: {}
	  }
	};

	Snw.Art.Fonts.DFPSG =
	{
	  size: 72,
	  underlinePosition: 84.1094,
	  underlineThickness: 0.390625,
	  width: 96,
	  height: 96,
	  glyphCount: 28,
	  ascender: 82,
	  descender: -13,
	  'f':
	  {
		advanceHori: 38,
		commands: $.toIntVector([1,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,3,2]),
		paths: $.toNumberVector([37.5938,26,24,26,24,45,37.3125,45,37.3125,52,24,52,24,81.2656,24,95,9.59375,95,1.8125,95,1.8125,83,8,83,8,52,1.8125,52,1.8125,45,8,45,8,27.8594,8,14,23.4375,14,37.5938,14]),
		kernings: {}
	  },
	  'r':
	  {
		advanceHori: 52,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,3,3,2,3,3]),
		paths: $.toNumberVector([52,54.875,38,54.875,38,44,19,44,19,80.6563,4,80.6563,4,32,19,32,19,34.8125,22.7031,36.2188,24.1875,33.5,26.6875,32.5625,28.3594,32,32.25,32,43.375,32,48.4844,32,50.3281,33.9688,52,35.75,52,40.8125]),
		kernings: {}
	  },
	  'o':
	  {
		advanceHori: 58,
		commands: $.toIntVector([1,3,3,2,3,3,2,3,3,2,3,1,2,2,2]),
		paths: $.toNumberVector([57,66.8438,57,73.6406,53.0781,77.3125,49.2344,81,42.3125,81,13.9688,81,9.20313,81,5.82813,77.5,2,73.5469,2,66.8438,2,44.6563,2,38.7031,5.28125,35.2969,8.45313,32,13.6875,32,43.3438,32,57,32,57,44.6563,43,69,43,44,16,44,16,69]),
		kernings: {}
	  },
	  'm':
	  {
		advanceHori: 90,
		commands: $.toIntVector([1,2,3,3,2,2,2,2,2,2,2,2,2,2,2,3,2,3,3,2,3,3,2,2]),
		paths: $.toNumberVector([88.8438,81,83.3125,81,76.7344,81,74,78.3594,71,75.25,71,67.125,71,44,51,44,51,80.75,37,80.75,37,44,18,44,18,80.75,4,80.75,4,32,18,32,18,38.75,23.3438,32,29.5313,32,40.3906,32,47.6094,32,50.9844,39.875,53.9844,32,61.6719,32,72.9063,32,79.9375,32,82.75,35.5938,85,38.625,85,45.9063,85,69,88.8438,69]),
		kernings: {}
	  },
	  ' ':
	  {
		advanceHori: 31,
		commands: null,
		paths: null,
		kernings: {}
	  },
	  'b':
	  {
		advanceHori: 64,
		commands: $.toIntVector([1,3,2,3,3,2,2,2,2,2,2,3,2,3,1,2,2,2]),
		paths: $.toNumberVector([64,69.1719,64,81,52.2188,81,37.0781,81,28.75,81,25.3906,73.5938,23.0469,81,12.8594,81,4.15625,81,4.15625,68,8,68,8,14.125,24,14.125,24,38.9844,28.1094,34,33.4219,34,52.25,34,64,34,64,45.9219,49,69,49,45,24,45,24,69]),
		kernings: {}
	  },
	  'e':
	  {
		advanceHori: 58,
		commands: $.toIntVector([1,2,2,2,2,2,3,2,3,3,2,3,3,1,2,2,2]),
		paths: $.toNumberVector([58,59,18,59,18,69,47.1563,69,47.1563,80,14.4375,80,2,80,2,67.7031,2,45.0469,2,38.75,5.57813,35.3281,9.0625,32,15.4531,32,47.9219,32,53.1094,32,55.6406,35.0938,58,38.0938,58,45.2188,45,54,45,44,18,44,18,54]),
		kernings: {}
	  },
	  'a':
	  {
		advanceHori: 62,
		commands: $.toIntVector([1,2,3,3,2,3,2,3,2,3,2,2,2,2,1,2,2,2]),
		paths: $.toNumberVector([61.9375,81,51.7969,81,43.3281,81,40.3594,73.0313,37.6094,81,29.5,81,12.9219,81,1,81,1,68.5313,1,44.4688,1,32,13,32,30.1875,32,38.5469,32,42,38.5625,42,32,58,32,58,70,61.9375,70,42,69,42,44,16,44,16,69]),
		kernings: {}
	  },
	  't':
	  {
		advanceHori: 45,
		commands: $.toIntVector([1,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([45.9688,81,20.2656,81,13,81,10.4531,77.875,8,74.6719,8,65.9688,8,45,2.375,45,2.375,38,8,38,8,14.1875,23,14.1875,23,38,45.5938,38,45.5938,45,23,45,23,69,45.9688,69]),
		kernings: {}
	  },
	  'n':
	  {
		advanceHori: 66,
		commands: $.toIntVector([1,2,3,2,2,2,2,2,2,2,3,2,3,3,2,2]),
		paths: $.toNumberVector([64.5938,81,56.3438,81,45,81,45,71,45,44,18,44,18,80.75,4,80.75,4,32,18,32,18,39.2188,24.375,32,32.375,32,42.8594,32,52.8594,32,56.6719,36.6563,60,40.7344,60,51.0625,60,69,64.5938,69]),
		kernings: {}
	  },
	  'i':
	  {
		advanceHori: 23,
		commands: $.toIntVector([1,2,2,2,1,2,2,2]),
		paths: $.toNumberVector([19,24,4,24,4,13,19,13,19,81.0625,4,81.0625,4,34.0938,19,34.0938]),
		kernings: {}
	  },
	  'I':
	  {
		advanceHori: 22,
		commands: $.toIntVector([1,2,2,2]),
		paths: $.toNumberVector([20,81.0625,3,81.0625,3,14.2188,20,14.2188]),
		kernings: {}
	  },
	  'D':
	  {
		advanceHori: 74,
		commands: $.toIntVector([1,3,2,2,2,3,3,1,2,2,2]),
		paths: $.toNumberVector([73,64.1719,73,81,57.3438,81,4,81,4,14,57.8125,14,64.9375,14,68.9688,18.1406,73,22.2656,73,30.1563,56,67,56,28,20,28,20,67]),
		kernings: {}
	  },
	  'X':
	  {
		advanceHori: 78,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([78.375,81.375,58.4063,81.375,45.1875,54,34.5,54,21.375,81.375,1.40625,81.375,19.9688,47.2031,2.625,14.4375,21.0938,14.4375,34.5,42,45.1875,42,58.5938,14.4375,77.0625,14.4375,59.8125,47.2031]),
		kernings: {}
	  },
	  '2':
	  {
		advanceHori: 72,
		commands: $.toIntVector([1,3,2,2,2,2,2,2,3,3,2,2,2,2,2,3,3]),
		paths: $.toNumberVector([69,35.875,69,42.8906,62.5313,44.8438,21,57.8438,21,67,69,67,69,81,4,81,4,64.0781,4,57.0781,6.54688,53.3281,9.375,49.125,16.7344,46.9688,54,35.5781,54,28,9.65625,28,9.65625,14,57.0938,14,64.0938,14,66.6406,15.9688,69,17.9219,69,23.625]),
		kernings: {}
	  },
	  '0':
	  {
		advanceHori: 72,
		commands: $.toIntVector([1,3,2,3,2,3,3,2,3,3,1,2,2,2]),
		paths: $.toNumberVector([70,64.4688,70,81,55.1719,81,18.9219,81,4,81,4,64.4688,4,30.1563,4,21.4219,7.5625,17.6719,11.0469,14,18.9219,14,55.1719,14,63.1406,14,66.625,17.6719,70,21.2344,70,30.1563,54,67,54,28,20,28,20,67]),
		kernings: {}
	  },
	  'c':
	  {
		advanceHori: 49,
		commands: $.toIntVector([1,2,3,2,3,3,2,2,2,2,2]),
		paths: $.toNumberVector([48.75,81,14.7188,81,2,81,2,68.4375,2,44.8438,2,38.9844,5.65625,35.5,9.20313,32,15.1875,32,48.75,32,48.75,44,18,44,18,69,48.75,69]),
		kernings: {}
	  },
	  'J':
	  {
		advanceHori: 60,
		commands: $.toIntVector([1,3,2,3,3,2,2,2,2,2,2]),
		paths: $.toNumberVector([59,64.4688,59,81,43.9063,81,17,81,9.26563,81,5.625,76.9688,2,73.0469,2,64.4688,2,54.0625,17,54.0625,17,67,44,67,44,13.8438,59,13.8438]),
		kernings: {}
	  },
	  'G':
	  {
		advanceHori: 72,
		commands: $.toIntVector([1,3,2,3,2,3,3,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([71,64.8125,71,81,56.1094,81,17.8906,81,3,81,3,64.75,3,30.25,3,21.4219,6.5,17.6719,9.89063,14,18.2656,14,70,14,70,28,19,28,19,67,55,67,55,55,45.4375,55,45.4375,43,71,43]),
		kernings: {}
	  },
	  'k':
	  {
		advanceHori: 56,
		commands: $.toIntVector([1,2,2,2,2,2,2,2,2,2,2,2,2]),
		paths: $.toNumberVector([56.7813,33.625,41.5938,56.6406,56.6875,80.3125,40.2813,80.3125,28.6563,61,19,61,19,80.3125,4,80.3125,4,13.75,19,13.75,19,52,28.6563,52,40.375,33.625]),
		kernings: {}
	  },
	  'y':
	  {
		advanceHori: 57,
		commands: $.toIntVector([1,3,3,2,2,2,2,2,2,3,2,3,2,2]),
		paths: $.toNumberVector([32.3438,89.1563,30.375,93.6563,28.125,94.875,26.0625,96,20.4375,96,6.75,96,6.75,84,22.7813,84,1.40625,32.9063,17.25,32.9063,23.9063,50.0625,25.6875,54.6563,26.7188,62.7188,31.9688,62.7188,33.0938,54.4688,34.875,50.25,42.0938,32.9063,57.375,32.9063]),
		kernings: {}
	  },
	  'u':
	  {
		advanceHori: 66,
		commands: $.toIntVector([1,2,2,3,2,3,2,2,2,2,3,3,2,2,2,2]),
		paths: $.toNumberVector([64,81,50,81,50,74.7188,45.4219,81,37.7656,81,19.5469,81,9,81,9,66.875,9,43,4.3125,43,4.3125,32,13.7656,32,18.7031,32,20.7969,34.2656,23,36.4375,23,41.4375,23,69,50,69,50,32.25,64,32.25]),
		kernings: {}
	  },
	  'S':
	  {
		advanceHori: 68,
		commands: $.toIntVector([1,3,2,2,2,2,2,3,3,2,3,3,2,2,2,2,2,3]),
		paths: $.toNumberVector([68,71.5938,68,81,54.6875,81,1.375,81,1.375,67,52,67,52,54,16.8906,54,9.39063,54,5.9375,51.625,2,48.9688,2,42.9844,2,24.7344,2,18.9375,6.26563,16.375,10.4219,14,21.1875,14,63.0938,14,63.0938,28,18,28,18,42,54.6563,42,68,42,68,53.4531]),
		kernings: {}
	  },
	  'h':
	  {
		advanceHori: 67,
		commands: $.toIntVector([1,2,3,3,2,2,2,2,2,2,2,3,2,3,3,2,2]),
		paths: $.toNumberVector([64.5938,81,54.3906,81,49.9375,81,47.4219,78.75,45,76.6875,45,73.3125,45,46,18,46,18,80.9688,4,80.9688,4,14.125,18,14.125,18,39.5313,22.7969,34,30.2188,34,43.5625,34,52.9531,34,56.625,37.8438,60,41.5,60,50.7969,60,69,64.5938,69]),
		kernings: {}
	  },
	  'g':
	  {
		advanceHori: 57,
		commands: $.toIntVector([1,3,3,2,2,2,2,2,3,2,3,2,3,2,3,2,2,1,2,2,2]),
		paths: $.toNumberVector([57,78.9844,57,88.5781,53.8125,92.2969,50.7344,96,42.0625,96,23.125,96,23.125,85,43,85,43,74.5625,41,74.1875,38.9063,80,32.6094,80,13.9219,80,2,80,2,68.0313,2,44.0781,2,32,13.9219,32,30.125,32,39.2813,32,43,39.3125,43,32,57,32,43,68,43,44,17,44,17,68]),
		kernings: {}
	  },
	  'W':
	  {
		advanceHori: 90,
		commands: $.toIntVector([1,2,2,2,3,2,3,2,2,2,2,2,3,2,3,2,2,2,3,2,3,2]),
		paths: $.toNumberVector([90.9375,14.2188,76.5938,81.0625,58.875,81.0625,50.8125,44.4063,50.25,41.875,48.8438,31.6563,43.4063,31.6563,42.0938,41.7813,41.4375,44.4063,33.4688,81.0625,15.6563,81.0625,1.40625,14.2188,16.125,14.2188,21.1875,43.1875,21.75,46.75,22.6875,56.4063,29.25,56.4063,30.2813,47.0313,31.0313,43.2813,37.0313,14.2188,55.2188,14.2188,61.2188,43.2813,62.25,47.875,63.0938,56.4063,69.5625,56.4063,70.3125,47.9688,71.1563,43.1875,76.125,14.2188]),
		kernings: {}
	  },
	  'l':
	  {
		advanceHori: 22,
		commands: $.toIntVector([1,2,2,2]),
		paths: $.toNumberVector([19,81.0625,4,81.0625,4,14.2188,19,14.2188]),
		kernings: {}
	  },
	  'd':
	  {
		advanceHori: 64,
		commands: $.toIntVector([1,2,3,3,2,3,2,3,2,3,2,2,2,2,1,2,2,2]),
		paths: $.toNumberVector([61.6563,81,53.0469,81,42.9688,81,40.4531,73.5938,37.0938,81,28.7813,81,13.6719,81,2,81,2,69.1719,2,45.9219,2,34,13.6563,34,32.5781,34,37.9844,34,42,38.9844,42,14.125,58,14.125,58,68,61.6563,68,42,69,42,45,17,45,17,69]),
		kernings: {}
	  }
	};

	Snw.Art.Palettes = {};

	// Palette Class
	Snw.Art.Palette = function()
	{
	  var toRgb = function( color, colorSpace )
	  {
		switch( colorSpace )
		{
		  case "hsl":
			return Color.hslToRgb( color );
			break;
		  case "lab":
			return Color.labToRgb( color );
			break;
		  case "grayscale":
			return [ color[ 0 ], color[ 1 ], color[ 1 ], color[ 1 ] ];
			break;
		}
		return color;
	  };

	  var paletteBase =
	  {
		pickStop : function( rng )
		{
		  if ( !rng )
		  {
			var rng = Randomizer;
		  }

		  return this.colors[ rng.integer( 0, this.colors.length ) ];
		},
		pickRandom : function( rng )
		{
		  if ( !rng )
		  {
			var rng = Randomizer;
		  }

		  var base = this.pickStop( rng );
		  var vector;

		  if ( this.randomizeMethod === "vector" )
		  {
			vector = rng.vector( base.length );
			for ( var i = 0; i < vector.length; i ++ )
			{
			  vector[ 0 + i ] = vector[ 0 + i ] * ( this.randomizeRange[ 0 + i ] || 0 ) / 2;
			}
		  }
		  else
		  {
			vector = [];
			for ( var i = 0; i < base.length; i ++ )
			{
			  vector[ 0 + i ] = ( rng.uniform() - 0.5 ) * this.randomizeRange[ 0 + i ];
			}
		  }

		  // resulting color
		  return Vector.add( vector, base );
		},
		pickGradient : function( rng )
		{
		  if ( !rng )
		  {
			var rng = Randomizer;
		  }

		  var fromId = rng.integer( 0, this.colors.length );
		  var toId = ( fromId + 1 ) % this.colors.length;

		  var from = this.colors[ fromId ];
		  var to = this.colors[ toId ];
		  var t = rng.uniform();

		  result = [];
		  for ( var i = 0; i < from.length; i ++ )
		  {
			result[ 0 + i ] = t * ( to[ 0 + i ] - from[ 0 + i ] ) + from[ 0 + i ];
		  }

		  // resulting color
		  return result;
		},

		// discards alpha channel
		pickStopHardware : function( rng )
		{
		  return Color.rgbToHardware( toRgb( this.pickStop( rng ), this.colorSpace ) );
		},
		pickRandomHardware : function( rng )
		{
		  return Color.rgbToHardware( toRgb( this.pickRandom( rng ), this.colorSpace ) );
		},
		pickGradientHardware : function( rng )
		{
		  return Color.rgbToHardware( toRgb( this.pickGradient( rng ), this.colorSpace ) );
		},

		pickStopTransformTint : function( rng )
		{
		  return Color.rgbToTransformTint( toRgb( this.pickStop( rng ), this.colorSpace ) );
		},
		pickRandomTransformTint : function( rng )
		{
		  return Color.rgbToTransformTint( toRgb( this.pickRandom( rng ), this.colorSpace ) );
		},
		pickGradientTransformTint : function( rng )
		{
		  return Color.rgbToTransformTint( toRgb( this.pickGradient( rng ), this.colorSpace ) );
		},

		pickStopTransformAdd : function( rng )
		{
		  return Color.rgbToTransformAdd( toRgb( this.pickStop( rng ), this.colorSpace ) );
		},
		pickRandomTransformAdd : function( rng )
		{
		  return Color.rgbToTransformAdd( toRgb( this.pickRandom( rng ), this.colorSpace ) );
		},
		pickGradientTransformAdd : function( rng )
		{
		  return Color.rgbToTransformAdd( toRgb( this.pickGradient( rng ), this.colorSpace ) );
		}
	  };

	  return function( data )
	  {
		return Factory.extend( Factory.extend(
		{
		  colorSpace : "rgb",
		  colors : [ [ 1, 1, 1, 1 ] ],
		  randomizeRange : [ 0, 0, 0, 0 ],
		  randomizeMethod : "vector"
		}, data ), paletteBase );
	  };
	}();

	/* Palette data format:
	 *
	 * {
	 *   // "rgb", lab", "hsl" or "grayscale". Determines how the output from randomizers will be interpreted.
	 *   colorSpace : "rgb",
	 *   colors :
	 *   [
	 *     // rgb: [ A, R, G, B ], 0 <= A,R,G,B <= 1
	 *     // lab: [ A, L, A, B ], 
	 *     // hsl: [ A, H, S, L ], 0 <= H < 360, 0 <= A,S,L <= 1
	 *     // grayscale: [ A, G ], 0 <= A,G <= 1
	 *     [ 1, 0, 0, 1 ]
	 *   ],
	 *   randomizeRange : [ 0, 0, 0, 0 ],
	 *   // Either "vector" or "direct". With LAB/HSL vector yields a more natural effect (color selected within ellipsoid)
	 *   randomizeMethod : "vector"
	 * }
	 */

	Snw.Art.Palettes.Part1Particles = Snw.Art.Palette(
	{
	  colorSpace : "lab",
	  colors :
	  [
		[ 1, 42, 42, -84 ],
		[ 1, 84, -4, 80 ],
		[ 1, 66, 37, 67 ],
		[ 1, 89, -70, 49 ]
	  ],
	  randomizeRange : [ 0, 50, 20, 20 ],
	  randomizeMethod : "vector"
	});

	Snw.Art.Palettes.Colorful1 = Snw.Art.Palette(
	{
	  colorSpace : "lab",
	  colors :
	  [
		[ 1, 42, 42, -84 ],
		[ 1, 45, 44, -87 ],
		[ 1, 42, 42, -84 ]
	  ],
	  randomizeRange : [ 0, 20, 10, 10 ],
	  randomizeMethod : "vector"
	});

	Snw.Art.Palettes.Colorful2 = Snw.Art.Palette(
	{
	  colorSpace : "lab",
	  colors :
	  [
		[ 1, 84, -4, 80 ],
		[ 1, 91, -23, 77 ],
		[ 1, 85, 6, 54 ],
		[ 1, 88, -4, 84 ]
	  ],
	  randomizeRange : [ 0, 25, 5, 5 ],
	  randomizeMethod : "vector"
	});

	Snw.Art.Palettes.Colorful3 = Snw.Art.Palette(
	{
	  colorSpace : "lab",
	  colors :
	  [
		[ 1, 66, 37, 67 ],
		[ 1, 56, 70, 64 ],
		[ 1, 74, 28, 55 ],
		[ 1, 55, 46, 64 ]
	  ],
	  randomizeRange : [ 0, 25, 15, 15 ],
	  randomizeMethod : "vector"
	});

	Snw.Art.Palettes.Colorful4 = Snw.Art.Palette(
	{
	  colorSpace : "lab",
	  colors :
	  [
		[ 1, 89, -70, 49 ],
		[ 1, 76, -61, 55 ],
		[ 1, 88, -79, 67 ],
		[ 1, 69, -56, 38 ]
	  ],
	  randomizeRange : [ 0, 20, 25, 25 ],
	  randomizeMethod : "vector"
	});

	Snw.Art.Drawings = {};

	Snw.Art.Drawings.unpack = function(base64Codes)
	{
	  var shape = Shape();
	  var graphics = shape.graphics;
	  function createByteArray()
	  {
		var byteArray = $G._get('byteArray');
		if (!byteArray)
		{
		  if (!Bitmap)
		  {
			trace('SNWのBitmap库没有被加载!');
			0();
		  }
		  
		  var bitmapData = Bitmap.createBitmapData(1, 1);
		  byteArray = bitmapData.getPixels(bitmapData.rect);
		  byteArray.position = 0;
		  byteArray.length = 0;
		  $G._set('byteArray', byteArray);
		}
		return clone(byteArray);
	  }

	  function base64Decode(str)
	  {
		var bytes = createByteArray();
		var lookup = $G._('base64DecodeLookupTableV2');
		if (!lookup)
		{
		  lookup = [];
		  for (var n = 0; n < 256; n++)
			lookup[n] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.indexOf(String.fromCharCode(n));
		  $G._set('base64DecodeLookupTableV2', lookup);
		}
		str = (str.split('\n')).join('');
		str = (str.split('\r')).join('');
		var c1, c2, c3, c4;
		var i = 0, out = 0;
		var len = str.length;
		
		bytes.writeUTFBytes(str);
		while (i < len)
		{
		  c1 = lookup[bytes[i++] ^ 0];
		  c2 = lookup[bytes[i++] ^ 0];
		  bytes[out++] = (c1 << 2) | ((c2 & 0x30) >> 4);
		  c3 = lookup[bytes[i++] ^ 0];
		  if (c3 == -1) break;//was '='
		  bytes[out++] = ((c2 & 0x0f) << 4) | ((c3 & 0x3c) >> 2);
		  c4 = lookup[bytes[i++] ^ 0];
		  if (c4 == -1) break;//was '='
		  bytes[out++] = ((c3 & 0x03) << 6) | c4;
		}
		bytes.length = out;
		return bytes;
	  }

	  var data = base64Decode(base64Codes);
	  data.endian = 'littleEndian';
	  data.uncompress();
	  data.position = 0;
	  
	  var lineCapNames = ['none', 'square', 'round'];
	  var lineJointNames = ['miter', 'round', 'bevel'];
	  var gradientTypeNames = ['linear', 'radial'];
	  var gradientSpreadMethodNames = ['pad', 'reflect', 'repeat'];
	  
	  var batchType = 0;
	  var color = 0;
	  var thickness = 0;
	  var gradientType = 0;
	  var gradientProfileCount = 0;
	  var gradientColors = [];
	  var gradientAlphas = [];
	  var gradientRatios = [];
	  var matrix = $.createMatrix();
	  var gradientSpreadMethod = 0;
	  var focalPointRatio = 0;
	  var commands = $.toIntVector([]);
	  var paths = $.toNumberVector([]);
	  var j = 0;
	  var count = 0;
	  
	  var batchCount = data.readUnsignedShort();
	  for (var i = 0; i < batchCount; ++i)
	  {
		// 0: Soild Fill
		// 1: Gradient Fill
		// 2: Soild Line
		// 3: Gradient Line
		batchType = data.readUnsignedByte();

		if (batchType == 0)
		{
		  color = data.readUnsignedInt();
		  graphics.beginFill(color & 0xFFFFFF, (((color & 0xFF000000) >> 24) & 0xFF) / 255.0);
		}
		else if (batchType == 2 || batchType == 3)
		{
		  thickness = data.readUnsignedShort() / 32.0;
		  color = data.readUnsignedInt();
		  graphics.lineStyle
		  (
			thickness,
			color & 0xFFFFFF,
			(((color & 0xFF000000) >> 24) & 0xFF) / 255.0,
			true,
			'none',
			lineCapNames[data.readUnsignedByte() | 0],
			lineJointNames[data.readUnsignedByte() | 0],
			data.readUnsignedShort() / 32.0
		  );
		}

		if (batchType == 1 || batchType == 3)
		{
		  gradientType = data.readUnsignedByte();
		  
		  gradientProfileCount = data.readUnsignedByte();
		  gradientColors.length = gradientProfileCount;
		  gradientAlphas.length = gradientProfileCount;
		  gradientRatios.length = gradientProfileCount;
		  
		  for (j = 0; j < gradientProfileCount; ++j)
		  {
			color = data.readUnsignedInt();
			gradientColors[j | 0] = color & 0xFFFFFF;
			gradientAlphas[j | 0] = (((color & 0xFF000000) >> 24) & 0xFF) / 255.0;
			gradientRatios[j | 0] = data.readUnsignedByte();
		  }
		  
		  matrix.a = data.readFloat();
		  matrix.b = data.readFloat();
		  matrix.c = data.readFloat();
		  matrix.d = data.readFloat();
		  matrix.tx = data.readFloat();
		  matrix.ty = data.readFloat();

		  gradientSpreadMethod = data.readUnsignedByte();
		  focalPointRatio = data.readUnsignedShort() / 32.0;
		  
		  if (batchType == 1)
		  {
			graphics.beginGradientFill
			(
			  gradientTypeNames[gradientType | 0],
			  gradientColors,
			  gradientAlphas,
			  gradientRatios,
			  matrix,
			  gradientSpreadMethodNames[gradientSpreadMethod | 0],
			  'rgb',
			  focalPointRatio
			);
		  }
		  else
		  {
			graphics.lineGradientStyle
			(
			  gradientTypeNames[gradientType | 0],
			  gradientColors,
			  gradientAlphas,
			  gradientRatios,
			  matrix,
			  gradientSpreadMethodNames[gradientSpreadMethod | 0],
			  'rgb',
			  focalPointRatio
			);
		  }
		}
		
		count = data.readUnsignedShort();
		commands.length = count;
		for (j = 0; j < count; ++j)
		  commands[j | 0] = data.readUnsignedByte();
			
		count = data.readUnsignedShort();
		paths.length = count;
		for (j = 0; j < count; ++j)
		  paths[j | 0] = data.readShort() / 16.0;

		graphics.drawPath(commands, paths, data.readUnsignedByte() ? 'evenOdd' : 'nonZero');
		
		if (batchType == 0 || batchType == 1)
		  graphics.endFill();
	  }

	  return shape;
	};

	Snw.Art.Drawings.P1 = 'eNrs23V4HMmWIPqIyMiAjIKsKqlUYi5JJUtmZma2DDIzMzMzMzMzM6PM3GZmatttdrvbfkeeu3_t27c7M_fu3Duvy9_vi8wTJ05GZqUVYfvzbJT--VErFmt_ff76_PX56_PX56_P3_mDCfmfQ_9nA_96eP-4z__0cAn5jz_wf8xX9b-viv-P7uJ_dWcQJuQ_fzv_-SrkfzmTf77fzH-394_8_V8a_I99iP9aP5D-e_z4_I99o38tHf_w5eKfboL_jD9C_30z-tdYAv76rfUv9wPm_9df2V_v61-fvz7_zL8JyV_btX-dJ_Df67v6r_qLi78-_wpP9-9zpb_esX-9J_73fbp__XT_7_NU8X_BX0j93_j3kn_Gn6r_1Xf0j_gb6v87Vf69_4LxX_k2_r3q_Wfr_OOv8I-s9_-d9Z_p_Y8-tX9Pzz-qCiZ_v5H_u8j_S_-NyYlig9UntlkTxB5rvDgI0qxx4ozVKy5aY8U1a7S4bQ0V76yBgtn8RbDNKTLZ7KK4zSZSbVbRHgwBM8AacMBmEZdtSjy3SfGnjQuHnYhYOxY-kMmORA6QFxQGJUF5UAW0sP_gfcEksBzsARfs3_kT8A0g8zvXgQHs5g_uAh4QCqJALIg3kUgEySCTiUVWk4gcpiZymRZR2jRFqukSbUy36Gd6xAQzWCwyw8QW0yuOmknikplV3DdzizdmQfGnWVwoR1kR6Kgs4hzVRQ5HLZHPUUcUcdQTpRwNRQVHY5HiaCpqO5qLho6WooWjtejm6CAGObqI8Y7eYpZjkFjmGCU2OCaLXY654rBjvjjqWCTSHEvECccyccqxQpxxrBLnHKvFBcdaccmxSVx3bBN3HLvEI8du8cKxV7x17BOfwXfHHqE7tws3iHduE7mdO0Vp5x6R6jwoWjnTRG_nGTHaeUnMdF4TK5x3xDbnQ3HE-Vxccr4W953vxVvnF_Hd-YdQLizdLiYjXVaZ6PKX2VxhMq8rXhZ1ZZclXblkKVceWdqVX5Z1FZLlXEVkeVdxWdFVUlZylZFVXFVlDVeqrOtqKBu7msrWrlays6uN7ONqJ4eBCWAqmAXmg8VgBVjrais3ge2u1vKwq6U852ohb4JnrubyA7TIr6W0-rWRgX7tZASIA0l-bWU2v9YyD_QV9msmS_o1luX9GsoqfvVldb86MtUvVdbzqyEb-aXIZn5VZSu_SrKdXynZ16-oHONXQM72yytX--WWu_3yyFPgJsRe-ZWUDv9KMqd_TVnHv4Ec5N9CLvfvIM_495Dv_AdIj3uQDHcPlbHuETLRPUZmdE-U2dzTZE73HJnXvVjmdy-TBdwrwGpZ0L1OFnJvBFtkYfd2sBNckMXcz2UJNzZKuQONMu7MRjl3aaOCu4FRyd3DqOKeaKS4Vxm13IeMeu4bRlP3O6O121Cd3ZGqtzu3GuIurEa4S6kx7kpqoru6muauq-a4G6lF7hZqpbut2uDuqLa5u6jd7h7qoLu3SnP3U2fcg9Ql91B13T1c3XVPVl_dc5QrYIlKDlipSgesV00CNqn-AVvU7ICtajvYB46CUxC7GLBZXYf-uwEb1JOAdepVwHzl8IxQWTwdVTVPFdXWk1UN81jUFM8jY5FnizHfs8SY55lszPUMNuZ4OhuzPI2NGZ6qxhRPUWOiJ5sx2pNgDPdEGIM9AUY_j83o4WFGJ88P2crzRTb2vJO1PC9lec9DWchzU2bzXJbxntMyxHNEmp49knq2yC8Bq-XLgEXydsAMeT5gvDwcMFRuC-gtVwR0krMDWshxAc3l2ICmckxAEzk6oBFoIEcF1AN1QCqc1wI1ob865KXI8QHV5ISAqnJSQBU5GUwNqCgXB5SXGwPKyv0BpeXZgBLyVkAx-SKgCFy7sOSe_DLGk0cW8eSU9T1ZZV9PJjnLkyR3eHzyF0-cfO_xyj89sVIExkgnCA2MlnEgS2CUzAdKgtTASNkWDAiMkFMCw-TywFC5KzBYngn0yHuB_vLXQD_5e6BLiiCX9AfRIBMoAMqC2kFO2Qr0DDLliCCrnB4k5bIgXW4N-i4OB_0h0oK-idNBX8X5oC_il6DP4kbQJ3EHPAz6KJ4FfRAo-DfhCX4tMgW_FCWDn4r6wQ9Et-A7YlzwDbEs-LpYFXxNrAdbgq-KnWBv8BVxCKSB03D-JPiyQCEXRVDIWZE15IQoF3JENAvZJ_qH7BAzQjaKzSGrxdmQJeJ5yFxBQ6eJ8NDxIk_oSJESOkh0CO0hpoZ2ELtDW4h7oQ0FC0sVGcKqiSphFUWPsDJiXlgJsTussLgWll98CsslXOHZRObwjKJCuE-0Do8VI8NjxKTwaDEnPEosBevgeAc4CPGT4V5xOTxBPA7PID6FZxI8IrsIiMgj4iMKiVwRJUSpiPKiZkQN0T6ivhgW0UzMi2gjtkV0EmcjuomnEb3Ej4i-whM5QGSMHCRKRA4VdSOHiS6Rw8VosAiOd0YOEecjB4qnkX3Fj8heIiCqm8gY1VmUiGon6kW1El2jmomxUXXF_qiq4reoMiI6upBIic4hhkdnEDujo8SLaI8IiXGIIjFSNI_BYmzMV7455h2_FvOCf495wKNjb_DSsdd4ldirvE7sL7xp7GXePvYS7xF7kQ-KvcBHx57nU2PP8nmxZ_iK2NN8Y-wpvjv2JD8Se4KfjT3Or8am8fuxx_ib2KP8z9gj3OI9zINAgvcQz-k9yIuDat4DvIV3P-_j3ccnePfyJd49fId3Fz_t3cnvebfzD94t3BG3iSfFbeBlQHMwJG4zXxC3le-N281vxO3lj-L289dxB_nXuENciz_CbfFHuSc-jUfFH-dJIEv8CZ4D5AWFQHGIlQEVIKcq5DeMP8Tbxx_g_cCY-P18FlgJtoOj4CmQCfu5D5QDbcF4sBFcTNjH7ycc4G8SDvLvCUe48h3ngb6z3Ou7zLP47vACvnu8kO8-L-p7yIv7HvFSvie8jO8pL-97ziv6XvAqvje8lu8tb-B7x5v7fuPtQFffa94H-gb7HvNRMHYc1Jnou8mn-q7xGVB3ju8Cn-87wxf5TvKlvkN8tW8v3-TbwXf6tvKDvk38BLjg28hvQPsQvPRt5h98W_if0K8nbuM24E7czsMTd_C4xJ08S-Iuni9xNy-ZuIdXTtzL6yTu480S9_OOoDfYAB6DoAz7eUUwGOzIcID_CqKSDvAsSft5kaR9vGrSbt44aSfvnLSVD0raxCclreGLkhbzvUmz-fWkSfxD0ihuJg_kick9ecnkDrxRcgveL7kJH5Ncj89MrsWXJVfhm5PL8v3JRfmp5Hz8anJW_jDZx98mh_FvyS6uZ2TcmvF35p_xFQvOeIdFZjzHvBmPsYSMe8FW5su4hsVnXAKxuSwq41QWlnEc82QcyCwZuzKUsSV7n1yfPU5OYVeTy7HjyUXZzuT8bGVyJjYmOZ61T45glZNDWdbkYOaG489Jsex6Uha2Oyk3W5NUgM1JKsrGJpVgfZNKs3ZJ5Vi9pAqsQlJFlj-pMotJqsZUUg32PkMqu5GhLjuYoSFbmaEJm5ChBesOuoLOoFOGlqwDaAfagFagRYY2rHCG9iwoQyf2LrErO5XYgy1J7MX6JvZl1RMHsOTEgSwe2ujE_iw0sR_zJPZhzsSezJrYnYnELkxLbMe--eDefE3YS1999tCXym76UtglXyV2yleWHfKVYLt9xdgWXxG2FiwD833F2XRfSTYB-kdC3kBfNdbLV4t18tVlrX0NWWNfU1YHalbztWXlfO1ZaV8HVtzXkRXxdWIFfJ1ZHl8XltPXlWX1dWMZfd2ZD8TCcQTEQqAvAHJdMM7ua80svmaMQ03NV4f9SKjBviVUZp8SyrF3CSXZ64TC7EVCfvYkITe7n5CD3U7Ixq4lZGEXEzKzMwmZWBq0B8EuiG1JyMrWQv_yhOxsQUJONjMhF5uckIeNTSjLaiSksIiEBuxFfFO2Kb4V6x3fmhWLb8ss8W3Y5bg27ERca7Y_rhXbGtecrY5rwhbGNWDT4-qysXE12eC4EqxhXAFWMS47KxCXjWWMy8oi43IxC8Q-e0uzs97ybJ-3MlvnTWHzvLXYeG9d1t_bgLX3NmH1vc1ZRW8rls_bhiV42zG3
ty3T4PhtbAt2J7YxOxVbm-2Irck2xaawVbFV2eLYKmx2bCU2JbYiGwOGgL6gTmwFli-2PAuG9ltMBXYjphLbFVOFzYypyXrGpLKOoFVMbdYIpIIqoCwoCvKCt9G12ZLoOqwmsIADUXVYF5AAbkfWYafBHrAmsjabE5nKRkfWZL0jq7PWkVVY7cjKLCWyEqsUWZGVAcVAAZA7sgLLCpJAcGR52HyXZ58iyrFHEWXYxYhS7EBECbYuogibE1GYzYwoxKaBKWBiREE2DowGI-B8KPQ3g-NSEflZQkQeZkTkZK_Cs7Kz4RnZ-vAkNjE8kfUOj2NNw2NYxfBwlic8kMWGm8wMF-yPsG_687AP-u2w1_qFsOf60bAn-o6wh_rqsPv6vLB7-gQwGI6bg7IgI3CFPdC_hD7Qb4EDYAkYHXpf7wRqhd7TC4Xe0eNDb-n20Bv6p5Ar-u2Qi_rhkHP6ipDT-tiQk3rnkON6zZBjev6QI3pUyAFdhOzWbwZv09cFb9AHBq_SU4KX6PHBc_U_gqbq54LG6ouDxujzgkbrM4NG6VPBhKCR-uigEfrwoOH6INA3aJjeKGioXjJoiJ4UNEh3Bg3UPwf2028F9tYPBfbQlwd202cFdtXHBHbW-wd20jsFdtCbBrbXawS21csEttbzBzbVQwMb6t89dfS7nhr6AU9VfYGngj7QU0Zv5CmuFwGFPcX0Qp6iekFPEb2Ap7Cez1NQz-spoOfx5Ndze_JBmwdiufX8npzQnwNys8OYbDA2m17Mk0mv7knSW3h8ei9PnD7aE6PP9UTo6z2h-kFPoH7J49A_eaTuCcR63sCvtG7gb3RA4HO6KPA-PRp4jT4NvEC1oNM0IugYzRd0kNYM2kO7BO2gE4O20LVB6-nJoBX0S9BSGhe8iFYPXkiHBi-gW8BDOHaGLKCFQV3QE0wJWUg3gNPgWcgiSkMX0QjgBUkgG8gLCoNSoYtpxdAlNCV0Ne0ZuobODV1LD4SupA9Dl1IWNo_Gh02nZcPG0bZhI2m_sOF0XNhQOi9sCF0XNpjug_Zs2DB6J2wEfR02iXrDZ9C64fPolHC4dvgSqkUsoXlBp4hFdBXYALaB3eBgxEKaBs5ELKAXI-bRaxGz6MuI6fR7xFTqiJxCYyIn05ygDKgLOoDREF8GDoJb4DNwRk2hSaAkSAVtQL-oqXRC1DS6KGoG3Ro1i6ZFzaPXo-bTO-BR1AL6ArwBH8E3gKMXUg5CoxfRrKB09GJaP3oJ7Rq9nI6OXkkXRq-j26LX093gQPQGegScAGfBJXAN3I7eSF9Fb6LfojdTFbOFBsVsowkxO2iumF20ZMweWiNmH20Tc4AOjDlMp8Ucpatj0uj-mJP0csxp-jzmPP0ec4Hy2EvUHnuZemJ_oRGxV2hC7FWaOfYazRN7gxaJvU2rx96hLWPv0T5gfOxduij2Ft0KfcdhzM3Yi_RB7Hn6PPYs_S32DP0Se4oi7wnKvWnU7j1G3d7DNMJ7iCZ4D9Ks0OaD8xIQr-g9Tmt6z9CG3nO0qfcCbeW9RNt5f6GdvFdpd-912tt7k_b33qZDvA_oWO9jOs37jM73PqcrwEY43uV9Qo9479Mz3jv0EuTdgPx73hv0KfgVjj-AbxAncXcoi7tLFTCBP5wHxt2iYXE3aVTcNeqNu0QzxF2gWeLO0lxxZ2jBuNO0OLTlQBWI1Yr7hfaNu0EXwtijcQ_p87in1Br_imaO_41Wj_9Ce8b_SSfFE31VPNMPx0v9ZrxF_xBv060Jdt0LCibY9BLQlgdVE0w9FTRMcOjNE5x6uwQ_vWuCRx-dEKQvTAjRtyWE6mfAQzj-Cuy-ID3WF6jn8rn1sj6nXs-n9PY-qg_0faUTfW_oQt99usH3C93jS6OHfTvpSd9qeso3l572jadpvoH0oK8L3ebrQDf52tB1vuZ0la8xXearTxf5atO5vpp0pi-FTvGVoUN8BWlXXzba1OejKb5wWtznT7P5DBrjQ9TP97tm-D5pyPeb9jHhtfYi4aV2N-GFdjnhmXY84am2B2xIeKwtSXikTU94qI1OuK_1T7irdUq4ozVLuKWlghqgWsJNrTKokHBDKwtKJVzXSoCicByXcE1TCVe0N_GXtMvx57Ud8We0OfEntYHxx7Wm8WlaA1Ab1ABVQPn4Y1opUCz-qFYw_oCWGL9XC4jfrWnxO7U3cTu0myAtbru2GcwH0-O2aePBiLgt2oC4TVrPuPVap7i1Wuu4FVqTuCVa_bjFWmrcQi0lboFWMW6-VhoUAwXi5mm54uZqmeJma_FxM7XwuGlaQNwUzR43SeNxE7Qf3gnaJ-947Q20T72TtHveydo171Ttgne6dsI7Qzvknant8s7S1sDxfO80baJ3ojbMO0br5R2idfD21pp622t1vW20Ot5WWqq3uVbL21Sr4W2kpXgbaNW89bQq3jpaJW-qVt5bUyvtra6V8KZoRb1VtYLeKlo-b2Utl7eSlg1kAoneipoX2kgQAn0e4II8G4z7EVtTexubqt0HF2Jra4fA5tg62mIwBYwHo8AwMBD0Ad1BZ9Autp5WFtoEGMNia2iPYqppB2MqafNjymp9Y0pptWNKapViSmglYopreWOKapljimjemMJaSExBzRFTQOMx-TUUk0_7PTqv9j46j_YqOrf2JDqXdjc6p3YtOrt2MTpRmx8dobWJdmt5opXGo7F2OeozWRT1irSPekDyRd0m0VHXiIy6TN5GniNXIk-RvZHHyOLIg2RU5G7SMXI7qRe5lZSL3ETygPjIjcQduZnQyC3kXcQOci9iDzkZsY9siThA5kUcIiMiDpNOoE7EEVICZAIZQTJIAhlAIvCBBBAfkUZ-Dz9KTocfIvPC95CO4dtI0fC1xB2-mDwPm0n2hI0ivcJ6kDxhzcjX0KpkZ2hB0iM0keQKdZOvIZjsDHmHx4Y8xg1DruHsIWewCDmIbwVvx-uD1-FBwUtxteBFuFDwfJwYPAe7g2diHDwdvwqagq8GTcKHgsbjtUFj8OSgkbhX0DDcIGgQLhHUHycF9cGuoJ74a2A3fA_cCuyKrwV2wZfB-cDO-Aw4EdgJHwUHAzvg5YHt8JjA1rhjYEtcPbA5zhfYBEcGNsIssD5-6amLr3tq4zRPTbzVUx0v9lTFEz2VcH9PedzWUxbX9pTB1T2lcSVPKVzGUxIX85TABT3FcW5PMZwVJIMwT2Fs9xTAyJMbvwvIih8FJOKrAdH4ZIAH7wtw4G0BVrw2QOKlYA6YHGDBowLseGCAP-4REIg7BoTgVgERuHFADK4bEIerw_iKARlx6YBsuGhAfpwzoBj2BZTBoQHlsT2gMiYBVfAHd1X82F0FXwHn3JVxGtjvroR3uCviDWCluwJe6C6PZ7rL4BHuUri7uzhu5i6CU9wFcTF3fpzVnQdHuXNjhzsX5u6c-Lt_TvwBvAT3_XPhq_658Vn_PPiof0G83r8onuVfCg_xL4_b-1fBtfxr4GL-dXGyfyMc6N8Yu_ybYCvgcEwg9qdfPfzVrzb-6JeCf_OriF_5lcVP_UriB34l8E2_YvgXcBYch_ODEN_uVxqvg5ylfuXxbMif5FcJj_CrgvuDrn5VcTOoU8uvJi7vVx8X8WuKc_l1wJn9emOf32js9ZuIY_2m4Si_WTjMbx4O8luI_f2WYNNvOVZ-K7HutxG_c-3Ed1wH8SnXCbzddQEvcV3HE1z3cV_XC9zS9Stu5HqDa7t-w9Vc73B5UML1FhdwvcY5Xc9xJtdTnOx6ghNBgusx9oJoEAFCIRYE3JDjdD3DdshXUJO7XmLqeoUR1PjD-QXfdSJyyCnIEqeNDHO6SAunm5R2BpJEZxCxAOwMJp8doeSVI4I8dEST644Ect6RTNIc2cl-Rx6y01GQbHYUJWscJckyR1ky31GJzHRUI5MdtchYR0MyzNGU9HO0JN1BB9DS0Yw0dDQiqY7apIqjBqngqE7KQH5xRwopDPJBLCeMzQr9yY56xOdoQLyOxiQK6oQ5WpAgR2vidrQjTkdHYnf0JZpjCPlkjibPzPHkhjmZnDankL3mVLIO2nlwPgp0NSeRhuZEUt6cQHJDXqw5ljjMUeRP-zDyyD6YnLQP
IBvs_cg0ex_S196TNLZ3J6XtXUlGe2cSZe9I_O3tCbe3Jb_bWpNfbS3JXVtzctHWlBwFR8BhWxNy6KfG5CA4YGtE9oN9tgZwXB9idaGvNuSlQn4tGFeTHLPVIMdtlchDW2nyw1aYBNvzkJz2rKSqPQNpb48lo-3hZLk9lKyzh5Bt9mCyFxwFZ8BlcAs8gr639kDyzR5AuOmEe7KSYJORGBORJPMTzm6-x7nMNziv-QoXNJ_hIuZjXNy8j0uZd3A58wauaF7G1cyzuKaZhuuYB3B9cyduaG7Cjc1VuIm5CDc1x4FeoBmoAvEC0O_DdU03TjUJjP2GqpgfUEXzFSpnPkGlzbuouHkDFTIvo7zmOZTdPILizF0o0NyALOYy9N0-G721T0QP7MPRZXtfdMzeCx2wd0O77J3RVnsHtN7eFq20t0KL7c3RXHsTNN1eG42wp6Ce9oqolb0cqm0vhcraS6K89hIo0V4aBYEA4GcvgxzABhSQgAEN-hD401YKfbOVRF9sJdBHW3H03lYMvbUVRb_aiqBXtsLoha0gem4rgJ7a8qMntrzosS0PemjLhR7YotFFWwDabzPQGpuOptsQGgRag2o2gvLZNJTLRlE2G0OZbBIl2hSKs9lQtM2BImx-KATGBtqCUIAtFPnbIpAL6pm2OGSz-ZDFloQMWybEbVkQtWVD2JYd_WnNgX4Hn8A7a3b02poFPbZmRLesGdAlawI6YfWiA9YYtN0aidZZw9BSawiaYw1CU6wBaIzVHw22ulBvqxN1sjpQK6uJGoJCcBwGsT8tbnTLEox2W6LRLEsG1MuSF9W2FEDVLAVRBUthVBIUthRBeaHNZimEkqEvzpIHhVpyIpclG5KWzOiHSkYfVSJ6qeLRfRWLrqoYdBGcgePjKg4dUQnogEpCe1QmtFNlR9tVXrRFFUabVEm0QVVAa1U1tFqlohWqAVqmmqHFqgOap3qg6ao_Gq8GoWFqGOoLOqnhqLkajOpArKYagKqqfqii6oPKqF6ohOqJCqvuKL_qinKpLigbyAQywHkCxGOhP0r1RuEwJlRNQ1a1CBG1Dn0xNqNXxk50z9iFzhu70QFjD1oC5hl70QxjH5ps7EdjjQNouHEQDTIOoT7GYdTNOIpaGMdQqpGGykKbH84zQl8k5LuMHUiHmn_IDeidXIueyjXotlyFLoHjciXaBzaDRWAC6A_xdqAuKAvygATgluuQLjehj2IneiIOoqviNDoprqK94gnaJP5EC4QfHi8ScT9RFLcTqbiu6ITLi1G4gFiMk8VK7BMbcJzYjqPFPhwljuIIcQZcBrch9gr6vuF4YRCfCCTxIp7EiZwkWpQgESKFBIk6xCOaELdoTVyiE3GIXsQuBhKrGEmUmECkmE2YWEao2ESI2EuwOE6QuATtXTh_CX0fIecHMYShKeGnSRGmcRGvUZFFQyKf9o0X1T7zstoHXlX7jdfR3vAm2iveRnvBu2hPeV_tER-l3eVTtet8oXaJr9ZO8q3aIb5H284Pa2t4mjaXn9Qm8vPacH5F68tva135Y60tf60145-1-hzTmpzRFG6hlbmTVuAeWoaH0ZI8mhblCbQQz0jz8Sw0D89Gc_IcNBvIxHPSDNDG8-w0FvoiISeMZ6BBkO_msdTFo6idh1MLD6aSB1DG_anOXZRyk2rcSglXQAAdEPBJo_wNeK7pMDeN39cIv6t9Z7e139l17T27qv3KLmtP2AXtHjun3WCntcvspHaWpWnH2RHtIDuo7WJ7tC1sh7aObdJWsbXaMrZUW8LmaYvYVG0xmwDGwvEobQEboc1lw7RZbKg2jQ3RJkE7DowGIyA-FAwGA0Bf0At0h76ukNuJDdbas0FaWzZQa8X6ay1YP60p66M1YT21hqybVp911uqwDloqa6PVZC21GqyplsIaaVVZWa00y6HlYxFaJqa0KPaJ-LMHhLGz5LO-izzTN5IH-kpyU19ILuuzyBl9EjmmjyH79KFkm96frNV7k2V6N7JA70Rm6W3JFL0lGas3IcP1-mSgnkr66DVId70a6aRXIm31CqSFXo401suSunoZUhNU0UuT4npJklsvRpL0QiRSz0f89ZzE0LOS7zSZvKdx5D6NIOdoINlLXWQ1tZKZlJPhFJMu9BtuRL_iuvQzTqUfcQ36DrzB1ekLXJM-xrXoHei7hevRm7g-vY4b0Ku4Ib0CYy7jxvQiuADO4Sb0LLSnIX4S-k9AXhrkH4NxR2H8EVznp8O4NkgFtUBNUANUhzG56RkcCnUQeKSdxWnaabxaO4HHaUdwR-0wbqEdwvW0gzhFO4DLgiIgF0iGWKx2FH8lZ_AZcgUvIg9wD_IaVyB_4hhiJd9wJLmE48lhnIVsxXnJMlyczMSVyGhcm_TDzUgH3JE0hhGpeACpjIeTUngsKYgnk-x4JknE80kUXkIC8AbyHR0gz9A5chE9IAfQR7IOWbQFKEqbiPJpw1AhbQgqrg1CpbUBqLzWD1XR-qDqWi-UqnVH9bSuqLfWGM3SqqOdWil0XcuPvmhZUSD1odw0EtWiHtSAulEz6o_aUj_UhbpQL-pEA6kDjQDjqImmUDuaRW1oPlhKrQi-QbSRWtA2qtAeaqAblKLPFCN_HaEsoJKOUVtdR6N0iZbrDrRbd6Ozegh6oEeij3ocEiwDCmFZUEaWCxVh-VEFVhjVZMVRY1YGtWGVUDeWggawOmgka4wmstZoGuuAZrMuaAHrgZaxvmg1G4g2sKFoGxuJdrOx6Bibis6zuegmW4YesfXoNduJPrHD6Ac7gzi_hiS_hSz8HrLzR8jJnyF__gp5-FsUzN-jMP4ZJXCKs3M7LswDcQUehetwH27NM-LePBsew7PjCWAKz4FngNk8J57Pc-HFPDdezvPgVTwvXsfz4Q28AN7MC-MtvDjexkvhrbwcqASxangjr47X85p4La-NV_O6eCWvD2Mb4mW8MV7Cm0GtFngRbw3a4oW8A-iMF_BuoAfoDfpCrD8YCDmDIH8IGAZjR-ClfCTUn4N38vX4ID-M0_hVfIa_xBf5D3yF-5EbPIHc4tnJHV6Y3OPlySNeizzlTclL3pG84X3JBz6SfOLjyBc-lfzOZ5NvfBH5g68kf_L15DvfBvbCanIBVpEHxCLewyqEtXBh15JEkJZXeLXyIlmrLDJp1WA1qSGyaakih1ZP5NIaijxaE1hdmouCP7UQhUFRUAKUglgZrZkoqzUV5SC3olZXVNZqiWpaiqgO9WpC3VStlKijFRN1tZyigZZZNNYSRXMtXrTVvKIT6AkGgJFarJgO8SVaBrFRyyL2aLnEca2wuKiVFre1quIpzOulVlu80eqLdzCnT3D937U24k-to8C0q9ABAxxI2kUo2llYaSdhpx2Fg3YA7YSTthYu2kL40WbCnzYGDYSb1gW14bgKxMtATmFh0tzCRjMJC4XVnEYIQQOgrhOuYYVWwrkO9QnkYKiHRAC0oVQT8RDPSoUoSJUoA7kp1BQNYFwb6ie6U3_RG_QDg-B8GMRHQv8YahMTIH8S5WIqpWIm1JtD_-AL6Fe-mH7ky-hvfAX9la-iD_laepNvpJf5VnqB76Fn-SFwElykl_gtcAfcB4-g_yk9z5_Tc_wVPcPf0FP8LT3If6c7ONU3cJu-kgfqi3isPpdn1mfwAvoUXlafxKvq43htfRRvrA_lrfQBvKPei3fXu_J-ejs-RG_IJ-pV-Xy9OF-j5-K7dB9P00P4Zd3G7-uIv9a_so_6B_aH_oZp7Fem2AvmAsEgmr1iGdhrlo29ZXnZO1aEfWSl2WdWmX1lNdkfrD77zpqzH6wl-5O1gfN27HfWkX1hnSGvC-R3g3FdYXxXqNMF6nVhz8AT6H8EHrJO7D64zNqz0-Aw2AfnOyB_C-vNNrJBbD0bw9axKWwtm83WsMVsNfxaxTaxFWwXW84OsmXsBFvKTrEl7AxbxM6zBewimwcV57Bf2Cx2lc1g19l0MBVMYdfYJIhNYFfYOOgfC3mj2SU2EgyHcUPZBTYYDII6A0B_0A_0hrweMLYbuwWzvss6wMzbsaesNXsJd_6WNWWf4El8Y7UY4tWYziswg5djDl6aBfDyLJJXYvE8hWXg
qSwTb8iy8OYsK2_HsvOuLAfvzXLxgSwvH8by81GsEB_PivHJrBSfxsrzmawyn81q8Dkslc9ldfk8Vp_PZ434AtaUL2TN-SLWii9mbflS1oWvZD35Gtafb2SD-VY2gu9mY_hBNp6nsUn8FJvMz7Ep_CKbxq-w6fw6m8Fvs1n8HpvNH7E5_Dmbx9-wBfwDW8R_Z0v4D7aMU76CG3w1t_O1PJBv4tF8B0_i-3hOfoQX5id5OX6OV-eXeEN-hbfm13l3foMP4jf5ODATLAUbwB5-G0bc4Wf4Pf4Lvw9nD_kT-PWaP-ef-Ev-HY64eMdN8ZEHii88WnzlGcQ3nkP8wQuC0qAWaAl6gVFgFlgNdoNT4DH4LrBwS10kSasoKt2ipowWbWVmMUAWFcNlGTFOVhJTZXUxV9YRS2VDsVY2F1tlG7FXdhRHZDdxQvYR5-RAcVGOEFfkOHFNThU35BxxXS4F68EucAScg77r4qp8BHmvxWX5RZyRHnlK5pLHZQ1ou8kzcpq8LLfIG_KSfCzfyWfyD_lKMuOttBsfZKDxRUYbf8gkAxk5Dc0oDH8wKG9YjVqG02hmuI1ORpDR3wgxxhhhxkwj2FgB1sD5RrAVYruMcGO_EWkcNmKM40ascdrIYNw0shovjDzGV6OIwVUZw19VNaJUHSOTambkV62MwqqdUVx1MkqrbkZ51cuorPob1dQQo6YaYdRWY416apLRUE03mqg5RnO10Giplhlt1BqjndpodFTbja5qj9FTHTT6qiPGIJVmjFDHjXHqhDFFHTPmqKPGYrACrIO-zRDfoc4Ye9QF44C6ahxWN41j6q5xQj0wTqsnxnn13LikXhpX1a_GLfXauK_eGm_UB-NP9cUwLH8aHgtRsRahsljsqqDFrcpZAlRFUMXiUdWhTYVYPYu_amTxU80sTtXSYqq2FqvqYDFUFwtT3S2a6m35YfSz_GEMsvxuDLN8MUZaPhtjLB-NCZYPxmQw3fLemG15Z8y3_GYsAovBErAULAPLoW8FWAlWwfidUCfN8s34xfLVeGD5ZLyxvDH-sDwzhPW24We9YQRYrxnB1itGhPUXI8Z6yUgAydaLRlaQCxQEJUEFiFcH9ayXjaaQ39Z61ehivW70gxojrDeNidDOhvMl0LcW8rZZzxn7rWeNQ9YzxhHraSPNeso4aT1hnLYeN85Z04wL1qPGZet-4651t_HSus34ZN1iENsmw2bbaATbNhhxIBscF4dYJdsWo7Ztp9HItt9oaTtutLFdNNrbHhgdbE_Br0ZH23ujk-2L0dn23ehq01R3m1Q9bTbVxxasBtm8apQtk5poy6Vm2wqrpbYSapOtnNpnq6BO2yqqS-AGuG8rr55C_LWttPpgK6l-txVRP2y5lbJnVAH2GBVlD1QZ7FaV3Y5UPvs7o6j9vlHcfhfcMUrYbxkl7TeMUvZr4KpR2v6LUcZ-yShrP29UsJ8xKttPGdXsJ4wa9jQj1X7MqAcagqZw3sJ-3GgFfW0hpz3kdrKfM7rYLxjdYHx3qNMT6vWC2r3tt40-9ntGX_sDo5_9sdHf_swYYP9gDLN_NybYuZoJc1tqd6mNdj-13-5Wp-1Odc1uV3ftFvXULtVrO1Mf7ER9g3xifjOE-cmwmx8Mp_nWcJu_GoHmcyPEfGyEmfeNSPOWEW1eM2LNy0aced5IME8ZiWaakcE8ZCSbe42M5g4jk7nFyGyuMrKaC40c5gwjtznRKGiOMoqZQ4yyZj-jqtnLqGt2N5qYnYzWZlujo9nc6Go2NHqZqUYfs6rR3ywL8hoDzQzGUDPUGGmaxniTGNPMj3Ke-VwuN2_LjeZVuc28IHeap-Qe8yjYL_eaO6DdKHebq-UOc4Jca3aTC8w6copZTA4xM8iupls2NpGsZP4qcpuvRC7zhchhPhfZzWcim_lUZDEfi8zmI5HRfCiSzZsixrwmAs0rwgatZt4QX-z3xWv7M_HY_l7ctX8Wt-3fxE07kjfsurxul_Kq3Sav2F3yF3uAvGQPlhftYfK8PUqetcfIU_Y4edweL4_affIQ2GdPlBvsyXKxPbOcZs8mR9pzyT72_LKDvbBsbC8pa9hLy8r2MrIsKAHHhUBeiGe3F5eZ7EWkD_IS7IVknL2gjLUXkNEgCsZH2PPKMHseGWpPkhZ7hPzD5pIvbUzesH0VJ22vxE7bXbHSdkHMtJ0VU20nxETbUTHOdkCMtu0WI2zbxFDbRjHItkYMsK0U_WxLRV_bQtHHNk_0ts0SvWzTwCTR0zZO9LANF91sA0VnWx_RwdZdtLZ1Es1t7UVDW2tRx9ZSpNgaiSK22iKjrZoIsVUQ0lZSfLIWEg-tucV5axaxD-yxZha7rJnEDmtGsd2aLLZaM4gt1kSxyeoTG0H6_0FZD9aBtWCNNUGsBqvASmv8TyvAcmsc8IplP8WKpT_92_kK6EvPSx-TPn7tz5rp_78l3XVtNUt3U1vLbmvr2R1tI7unbWYPtK3skbadPdF2smfabvZc28NeaHvZS20fe6UdYL9qB9lr7RB7ox1mb7WjEDsGfUch7wg4BA6AfT_HPdN2_ayTXi-9bnr99OvcguulX_d_zGE2q8jmsrJsPivJFrJisCssBHvAfLAfzMVWwl51NcsEMsJ-MQn2jYkgAfaQcbCX9IIY2FdGgyi2mUXCPjOSbWMRbDvYCXaDPSyc7YV2L_Tthby9kP9vYkAs8II4yEsXD2MSgA92pD6okfjTdtg3b4XrbwabWDLbANb9nFNG2L9mgv1rtp_zTZ_3YlYQ7qPoz_tJv6_0-5sNe-xZrAqoxmayFFAD9rI1QSrsZ-vAXrYWqAFS2DTImc6qQk6Vn-P-bXxFdoQMMg6BA2Af2At2g51gO9j60xBjGxkGRoBREB8Nxho7yHgwEXJnwLi5xkGy2DhKVhrHyXrjJNlqnCa74fgQxI5D3xnIuQj5V4zN5Kaxjtw1VpBHxmLyzJhGPhgjCFK9iEW1IR5Vn8SoyiSTKkryqRyklMpGSqsspJzKTCqoTKSySiZVVRKprjKQWiqR1P4pA6kD6kK8HvTXUxlJfcitD2Pqw9j6UKM-1KqncoE8kJcP8vPDuIIkVZWFmjVISdWYFFDtSTbVmySq4SRSTYa5zCd2tRjmtZxItZpwtZ7oajPR1A6Y7x7yHZ7bH3Bvf8Az_MM4DI6Ao-AYSCN__nSc_DBOQP5JQtQpQtVpqHEaap2BmmeIASxwbgMm9Dshz6VOEH91nASoNJjDYRKmDsAz2Qfz2kcyq70kF7QFIFZcHSJl1TF4FqdIA3WOtFaXSTd1jQxQt8lodZ9MVY_JAvWMLFdPyHr1iGxTd8ledZMcVpfIMbjeSXWEnID6J9RBsJ8ch9rH1W6wk6Sp7WAr2AC5q8gRtQTGzSeH1ExyUE0hB9Q4sk-NgHqdyXZVj2xUpcgalZUsU2FwTUlmqfd4qrqDx6sbeJy6iseqS3iMOgdO4dHqODiCR6kDYD_YC-d7oG835O2E_B0wbjueqLbhSX8zGUwBUyE-DfqngxmQO0Ol4QXqCl6mHuM16iPeCH9436b8yG4VQ_bDfI6ownA_FclpVYecV63IL6oHua6Gkdvw_T5QC8kTuK9n8P2-gO_3pVpHXquN5K3aQt7D_X-E5_AFvuff4Xn_gOdDLfuJBDbLPuKy7CEey04SbNlOQi1bSbhlE4mwrCdRlrUk2rKKxFiWg6VgPpzPIJGWSdA_moRZhpIQSz8SZOlBAiydiL-lMdRLIcxSAq6RC66XANcPJs-VhdxX3_EN9RlfVW_xJfUcn1cP8Gl1C59Qv-Bj6iw-DPd-AJ7ZbrUB71RL8XY1C4wHQ-C8B96l2uJ9qhJOU9nwBRWIb6k_0TP1AH1QxxGxrEV2y2QUahmPwi2jUKRlGIqxDEJeSz8Ub-mJfJauKIOlI0q2tEcZLW1BazhuCVqgJEsz6GuCEi2NIa8eirKkokBLdeSwVEXCUgn9UBXQR1UOvQIPVFl0D9rbqjy6CfFrqhL6RVVBl1RVdEGloHOqFjqj6qDTqj46qRqjE6o5Oq5aoTTVDh1TndBRNRrtV0vQTrUXbVZX0Vr1Fi1XEi9UUXi2ygvvQ0F4L4rA-1EC
3pMyeIIqD-9OJXiPqsE7VQPerZp4pKoFUvEIMFzVxsPA0L8ZAgZDfCDk9IfcvjCmj6qOe6sU3Atq9IJ6vVRx3FPlBzngOBl4QTgIgDwn5FtgHMP9FIYa39AA9RENgnkOVi_QEHjeQ9UNaC-B02igOor6qQOop9qFuqitqK3ahJqrdaiRWoXqqOWoulqMKqsFqKyag4qrmaigmo7ygVwgG5xnVrNQkpqLfJATB7leGBOrVoI1cLwOYhtQgtqIEtVmlKy2QP5WlEVtg7HbUXa1A-VUO6HWLpRH7UZ51R6UH55rPrUfjg9C7BDKrY5A_1HIO4ZyqDQYcxpqnUOR6iIKUL8gK3wHmrqGvhrX0WvjBnoIboHL4DQ4CvYaN9FWsM64hZYZt9F84w6aadxDk4z7aIwBz8N4hPobT1AP4xnqBDoaz1F74wVqZ7xCbY1fURvjDWpt_AbeoVbG-7_5AD5C7BP4DDlffmprYNzbMPAIw4WnGSF4iRGDNxpJeL-RA58xCuIb4KZRCN8yCoMi-LZRFBQDxf-mBMRLQl5pfA1cNcrgX4yy-DK4CC5A_xEYu93Ii1dCzTlGJjze8OFBRjTuCtdrafjhOoYFVzAoLmz8ibLBHL3GaxQI92cx7qLv8ib6LK-h3-Rl9EJeRA_kOXRTnkWX5Rl0GhwB68EsMBR0ALVBCZBZnkbBwAH5Qp5H38Vl9ElcQ6_FHfREPEJ3xSt0TXxG5wTBx4QV7xEevFlE41UiGS8UufEMURyPF5XwcFEH9xctcDfRBbcTA3AzMRrXE9NxdbEYVxBrcEmxDRcVB3BBcRIXEJdxPnEH5xfP4fg9Liy-QR8hxYVBSgoHKS08pJyIIBVEHKkkYC0W2UmKyAMKgmJwXppUFuWhvwopK6qTEqIOKSQakYKiJckv2pMCoisc9yZFxEDoGwK1hkGdkTB2NKklxpK6YjxpKCaSZmIyaSWmkPZiPhkllpOlYgM5KLaTW2If-SKOED95kmSWZ0l5eYm0l9fJRHmXbJZPyC_yFfks35NA4yvJYyCtjqFrHQ2hDTMs2izDrq03XNoRw61dNwK110aIpqlIzatitdIqQWujkrTxKrO2WeXQrqi82ldVWAuxFNeyWUpq5S2ltWaWslp_SzltuqWCtsFSSTthqabdBw_AQ_DIUhVU0R5bKmtPfqqkPbVUBBVAeVAOlAVlQOmfnljyaTcsGbUzlijtgMVf22wR2jLLNzLT8oaMsTwgAyz3ST_LXdLXcof0ttwmPS23SA_LTdINdAGdLDdIc8t1UttylVQCxSxXSC5okyzXYC26A2vUI2KxPIW15QV5p34lj9Vbck19hPXwG6zhurZNCbhfqW1QSlsDVoAlytBgDdfmKKbNVF_JcPWOdFUvSWP1nFSEvUQ-2FPEQz1_9Qb2Ne_JO-M97OU-wN7uPUkz3pGdxmuy2ngJe8InsEeEuRvXSGvjIqllnCIlYY-U3dhDYowtxGmsJthYRj7JheSlnE3uymnkspxIjssxZK8cTjbKwWSZ7EnGy3akp2xEGsnq8H2XITllfhIlMxGrjCafRST5IMLIOxFC3sC7-avwJy-EkzwTdvJEWMhD8EhYyWs4_wxxJN1EyCDikOEkCMZHyTiSKGGfKYuRprIqGSQbkvmyA1y_H7khx8K7NJv4GQtIqLGUxBkrSSZjLbxXG0gx2MdWgL1xLdAE9sPNYR_c2thF2sO9dYa9dHfYG_aGfWE_I32PnUaG_mzTLaBj5Hw6Qs6lQ-VsOlDOpH3ldNpTTqVd5WTaUU6k7eR42kaOpa3kaNpCjqTN5AjaRA6jjeQQ2kAOovVkf1pH9qGpsietIbvTFNmFVpEdaSXZnpaXbWhZ2ZqWBiVlK1oc2mIQKyLb0sLQXwjyCslOoDPoArpCPF03yOlOi_7UE8b2omVkb6jXh1aW_Wg1uGZNOYDW_nn9wTCPoTCf4TCv9PmlzzN9vunzTp__ZNoJ7qfbz_tKv79ZcJ9z4H7n0ZFyAR0rF9FxcgmdIJfRSXIFnSJX0WlyDZ0h19FZcgOdI3fRRfIIXSXP0E3yCt0l79DD8gk9Ld_QX-Rnekf-Tu_Jb_SR_IM-BS_Ar3D-GuJvof83-RG8A2_AK4g9B0_pG_kIch5C7g36WF6kN-VJelEepsflXrpP7qCb5Wa64uf10-eRPp_0eaXPL32e6fNNn3f695duNmvnXAhWsPbOdayDcwvr6NzJOjv3s27OI6yn8wTr67zMBjjvsUHOl2yo8xMb7sR8lNPCxzgD-HhnNJ_oTOCTnUl8mjMLn-nMwec68_CFzvx8mbMQX-0swjc4S_K9zrL8pLMiv-qsxB85q_DfwHdnZa5cFXigqzTP5irKK7oK8FauXHyYKytf6Erie1zx_Korir9zRfAfriAu_fy4y8_Cg_woj_L7ncX5vWVJfo9ZJr_7LIvfLXANXAJnWWa_E-AI9B1gGf3msHi_nizCL4UF-mVhTj8bM_xe6Jpfmv6Ha7H-0TVCf-Nqq79wVdEfu3Lo91zB-k0X0q-4HtMLrhP0tGsPPeFaT4-5FtHDrml0n2sk3eXqS7e6OtD1rqZ0pasuXeqqSee7qtBZrgp0iqssHecqTYe7StL-oDvoCNqAZqABSAUpoKKrFC3tKkcTXZWo1VWNvnbWoueddekmZ0M62dmMdnW2ojWcrWkVZxtawdmWlna2o8Wc8P47O9K8zk40h7MzzeLsQn3O7jTa2YuGOPtRt3MwNZ0jqOEcR3XnFIqdM-gPx2z6h2Me_d2xkH5xLKEfHcvpB8cq-s6xjr51bKJvHNvpr47d9JXjAH3pOEpfOE6As-ASuAbuQPwR9D-HvDeQ_wHG_Q7jf9D3Dq_-p6O8zpxddbtzju5xHtajnM_1DE6T5XTmYMWd-VkpZzFW1lmWVXBWYZWdNVmKsz6r6WzGajvbsvrOzqAna-AcAIayRs7RrIlzImvmnMZaOtPfz3RtWQ_SkfUlXdgg0o0NIz3YGNKLTQTTSW82B9pFYDHpyZaCZdC_HPJWkK5sJYxZTTqzNWA16cRWgZVQa8XfLCcdIL8DjOvA5pP2bBaAFZuNI-3YSDAY9CPp12_FupAWrCNpytqSJqwlacSakoasIagDaoIaEKsOUkjjn6pBXlXIT1flp2agOZy3-JuWkPNvUqB-LVCXtGaNQDPShrUG7eHaXX5eP90qrZZtvZZq26zVtu0Ae7Q6tgNaXdsRrb7tuNbQdkprajv9UzPQHLT4m5bQ1wq0_umk1sZ2Qmv703GtnS0NHANHwQGwB_p3QP5WqLFJa2LbALXXwnVWw_VXaDVs6fNIt4Dvp7P4PjqF76Hj-C46km-ng_lm2p-vp735KtqTL6Y9-CKwAMwDcyA2C8ykvfh0yJlG-_CptC_oz6fQgWAwGAKGgeEQH8dn0El8Lp0GdWby5XQOX0vnwjXm8510AT9AF_NDNH0e6ZbqXus6PYN1u57Zul_PaT2u57Oe14tYr-ulrPf18tYXetWfXurVQIr1lV4d1AA1Qa2fXuqp1ud6Heszva71qV7P-livb32kN7A-APfBRXACYgegfxeM2wz11utlrav1otYVenbrcj0ryAwyWpfpSSAD8IF4a_r8_of99Kg4SA-J9HY3vSC20TtiE30h1tFPYhXV5FJqlwtpCKyx8bDuJMA6mwDrUAKsRz5Yl3ywPvlgnUqQE8A4GifH0Fg5ikbDOhsJa1o4rG0hsMYFwVrngfXPBushhXXxm-hB34te9KXoTx-JofS2GEeviSn0FzGLXhQL6HmxjJ4Va-kpsZmeEDtp2s_5pcski5s5ZEkznyxjFpHlzFKygllBVjZTZFWztkwxG8oaZntZ2-wj65ujZGNzumxuLpWtzc2yvXlAdjbPyu7mBdnDvCR7mVdkH_Oa7GdelwPMG3KweVMOhXY4nI-E-GjzqhwDOePMy3IC5E80L8pJ5nk52Twjp5gn5FTzqJxuHpIzzH1yprkLbJezzC3QLoS88XKU2VcOMtvA9erItmY52dDML6uZ6fOPl0XNSFnYDJIFTT-Z17TJnKaUWUxNJpk_hNf8LmLMP0Sk-U2Em7-LEPOrCAQB5hfhB60T2CFuhX7D
_FMIyGcmktQkkphUYpMBCSzABjGH1EwX9LslAxyuazdDZQDMIcyMkV4zTiabPpndTJL5f84vXQ8hrL2Ebu0uuLWT8Le2EdHW5iKztZEoaK0jyltriNrWyqKltZzobi0jeltLib7W4qK_tbDoZy0A8og-1pyilzWb6GbNIrpYM4tO1oyigzVJtLVmEK2tPhibIJpZ40UTq1c0sMaKutZoUQukgCrWGFEBYmWtcaIkjMtvzSWyWguJBLhWhLWq8FjrCYe1lVDW9HmmC9brW3x6c0tuvYOllN7DUkMfaGmmj7J00SdZBuuzLZP0JZZl-nrLLn235ayeZrmvX7R81O9YJHtuCWUfLZkYtuZnwlqa2a3VmdvaiIVZ27FYa2-WwTqcZbNOZnmt81gR63JW1rqBVbVuZ3Wt-1lz6xHWyXqS9bWeYaOs59hE63k203qBLYB2xf_Dw11HSXF0fwPvrlvWMksCYyusADsbJMEdAgSCuwZ3d3d3D-7uFiS4S3B3d3d3e7_s7znv4XxOd1fde6u6prtmJ38E1yvRvt5zWG73HJB7PfvkfsQf8uyWR5B71LNVHvNshg3yuGcdrtfCv-hbk-iwZzWsgpXI-Uce9IyXqz1d5TRPLTnQU0C29sTLah4tC2OvyOg5LqI8e4QXe46LPYA8s8Vnd7x47Q4Vj9ye4qbbTlxwG4gjbmWxwy0i1rh5xDw3g5jgJogBboxo70aKWm64qOH-WMcf6qv6vK5qxOurBryBqs0bqeq8sarMm6ryvJkqxVuoYrylKsRbqfy8tcqH4--QF_KgPTfkQkzORM2gicqBGjlQKwdqZkft7LwOzmtDNeRVUn_wcqoIL6VK8qKqHC-EsfKpajwXxs6l6vAckB2yQma0ZYT0qhb_DX5NVJOnUzWgOk-LvLSqKvwFVRBTmmdQfyIvD_Izo1Zq1IzleVUAY4TxAkryP9Q3Kqje0x_qBRVQD-h3dZPyqEuUXZ2mrOo4ZVJH6Td1mNKqQ5QAqXAeq45QNPoiEONXFyiZukJJkOequ6TVI-LqGZnqFRnqNX2Tb-iLfEuf4AO8gzfwGu0v4YV8Rc_lS3omX9BT-YyeyCfwiB7Lh3AHrsMlOAcn4QjsR8wexG9GnTWouwRjzSOlptNPajKFq_GUAuIhAdKoCYS_kSkDZFaTcF-TcX9TKb-aRcXUAiqvllF1tZrqqw3UQm2jjmoP9VIHqB_udYg6RiPVSRqLe52kztIMmKvO0RIcf1gKy9QZWg4rELNCnaJ_Ep2kleoEHIdjcJRWYd1WouZKrOMPy9Q-WqR2o94Omqm20FSMP1GtxViraJRaTsPUEhqM-Q1Qc6mvmok5TaPumH8XNQ5zHE0doKMaCcOpkxpKndVg9A2krqo_dYMBqh_q9KEpqhfNUz0xtx60UXWn3aobHVFd6SxcQ9s99D9F7Bvkf0K971gz0tNJ6rlk6SXk6pWURK-jpHoLefUuCuj9FKGPwnGK1CfhNJyF83AB7ZfgMuKukQ-S6uv0E44ecPQV0uiTiGGI_4r1-4h1e4v1eol1eoo1eoi1uYP1v6X203W4ivNLaLuAvvNYz3NY33NY7wvqNl1WL9H_HXEeflNF8tt4xu_i3bqvCkNRfk-VgNL8Dt6t26oCv4X36wbej2t4Vy7jvTmP9-c03qMTcAQOoO0_vEu78B5tR-xm5GxQZfhavJ-rUG8F3qelqgBfjHd3Ad7veSor_vbJyGeqX_G30S_4eywVn4x3bIKKgkg-DsaqCP43jIIRMAxtQ2EIDE4Uhb-3kvOBKhpiIBbiICX-FgtBakgH6SET2rMiPjvyfketQqhZHLXLYowqGKsmxq3PJ6lm_9McWuDvt5bQCn2toQ3-ZvyhLebXFjnt-Bj4G0b_zygYgpj-yOmF3C6o0141xT7XGHtaQ_5jn_zhmj3Wfwvu2-P8T-zx_pfw1p7g_wTf7Yl-cib5o5yZ_rTOXH9OZ5H_D2elv6SzwV_B2euv7pz2N3Ie-1s6n_ztHSvQxQkGejq_BPo62QP9nSKBQc5f0CQw2GkNnaBHYIjTPzDUGRYY5vwdGO5MCoxwZgZGOYtgNWwJjHT-Q_tRxJ1D7vVAP-dBoJvzNdDKCQvWc2KDFZ30wcJO3mBWp3gwlVMl-LNTN2g5DYOm0yT40W4efGG3CD6wWwav43ge18fspsEjdpPgYbtx8KDdKHjAbhjcZzcI7rXrBf-z60Lt4B67FtTAeXWoir4qiKkc3G9XRHz5RAftcsFDcNgum-iIXSZ4FI7BXbtw8IOdM-g46YIRTlQwjeMEszsfAgWdu4Eyzkk4AcfgaKC0czhQyjkYKOkcCJRw9gWK435_KAZFoQgUhj-hkLMXNfYGCiDud8TnQV5O5Gd3jgSyoF4m53ggPWqnc04FUkMIUuE6Du2xGCvaOQT7YVcgubMZ_g1EOStgIcwKRDqTcRwLfXDeGmoFwp1SgYCTJ-B10gaSOhGBJPhcXeeDXzsP_dy56P9mH_J_sLf4X9gr_A_sWf5r9hj_ZXu0_8dz9AO-Wa3cvKmVldezfuPVrV94RSslL2lF80JWkOexkvEsFsPf16_Ism7TG32Grup9tF9vppV6BU3S86kndq3Oeha1xQ7WXE-mRnoC1dFjqJoeSZX0MCqjB1NJPZCK6f5UWPehgroX5dc9KK_uSrl0Z8quW1Ma3ZzidBMK4vizbkU22gViDT2aPmN3_IRvj4_49niP3fkdvj3eYsd-q9ZjB91Kr9UueqX20gvsWM-x6z_BzvYQu9VddZ5uqovYrS7TRXWVzqhrdELdoMPqFu3HTrZb3aHt6h5tUvdpLb6JV8Ey9ZAW4ht1jnqMb57HNFk9pfEwRj2n0fjGHoFv2WHqDb6l3tEg9QE7_ifqj2_0vorh15wEi_dTLt7in7BjJMMb7ePDVTje8Ci89THYCVLgV10Iv-hSYxdLx-er37CzZeGr8VfMJvyFsxu76GHsfGewe17FbngPO-NzvP1Ct-URugdPr4fygnoSr4LfLU3xG6q7PsCH68N8lD7Cx-qjfAKOk2G6Pshn6f18jt7N5-kNfLFezpfj985qPYGvR40tuhffqdvhd05jfkjXwm-gyvy0LsXP66L4XVaI34VnuiB_r4vjt1lx_pNVjEdbRXlaqwjPYRXmhaGC9SevY_14fv7krXHdBn3tENMesR2Q09EqwTtbJXkXtHVFfxfEdYaO0B7aJub9yP9hs9ypNssdarvcqnbLzWq_3KgOy_XqhFynzsBFuCY3qJtov4v-h3KLeoLYF3K7eo3cd3KX-iT3KKEOKUedUUnVNZVMPVBe9Vr9pL4pV1ma1M_6owzXL2Ssvid_0Vdken1KZtcH5O96uyys18pSerUsq1fK8nq5rKSXSKyzrKbnyRp6tqytZ8p6erpsoKfJRnqqbIJjM1y3RHtrPUe21QtkO-R0QG4nvUp20WtkN9TsqdfJPnq9HIDzIag_Xv8jZ-tlcrleLDfq-fI_5J7QM-QV1HygJ8j3eqxU1mgZsEbKBGu4zG4Nk0WsofIvHJtAe-gJg9E2FqbDImuIXA1bYZs1WG6HHdYguRN2WQMT7U7UH_pCb7T1hO7QFXFdEN8ZeW3lWquZXGI1kDOtmnK8VUUOtcrJXlYJ2cEqjPF_xzyyyWLWrzK3lVL-ZgVlnOVIv_VVuNYTwa27wrSuiy_6knivz4qX-qR4rI-JO_qQuKoPiLN6nzim94j9epfYoXeIjXqbWK23iCV6k5irN4qpeoMYpdeK_nq16KKXi1Z6kWioZ4saerKooEeLknqEKK6Hi6JQGOcF9UhRAO359BiRR08QuRCbBXm_ok4I48Rg7HDMJam-Kxz9UnBtyM8qiXyhouU9lVZeUjnlMfUnnp-yco2qJueqmnKmqiOnqfpykmokx6tm8m_VUo5UbeUw1UEOUp3kANVV9lc9ZD_VG8e-MABtg9E3RA5RI-QYNUZOURPlHDVdLlFz5Sq1BM_xKjyr__eM71T5jDmebMZkT0ZjlCetMdDzi9HNE2-08YQM_EY1qnrSGKU86YxCnl-NPJ70RmZPBiMtYlNAOPzsyWRo-OZmMd662YzHbk7jtpvXuOwWMs64xY2j
bgXjgFvZ2OdWNfa4NYxdbm1ju1vP2Oo2NDa5jY31bjPjX7e5sQZWw0pYActgCSxG_0JYkKipMd9tAo2hkTEPNea5DaCaMQfjzHRLGdPdEsYUt6gxAf52ixkjcD0A7b3cskZnxLTFXFogvpFby6jn1jdqomZVd5BR2J1vZHV3GSndG0Yy97vB3WjznfO7-dCpbV5z2pkXnAHmOWeiedZZZJ53NpmXnEPmDeeyec95Yj5z3pqvnW_mB0exb87PjNwIpt2ULMxNx5K5WVnQzc-SuyVZSrcK-8Wtx351W7FMbleW3R3A8rh_swLuRFbIncaKuLNZcXceK-UuYuXcJayyu4zVcJeyetDcXc7auf-wru4a1sddzwa7m9lIdzsb5-5iU909bLa7ly1w97NlsMrdx9a5_7HN7m62w93G_nM3sIPuOnYUuafc1ew8XHH_ZTfRds_dxJ64W9lLdwd7h_jPqGN49jPhOcRszxGWxHOceT0XWILnCsvlucFKeq6xWp6rrK3nPOvvOckmePaxhbDIsxf-Y4s9e9gSz27YBTvZ0kQ7YDuut8FW2IK4HzYj54e1bIrnHzbCs4T19sxj7TwzWEPPZPaXZywr4RnBfvcMYzk9g1lWz0CW0dOP_erpzdJ4erCQpytL4enEoj0dWaSnHYvwtGZBTwsW8DRlfk8jaIDz-mirj756LMpTF7F1WQzEQUqIh5CnIfvN04RlQ-7vqFHY056V8nRmlTzdWE1PT8ylF2sETXDeFOM2h5ae7qwV-ttgDu08XbAenaETdIQOaP-hPbRjrTGfBp7arKqnMivtKcUKegrifnJhzIyYQwLmF898nhQsqScW6x3NXE8UszyR-AwimQlf3Sj2yU2OzyeavYJnbgx7hON9tN1xw_E5-tl1Nym75iZhV10Hn61il12C7-Yl9wt8Mi-6H-AdvIFX8AKewRPYa15xZ5rX3c7mTbeseddNbT50mfnMvWy8cdcZX90lhuGZYXDPGLzrAw3X0834ydPK8HnqYQ-oYkR7KkNFI9ZTwYjzlDdSesoZ8ZDgKWukxjENpEV7OvT_5qlkpEd8Bs9fRkZPNahhZPLUhNpQF-qjrSE0RkxTaA4toTW0gXbQATpBZ8R1TZQJc8oCWSE75ERbbsjr6WL87mlvFMZ8S6FeRU8DozrGqoexm2IubTC3zp7SRg9PSaOvp5gxyFPEGOH50xjjKWhM9BQwpnt-7I_5jbk4n-_5w1iA9oWeQsYixCzxFDaWIn4Z2pajfxnilsJiWAjzE_N-5CeiLqIgdRZFqJMoQR1FaeogylN7UZnaiarUVtSg1qIutRANqYloRg1FK6or2lNN0Zmqiu5USfSm8mIQlRCjqIiYQAXFDMovFlBesYLyiPWUW-yAw3AB7sBLtH-l34XF8wsfLyjieBERz4uK1LyYSMeLiwy8hMjCS4ockJuXEvl4aVGIlxHFcV0GMRV4IVEFuX_xXKIaz4JjelGRh9CXHDE-xIaJvFyLrJzEr_w7T8G_cS__ygW8py_8AVyCI7CNvvKV9I0vhtlkiCnExFgSYjhpMYAc0YPCREf6GfebVLShZLh3r2hOftGUgqIxhYsGFCnqUXJRgX7B-qUTuSmjyEC_inhKI6IoSiSjJMKmd9yiN9yml9yh5zyMnvKf6BFPRg-5nx7wcIiGVLhODenRlxVy0WOeHwpDESiKtmLoL073eUm6C7d5KboJN3B-lZegy-i7gJhziD2NvJP8TzrGC9ER1NnL89J21NzAs9EqnpmW8Aw0l_9K03gaGs9DNAR6QQdct0B7A8TV5L9TFdQsx8tTaV6NSvB6VIQ3p0K8PRXg3Skf7095-HDKySdTFr6Q0vN_KQ3fRfH8OMXyKxTJH5Efa_4zN3gYt7jDk3LNI_FJpOLEf4PsnPECOBbmnJeAMjiviLaq3OQ1-Xeqx79SQ_6J2vFX1Js_pBH8Jk3mF2gBRljN99E2fIKH-Frc7Qq6ghnc5bOwwlPoIx9HhCfSI4bikxpIcaIfpRY9KZPArynRgf4Qrak4nuYKeKqrizp4mmtTbagjalE9aACNoAk0RXtzxLTAW9BS1IeG1Aqffis8Ba3xNLQSLdDWDjFdEdubGuNtaChGUH0xDm_KFNSdhfoLYAnVEP_guIZqiXUYayP6N2OszRhnM-pvojZoa4-3ppP4F2_lauqG-J5iGQ0Qs2m4mEhjUXeK6Euz8PYtFC1pBZ6-teIvWieq0PpElWkDbIRNsFlUoi04boVtsB0xP-xAzg683TsTVYN6uG4KbaEL9EHcEBgNk2Ay2qbCDMTOol2Yz24xl_4T82gv7Bfz6RAchRNwGs6h_QJiLoo5dBV5N1HjrhhPD1DzsRhGz_C5vMS9vMYu8hVrKmUZSiJzUlCmpDjpobTyPcsib7C88hD7XR5g-eQ-VkDuYQXlLlZI7mCF5TZWVG5hxeUm2MhKQEkojesyUBbKyc2JysvtrCLyKsu9rApq_SWPsGryOKsuT8M5Vks-YPXlB9ZEWtRGBqiLDFF_mZlGyvw0XZak5bIabZDNabfsQQfkKDou59ApuY7OyYN0Xl6FO_AY1y_hA52V3-mMFPy0dPkpmYyflJEQC_FoS-BnZRp-Uabj1-Rv_L7MyF_ILPydzMm_yrzcUAU5V8WgLBeqCmeqNv8uG_LPsgX_INvzN7Ir4vvwJ3IQfyBH8jtyPEzgt-UkmALTYAbMgtnom8vvynn8npyP-AX8kVzIH8tF_KlczJ_DS3gLn9D2HX2kFnCt5nOPmseTqrncr-bwcDUz8ehXC2EZ96mVsBY2wXbuVXsQux95d1GDxDsZJ57KfOK2rCUuyh7iuJwqdssNYpW8JqZLJgfLBNlKFpWVZTOZQw6RkXKh_Ch2yUfiiLwizsuj4pbcgQqrxAc5V5AaJ8LUABFUHUQqVV-kVeVFJlVAZFEZRDYVjaOL6088rXrCE9R1nkKd5MnVfzygNvCf1VLuqBlYyTFY3Z78lWyKFa_Er8g_-HGs_h4ZxddJmy-SH2mivE8D5FlqK_dQLfkvlZDzKLucgKdxMDn45F9j57iDt_0sdoF9eGs24HtysSiON7IgDRU_vkfz4vszN743c2JnyI43Oit2hCzYSTJhN8iANz493vz02AXSUzWoira_REaqIjJDVsgG2dH2Qw7050TcD7mwS-VCXm7sJrlRKw9q5qVm0FL8ju_ofPjO_jH-Dxet1fYNuGetsZ9a_9qvrfX2B2uT_dXaZjN7ty3sg_bP9m07YL-xk9vcCbc9js_2O8IOOm-tSOeMFeEcgh04XwdLYbYV5UyA4VZypw_0hl5WtNPTinF6WLFOdyuF081K6XS1UjldrBCOIVwnwC_o-wUxqRH7QxrkpXGGWGmdcVY6Z4b1m7PYSu-ssTI426xMzn4rs3PSyupcs3I4T-ATaDsH5pfTSWHndtLbvzu57MJOIbu0U9qu5FSxazp17QZOc7u508lu5_SxuzrD7D7OaLu_M8Ye4oyzR8I4Z6w9GW0znBH2PGeQvdDpZy9xetpLna72cqeDvcJpY_-DGv84jXBeD22V0VfCXuzkR2wWe4GTGpJDUlxLexHW6ofFDgdCLYb4H0x7mWMg30Qdhnpkr0LMasT-i7y1jrLX4X7WYc03OWnsbU5uexfG2evUsA86Le2jTi_7JOZ5FnM-50y2zzvT7QvOHPuSs9C-7Cy1rzor7WvOv_YNZ51909lg33Y22XedLfZ9Z5v90NluP3F22s_gpbPLfoPjO2eH_RF9nxHzxdlof0Ped2cN_GMb7hLbdOfDLJu502xyJ9rcHQMjbeGOgOG2TDTMVqDdobYFNjiJhtkueCAMcUngJ-T9hPyf3fG2FzUD7lw7HONEuavsGHeDncLdbse7e-1f3CN2Wveknd49b2dyr9jZ3Zt2bveund99aBd2n9gl3Wd2GSgPld2ndjW01UJfXfe-3cC9Yzdyr9pNkdvMPWE3dw_ZLdw9sBXn69G20m6Ce6nn9rBru_Xsmm4xu4abHnw4_2zVcm9atd3rcMWq416y6rrnrXruGau-e8pq6B63GrlHrcbuEavJ_zSFZu5hqzm0gJbQClqjvQ20hXbQHnk_dHCP
wUmro3vW6uxetLpgnK7uDaube9vq7t63eriP4ZPV07Xsnm44_ALZ7V5uEagMDaGT3dsdYPd3x9mD3dn2KHeFPd7dZM90_7MXu8fsde5pe4t7zt7lXrT3w1H3kn0Gx0vuBfume9a-j_6nWJtX7lH7Hdbns7vfNjx7bOHZaduebXaYZ7OdzLPe9nlW20HPCjvcs9iO8MzHcRaup9lezwhberrZX92m9mvM6YlbyL7jZrCvucntC65tn3KZfQL3cNx9bR1zn1gn3LvWSazpWdzvJazlTazjffeg9cTdY710t1lv3fXWR3el9cVdbH1351jMM85SnkGW6-lq_expbvk9tawoT1krzlPQCnmyWek8UVZ2D7cKeR7rcp6zuq5nu27rWaoHeCbqSZ4BeoWnn17t6avXevroDThuxvVWz0C9wzNY7_aM0Hs9o_R-zxh9wDNeH_RM0oc9U_QRzzR9zDNDH_fM1Cc9c_R1zwL91LNEf_Ys11bYSh0IW63jw9bozDj_AwqFrdCFw5brYmFLdImwRbpU2AJdOmyuLhs2G2bqcmHTcJwCE3WZsHHoG6NLho1C7AhdPGwY8obqImFDUGMQag3UBcMG6AKQL6y_zhvWV-cO66NzhPXW2cJ6YcyeOkNYD_1bWHedNqyb_iWsK-bSWceFddLJwzrqiLAO2h_WTicLa6uThLXWblgLLcKa6G-eBvq9p45-4amhH3qq6VueKvoynIHDnr-wFtX0Jk9NvdJTWy_01NczPI30eE8TPdzTSnf2dNQNPD2wvpgT1iwd1ioC66OxLu_cxfqFu0w_dlfq--6_-ra7Qd9wt-pr7i592d2vL7lH9EX3hD7vntXn3Ev6jHtNn3Zv61PuA33SfaJPuITnIsI67Gaw9rtFrD1uLWun29Ha5g63trjzrK14Jra553D-wtqE52mDm8pe6-a1V7lV7BVuG3up2xba2Uvc9njeO9gLYYHb0Z6H92Ku29meg-NsXM9G-yzEzEzUzp6BvBnIn-GWsae7v9rTXNee6j6ypuJZnIpnb7o7yJrlNrTmu1WtRW5Ja7Gb31riZoYEaynmu9QNA2Ytcw1ruftdr3C_6X_cr3ql-1mvcj_p1e5H-KDXuO_R9gF9HxHzWS9HzI_45a5prUjMt615rtea4Sa3JqL2GDejNcLNYw12C1v93LJ496thb2iIfaM19pSu2G_6Yw8aadVwJ1lV8H6Uc-daZaEMlIaSUByKQmH4EwohrpA72yrozoKZMMP6w50O02Ac-oYhth9yuiG3LWo0Ra26qFvVquBmx97nwz72RvdwT-vh7ho9zR2jl7lt9Va3nD7mlsZnWAKfZ1F8toXwGRfQF9zf8bnnwuefXV91M-vrbgZIB6lxHUJ7SsTE6rNuDHKj9VE3uT4Ie90ovduN1NvdCL3ZDdfr3aD-1w1grYJ6EcxB-3TETELuWDeVHoV6w92cuo9bTHdyq-rmblNd1-2qK7tDdUl3ii7gLtHZ3eU6K57NzJh3Bned_s3dqNO5W3Qad7tOwDMa7-5OlApSQgp3j47DMRZiIBqSIy65u1NHuTt0ZKLtOsLdBlthDa6XoH824iehxmjUHYQxemG8Tjqb20Lncevqgm4VXdwtqcu5f-i_sC613F91QzeFboH7bo17bO3-DK5u6SrdzOW6kWviXgxd3f2uykAh95vKAb-6X1Uc-MGG785X9dr5oh7AVeeTOuV8UPuct2qr81Ktdp6ohc5DNdu5p6Y6d9R457Ya6dxSg5ybqo9zQ3WF9lAEouClfUPtg2nQBv6ECEhq31SOfUuRfUd9se6qN9Z99dR6qO5aT9Q16636zzL0MsvRYyy_7mKl0LWtDLqwlVf_ZpXUfquCdqxq2rDq6De6kX6gW-gruq0-oTvqPbqzXqe76PW6vd6sW-tturnepRvrvbq-Pqhr66O6uj6p_9LndAl9X-fXH3VW1EqnozFGBiuoC1pJdGVL6qYW6ZaWqdtZ31Un66vqZn1WvawPqr_1Tg223qjh1ks1xnquxllP1UTrkZpgPYA7aqx1U422rqgh1mXEXVKDrItqgHUeeedUP-uM6mudVn2sk3ACjuH6CNoPo_8g4g4gfj_y9iN_r_rb-k9NsvaoWdZutcjaqf6B9dYOtQ32wgNru3Lt7So9VIBOMBW2wU14Ad8hibNdRcOvkBdKQnWo5WxTdaGBs1U1craops5m1cLZpFo7G1VbZ4Nq56zHZ7lWdXD-VR2d1aqTs1J1dlaoLs5yWIbPeiksgcW4XgQLYQHMR9xg1OmkGjsNVR2npqrkVFLFnYoqh1NBhZzKSjlV1Fu7qrptV1cn7Zpqh11brbDr4TlpqIbaTVRnu60qbndVye2-6rk1TO22xmF9Z6qm1hKVx9qgfsK9f9H_qQf6oDqtj6kd-rRaqi-oifqq6qtvqZb6jmqk76o6-r6qqh-qCvqxKqWfqcL6hcqvX6lc-q3Koj-o9PqzSqsNnaC5TqVtnUIn0bHaB1l1tK6ok-sOOlKPh3_hNK5foT2pFae94IcgnpxwiLRS6uRWKh1jxetYK6RTWAk6pfWLTmWl0fFWWh2yftUJ1m_6FzzJqa2MkCnRL1ZmtGeBrIjJithsyMmmI6wcOomVSwsrt_6k8-gX-nd9TxfAk14I8yiGp7g4lMBTX0of16WhrD6my0MFqPQ_ldFeGTFVEFtFn8KTfxrOwHldVV-Cq7qavg634C48wBvyGEeyqmAOVfFW1MCbV1fXsBrrtlYbPdjqqqdb_fVMa4CeYw3U86xBeqE1RC-2huml1nC9whqpV1qj9TprvN5kTdPbrDl6h7VY77ZWwgbYrnda-_RW66LeaD1B3He92vrZWmGlspZa2a2FVnFrnlXTmm21tmZYfa2p1jhrkrXAGm9tsMZaB62_rcvWKOupNcL6BMoebvnsEVYKe5SV3h5j5bHHW8XsaVZlqGJPhxnWX1DVnmlVs2fB7P-Zg7Z5sAD9CxG3CDmLrUr2EqsiVLCXWgUhi73MireXY4zllrRXWO8xzwfWP9aF_zkP56yV1llrVaIz1mpYA_8m_p-IzljrEp211sMG2Ij4jcjbaT20DlifrRNWmH3BisVv5sz2A-tP-yXm89FqZn-22thfrI743dwd-uB8INqH2e-t0fYra7z9zJpkP7amImemfdeaa9-yFtjXrSX2ZWs56q2yf_wO_yGXKEPZRXn6cfxdFKI_8Eu-MH79FxepqLSIoAoiCX71c_zC_8j-zwd4B29ZNfHmf16zqvCXeMUqQ0XxkpWHclAGSkMptJdAbDHkFkGNP8UnVlB8YQXEd5ZfmBibUxbhowQRT5EiK3kwF0NUoFe8Lt3hreks70WH-FDazsfTGj6LFvDFNJmvpmF8I3Xn26kp30X1-G6qzvdSRX6ASvHDVJgfp3z8NOXg5ykTv0TR_A5Z_Cm9xb8b9IUOE-fryeFz6Gc-ggKoHuSDKJz3hz7QC7qjrSv5eRdKxjsjrjOFgQMabQJ9xLuRgbhv1Ife0wB6SUPoMY2kOzSGrtFEukDT6BTNpqO0mPbSatpOm2k97aaVGH8RnUHPVZpC9xD9gEbTIxpBT2goDKKn1B_HvtAL7b3Q3wtxPVG5J92Cm3AdrsIV9P2HvJU0GdUWInsDtacDVA89Zek5FcC95iaXZyUfz4CVSEO_8HjKyGMpF4-ggtxHJXlSKst_oso8DKvoUh1uUUMuqAk3qAX_yFrwt6wxf8Pq8lesBlSGslCCv2Z_Qn705YAMiEvN37E4_p5FIC8p_8Rs_pkR_8Y-kIG7YZi5oHOksAIW7SCX1lIYLaEkNA9m4HwS2saRg_XQWA-B-zKxql_ZEPoI79hQes2G0ws2kp4yrBkbSw_YBLrHJtEdNoVusWl0g82ga2w2XWFz6RKbTxfYQlhE5-EcW0xn4fT_nPqfk-g7wRbQcTaPjiHvGPKPslkwA6bTGTaILrM2qF-N7rNCGPtXesUCmI9BH9hD9n8ewH32nt2Du-wdu8PestuJXsNLeAHP4An6HsNDxD1A_H38u4ezO-wReh_DU3aLPWc3kXUT2ddR8Sr7wq5gvEtM0EVm4Z7CcD9JcT8BzDsT7WelaAdrQutY
P1qOOc9m62gCO0aD2X0axB7SQPaE-rPn1I-9pL7sDbynPuwj9WZfAM8w-w4m78sY78c4788EH8gUH8Q0WHwwDIGhMAyf63AcR8BIGIO4CciZityZzOBzUW8h-0xLUf8f9g5zeklb2GPaze7RQXYD872MuZ_FZ3SCbrNDdJcdSDzewvUtdp5usmtwB5_lY7rOXuHz_IDY77hvl59n4fwsC_EzLAs_zQpAaX4Kz-Up1hS64Xo4zEDMP_wC28Evs-P8OrvB77KX_AH7xB-y7_wR4-IBk-Ie0-IGXIJjuD7AhPiPKbED11uZIzazMLGRJRXrWUCsY1G4jkZfHGJSiYMsATmpxWmWTlxg6cVVlkncZtlQN7d4wvKJ59jlXmHHe8WKQylclxaPsCvexfEmrq9iV7zIiopz2BFPsz_EceyGh1hesY_lFLtZVrGdZRRbUHsjxlnPUiSOv5KFiyWYyzzmEzNYMjEJcxvDkojhzCMGYs49mCk6s2-8HfvMW7OvvAXutTnuqynuownym2H-P44VEfcnu8Ozsf08LVvC49gwHsGa86R4pz0sLXdZKkjOHRbgFvuZK3zeHM-Dgc_gk_mZPpgf6Z35nt6ab-m1-Ypemc_ppfkEHtEL8z49N4_SE3MtPTCn0l2zD90yG9MNsxRdMzPTdTMc50nopsnR_ondNp-zO-Zdds-8zO6bJ9gjcx97bq5kb80p7LPZn5msJdOsCkvCCrAAS8dimZ8lMMEysNdmDnbL_IOdMkuy3eZf7F-zPptvtmUTzXZsgtkeOrLxZmfoivPu0BN6ob839Ek0yezLJsMUsx-bCtNgOkadATP_ZxbMhjkwF-Yhbz1qHTS7sSuo_xzjMNaO-VhrzKwFy8WasRKsKavOGrPm0B2GsyZsGtqXs1ZsK2xD7HbWhu1A3g7Wge1kndgu1gW6sd2JukMPXP_QE_29oDdieyOvD_L7si2sH9vE-rMNsJ4NYGvZQLYGVsEyNogtgFkwhQ1m42EUDIF-6G-MYwk2lKVnI5iXjWYfzPHsqjmZ7TJnsIXmTNz_bKzVHDbSnMcGmPNZD3MBa28uZM3NRayeuZhVNpeyEuYKlt9czbKa61haczOLM3eyAD49j3mMmeY59ta4zh4aD9h14yU7Y3xhhw1Fuw0fbTH8EKTNRgREQTTEQgpIib5UtNWIp21GiHbALiOB9sB_sA8OoO0I-o8j7jTizyPvkhFH11DjphFDd-Ee3IcH8BDtj-AxYv5PSnqC_Ceo9cT4hZ4aaSAd_Ibr9JAVublQKx9dNgrSWaMIHTOK036jFO00ytImoxL9Y9SgBUY9mmY0o_FGOxph9KBBxiDqY4yh7sZU6mLMpQ7GMmpjrKWWxjZqauyjRsZxqmdcoDrGQ6pufKTKhs3LGRG8lJGWFzXy8EJGSZ7PqMlzGa14VqMXz2KM4pmNGTybsYLnNLbw_MYhXti4gJyLvLxxmVcwrvCKxjVeybjBKxs3eRXjNv_LuMurGky0MMJFXyOjmGQUFKuNSuKwUVc8NFoJZXYQqc2OIqPZWeQwu4h8ZjdRxOwhSpu9RGWzj6hp9hMNoKE5QDQ2B4om5mDR1BwqmpnDYIRobo4SLczROP6N9jHoHysameOQM17Uh7pQB_5ATMgcLmyzr3hudBFnjaZiq1FdzDf-FKOM3KK_kUF0NeJFKyNC1DfCRFWDRGnjA9bgKe71Cc9uPMb9P-aZcJ4e0hnPeGrjBU8wXvF43F9yI5kIGimF18gikqFmUtyj32gkwo3OIs7oKxKM4SKdMUFkNGaJ7MYSkcdYK_4wtosixgFR0jgqyhinRDnjvKhoXBGVjVsY_76objwRNY2Xoo7xBsfXohKUxXkJ450oarwXhYzP8E0UNEgWMgKyuJFWljXyySpGeVnHaCCbGZ1kR2Ow7GtMkn8b0-V4Y46cYiyUM4zlco6xWi4wNsglxla5wtglVxsH5QbjhNxmnJf_GVflYeO2PG08kJeNZ_K28Uo-Nt7Ip8Zb-cJ4J18b7-U744P8aHyUn-Ebzg3zjQwz38mA-UHGmt9kyOQqrelR6U2_ymzGqGzmLyqnmVHlMXOp381CqoBZShU0K6s_zdqqqNlUFU_UTJWAkomaq1JQGspAWSgH5dFXIVFTVREqmU1U5UT11V-oVdWspqqjbk2znKqFMeqYxVQ9jNfALAh_qIZmAdXIzK-amPlUU_N31dzMq1qYeVTL_2mF69Zob5Mon2qL2HbIaYca7c0iqgPqdTRLQhnVySyvOpsVoYrqYjZWPc0OaqDZV400R6hJ5kQ115ypVpoL1FZzmTps_qPOmmvUdXOdemhuUK_NzeqruVVptl0lZTtUcrZT_cZ2q3xsryrLDqq67Ihqy06pfuyCGstuqjnsjlrM7qqV7J5ah-MWdlvtYtfVfnZZHWFn1Ul2TJ1n-9VV1LrNNqiHbJV6zhart2yO-symKpNGKYcGqp-oh_JRB-WlFiopNVQ21UJfJfWClVa3WFF1hhVQ-1hutZFlVUtZejWdpVajWErVJ1EKiFO9WSzEQDQkhyiITNSHRUC46suCmHtQ9WcBNQDHH4bCKBgHk2E6zEHsQuQsRc1d7Bd1jmVQTzC-QX9ijhVUAtVRuaiNKpGorSoJpaEMlIVyUD5RG1WBWqlK1FJVpuaqCjVTf1ETVZUaq2q4z6q4z6pUGW1l0FcEMfkRm0NVpAzIS438VBCLulEYI6iKk1cVpSTggEIbRx8hhiHPRC1D1aTvsi59kw3pq2xCX2Qz-iyb00fZkj7IVvROtqa3sg29lm3pJbyQ7egZPMH5I3iIvvuIuQd3kXNHtqDbqHFbNqVbsjE0hPpQF2216bEsTs9lVnojY1Dbwjhv2Ed5jX2SB3BcA_NgAgyCLtAMqkMpyIe4X9gHmZS9k1_NV_K--VyeNB_LreZ9udC8Lf82b8lR5g053Lwmh5qX5WDzghxonoXTcoB5Sg4yT6LtBPqOy2HmMTnCPIr4I3K0eViOgXHmITkeJsBEmASTYQpMTXRELkPeFtQ4jHqXzTPysXlefjYvSoddlZHsukxgN2QmdkvmhWJQkd2UtdHWjF2TndgV2ZNdlgPZJTkCxrOLcjrMYxfkMnZe_gtr2Tm5jp2V69kZuYGdlhvZSbmJnZCb2XG5JRHGZ0dxfQTtPxxGzCHEHkLOfrmK7ZVL2R7U3ClnsO1yEtsqx7BNchjbIPHXDMZfjXn8I1uzpbIJWyTrsnmyGpuNeU6TpdkY-QcbKrOyvljn7jKCdZAuayW_mU3kC7OevGXWkhfN6vKEWUUeMCvIHWYZud4sIf8xi8gF5h9yBkwzC0A-rFVeyIO1ywU5sI7ZEk01s6I_C2Izy1lmJjkH5poZ5XwcF6BtGfpXI249craaOeUuM7fcj1pHUPOk-ae8ahaVDzHmWzBZSelhJTDPEjLEisrMrADuI4fswNJjbeOxlhHyDAuTrxnJpPROZKS3IhO9EZnplchCL0VWeg5PRTZ6LLLTw_8vGz1IhL9YEHcf8feQ-8NdEQdJgXD9mt0T-L0pzrLH-IXxXGxgL8Uq9kosZW_wa-INfk28ERPZa_E32oaiv1-iZ6Iv9GFP4Ynoneix6MUewUN4APfhHtyFO-i_nagPuykGsWtiBLsixrKLYjI7L2axs2IBOy2WsZNiNTsidrID-NWzV1xju_CLaav4zDYIi1aLIC0R8bRYhGiRSKCFMF_8QnNFapoDs0QampEoNSTQdMROFylpGu53moiFaJoqoiASIiAcghAAP_hoCkwWXpooktEE8TONEz_RGPhbJKHRMAoGIqc7arYTaakx1rWmyEPlRUEqIoon_jezH8bwZcHZfHpwBR8R3MK7B_fxZsGT_K_gZV44eJdnDj7jscEXPDL4mvuC7_hPwQ_cCX7mMviNm0FDfAmQeB_g4m1AiFcBJV4EtHgWsMWTgEc8DiQRjwJJcUyW6GnAiz6veBnwidfwFt7j-mPgZ-EGPSImaImMQSEKBZmogvrNgp94j-B7Pjr4lk_D-AuDr_hqzGVb8Dk_EHzKzwSf8OvBx_xR8BF_EXzI3wUf8C9ght_nKvwe94Tf5UnD7_Bg-DWeIfwiLxp-mtcN
P8a7hh_gY8L38KXh2_ju8A38Uvgq_j58KfdGzOcZI2by0hFTeIuICXxoxN98YcQI_l_EUH4lYgh_EzGIu5EDecrI_jx3ZF9eIbI3bx7Zg_eP7MJnRHbiGyM78NPwLLI9t6La85TwO1SF2tAAmkEb6BTVgfeAvlEd-eCoHnxtVG9-M6ovD0vej-eGJsn78gnJ-_DdyXvz5_A9eU-eJLobj43uxNNHt-P5olvxMtFNea3oBrxVdG3eK7oaHxldic-ILsuXR5fgW6ML88PRBfjl6Dz8UXRu_iI6F38bnZN_js7BzZgcXMZk5y4khQCEQyTao2Jy8uiYXDw2Jg-Pi8nLU8Tk4ylj8sMfUBD-RFsR9BWD4ogryWNiSiGnNHLLokY51CqPmhW4P6Yi98ZU4sliqvCfY_7iP8VU40liakBNqI3rOmivg_4GqNGYp41pxrPHtOAFY3BvMa15jZg2vElMW94RhsKMmHZ8dUwHvjemI78Y05k_jenKzdge3Bfbm6eO7cPzxvbl5aAhzrvG9uKj0Dc3titfH9uRH49tyx_GtuQsrimPimvIs8XV5WXiavGmcdV4fxgEw2AUjI2rzifG1eBT4mryGXG1-ay4RnwB8pbHteRr4lrzTXFt-M64tvwAHIfz8B78KdrybFAZOsIEWAdn4W6KdvwtiJTtuR9CKTvybCk788Ipu_PKKXvwqlAjZU9eG-ql7MUbQmNoBi3RNjxlb74kZV--L-VAfiflEG6mGs5jUo3meVKN4dVSjeUtU43nfVJN5ONSTeELU03jm1LN5EdSzeHXU83jr1It4N9TLeRO_CIeiF_CU8Uv5Rnil_M88f_wYvGreaX4dbxB_HreIX4j7x-_gY_F-Zz4f_kq9O1AzLH4ZfwC8m4j_2n8Av4-fi5nodncDc3g_tBUHhsax7OFRvKSoUG8Xqgv7xrqzkeHOvEFobZ8a6glPw1nQi34ObgQas4vwZVQM34Nroea8puhRvxhqB5_HqrJ34aq8I-hsvxbqBj_HirAzYSc3EjIhPM0_GsoJf8cikK_l78PeRAr-OvQN3oV-gKf4AO8o9ehN_Qm9Ape0lt4Bx_hM3wDI-ElUcIrkgmvSSe8IRvchHfkSXhPSRI-0E8Jn-jnhC-UNOErJUv4Tt4Ek_sSGPcncB5IkDyYoHh4gsUjEhwemeCBSB6bkIanwlxTJxThvyVU5pkSGvDsCe157oR-PH-ivrxAQm9eMKEX_zOhJy-c0IMXTejOiyV04yUSuvKSCc147YQ6vAly2yaUgkKQizdNyMDrJsTx8glBXjzhJ-Qr1PxGWRLe0q8JjymUcItiEi5RMOEs-RJOYt5HcR-HcF_7iCfsoe-hXfQptANrsZ2ewyO4h-uboZ10NbSHLob20dnQIToVOkonQifoeOgMHQ2dp8OhS3QwdJX2h27Q3tAt2h26Q9tgE6wN3aZVaFuGvkWhazQ3dIVmwozQZZoO05A7FabA5NDFRJNCx2g4xusd2kjtQyuocWguVQtNptKhkfRHqB9lC_WhzKFelCHUk9KFulPqUDeKh7hQV0oOEThn8Ci-O52K70Gb43vS3PheNCy-N7WL70PVoGp8X_oLqsT3o8rx_alS_ACqED-QyscPonLxg3EcjOshMJQqQqX4YYkqxw9Hzt_ULH4C9YqfSmPiZ9GC-Pm0MX4JHYn_h67H_0uv4zcQhbZQUqxdCtxHptB-zPswlQ8dp7qhU9QW69YJuofO4h7P0QCs4VAYFbpAY2ES1moU1m5A6D51Cz2kNqFH1AjH6qEHVC50jwpjTTOFruNer5BG_Ov4Mxj3BB2KP0Lr4vfTnPillBFz3JWqM5VLVZtupixCbVJmICNlOI1OQRSd4hvTKT6xl3Fv2aW4l-y_uCdsRdwDNinuNusTd501i7vGGsZdYXXiLrMacZdYlbiLrHzcBVYKiuG8EPoyICYq7gbTcbfYm9i77GbsA3Y09gnbFPuSLYQFsa_Y_NjXbB7MjX3D5sDs2LfwDt7DR7R9gi_wDTHfEWvQvFiT5sdKWhXr0pbYn2lfrJ9OxkbRldg4uh8botex6ehbol_pe-xvkB4yQEbIBJkhC2RN9C02G32NzQ456At8TpSdXqL9HlxBzEnE70fuNtRYg1qLUXtabFoaGZua-mDM9rGpqBHGrxqbnErGhlO-2KSUOtZDyWIt-hIj6G4Mo-Mx39nGGNxLzHs2HIbBUBgCg2EQDIQB0B96x3xk3WM-sy4xX1nHGIPax3BqF6OpbYyDo5c6xiSnLjEh6hGTnnrH5KD-MQVoUExxGhpTgUbGVKFRMTXo75g6NCamIY2LaUrjY1rRhJj2NDGmM02K6UKTY7rh2B3XPdDeCzG9aWxMX-T0o9GJ-qNGf9TqT8NhGAyFIegbEtOHBsT0pD6o0QP1usZ0wHzaYl6tqFVMM2oeU4vqxpSnv2IKU-mYXPRnzG-UJyYFZYrxU-oYm2JxP8GYD-ynmBdMxzxi36Nvs7fR19jj6IvsZvQ5di76JDsQfYRtjj7AVkTvYbOit7Ox0ZvZgOj1rFP0GtYkeh7LFD2WfUnel-1L3pr9nbwmq5a8BItPnpM9j0pgm6Ni2YKoCPZ3VDLWPSqMNYzSrGwUsdxR3834qC9mkqjPpor6aH6L_GC-jXxnPo18bd6NfGleiXxmnol8bB6JvGGujbxoTos8bfaLPGY2jTxolo3cZ2aL3GMmj9xpUuQ280HEZvNYxHrz34h_zSkRq8xeEcvN-hFLzGIRC83fIuabvog55tfwmead8Onm4fAp5prwSebU8Alm3_CxZpPwMWad8L_NqlAufLRZPHyU-Uf4SDNX-Agzc_hwMy2EwoeZKcKHmsnDh5jB8MGmN3yQmQTs8IGmCB9gPgv2N88H-5k7g33NpcE-5rhgL7NHsLvZMNjFLB3sbJbCsUSwq1ks2M0sivbCwR7mn8GeZsFgb-hj_oHcgsEBMAiGmIWCQ9E_HHEjzCLBv82SwfFm-eBks0pwmlkzOMusH5xnNgkuNFsFl5rtgyvMLsHVZs_gWrNvcIM5KLjFHBbcbo4O7sY89pmTEx0wpwQPwmE4CsfhJJz-nzOIOWNOCp41J8KE4DlzPIxLdNocjtgByOmJ3I7BQxh3v9k4uNesE9xlVsW4fwQXmWmDU0xvcJj5NdDdvB9oZp4O_GVuDxQylwcKJloW-MNcGihgLkmU31wcyGcuSpTDnBXIak4JZDTHwUgYHMhs9glkM7sG8phtENMM-Q0CRczageJm1UBps0KgvFk6UNksGqhmFgw0MTMFOplxgQHmT4Gx5nf_bPOZf6V5zb_NPOo_Ym7znzX_9V8zl_jvm7P8z83x_vfmMP93s7dfsQ7-MNbE_xNr4E_K6vi9rLrfx6r4A6y8P8hK-yNYMX8k-zORZBX9r8yG_utmJ_9Rc6h_iznNv9Rc6Z9q7vYPNc_5h5jn_YPMC_6B0N-86O8LvaEndDcv-bsluujvCl0Q0wXxnZHX2TwLZ_ztzS3-VuYcfzNziL-R2cpfz6zkr23m9lc34_xVTO2vbH7xVTJf-iqa93C8BMd9Vcw9vqrmRl8Nc7mvnjnZ19gc4Gtptva1M6v7uphFfD3NTL7-ZrRvqGn7hpvMN9r87B1nvvVONp97Z5iPvPPMu94l5k3vavOad715xbvVvOTdZV7w7jPPeY-YZ7wnzVPe8-YJ7xXzmDcJ2-otwJZ427NJ3gWsv_c8a-3VVM2biwp5m9Fv3k70i7c_pfSOpuTe6RTuXUxe7zpK4t1FtvcYCe8pIu95Yt7LZHhv0Ldkd-hrsof0OdlT-pjsFX1I9pVeJ9P8aTIvv58sht9MloZfTpaNX0hWgJ9JVhqqQWN-Lll7tPXml5IN51eSTebXk81H7Cp-J9lh_jDZff4sGRNvkiUXH5PlFN-TVRTc21rY3mEiiXes-Nk7RSTzzhE-72IR8K4U4d71Isq7XUR794o472GR0ntchLxnRBrvefGb95LI7L0qcnivi7zeG6IQFPHeFCWgjPeWqABVoJr3tqgF9aA9DISJsAg2ov8QXEbOE-S_Ry3Td1U4vsvC77soYn3nRRrfWZHVd1rk850Uf_qOieK-Q6K0
b68o49spyvk247gO1yvRPk8U8E0U2X3DxG--XiLe105E-hqJpL5qQvtKi-_egqifQzz3_ibue1OK696gOO_1iONeEvu9H_gO73t4B2_hDbyGV_Ay0U7Y5X3B98Be2O99zg_CITiC66PIP-39xi95hbjpdTFGMvHMGyHeeOPEZ-8vuK-cIsxXQkT5auCeWmKevXE_f4vyvrmiju9f0RL30s63Q3Tx_Sd6-g6I_r4jYqjvuPgb9z3Jd0rMhnlYh0WwzHdGrMS6rMH6rPNdEht918Qm3w2x2Xcb7sEDXD-GZ-h7KTb43sBHsd73DUcmN_qk3OKz5TZfmNzpSyr3-Pxyny9cHvQll0d8cfK4L16e9KWWp32_yrO-TPKcLzuOOSAn5JJnEuVGfx7IK0_BSd_viU748iE_nzwGR-EIHP6fg-jfD3sRvwe5u1FjJ2ptR91tvixygy-9XINxl_tSyUW-GDkHc5ru88qJmOcYn5LDfKbs5_siuuFe2vneiaa-t6K277WojPsrCUWhEOSHPJAT_VkhI2J_RV7A910YqPHQy-QpL8ktMB9GQicvl-2hLbTyCtncK2UTaOhVsr7XknWgtteRtbyurOkNkzW8SWR178-ymjcZ-CAAQYiAKPRFIyYWUiA-JfJCqPGLrOtNi3q_ygbe9LKRNxPGyCKberNhvNKyn7eJnOztK1d6p8r_vGvlJe9R-dJ7TyrfNxnji1C5fTlUFV8l1c7XXo30jVGLfavUbt8xdcX3VL3zvVVffF8U85O2_LZO4v9Z-_1Bndwfo1P643Uafw6d219Ml_JX17X8LXUbf2_d1z9Gj_XP13P9G_Vq_xa91r9dr_fv0pv8e_QW_z693X9Q7_If1v_5j-n9_gv6lP-WvuZ_oh_53-m3fsMyA7blCXit_8emXUa5jXThohZWldQtybJluRnS6bathvBMaAITZmZmxglNmJmZmZmZM2FmZmZmOu_km3v_nPPjWSXt2ntXCWx31kqYL0ZJ70uvpPiCSlZfmpLbl1Ep6MuilPJlVapAXRy38GVQevpSlLHIWehLUrYi_4QvXrmD2g--KEUNC1cSwrxKrjC3UjHMUFqFhSoDwpgyM0xWNoUJykk4H8YrV-F2GKc8gGfwBj7B97CfzBX-k6UL_8Gyhn9nhcO_sarhX1jz8E-sR_h7Nir8LZsY_obNhAWwIvw12wDb4R84BtfgWfgr9h20iFcsGtIiXrI8UBqqR7xgjSKes3YRT1j3iIdsUMRdNibiFpsecZUtijjJ9kbsZdcjNrJPEUuZJ3IWyxA5nhWPHMoaR_Zh_SJ7sDGR3disyC5sRWRnti2yIzsS2YldggeIvYcPkX-zj5Fd2SfkfUb-l8ie7GtkL_YN9d__f31x3g_x_jAAOQOQOxA1Q9nTyJHseuQ4djJyEtsTOY2tj5zNFkbOZ5MjF7NhkUvYUBgSuRSWscGRy2EFGxS5ElaxgTAocjViqzG_Brn_MyxyLRsOI2AUjIlcx8bBBJgEU2AqTEf9ZvQ7h_4vIxexkKj5LClqFvszahqrFTWedYkaxmZE9WX7ov5mj6LaMi26CcsSXZtVja7EekSXYvOiC7Nd0fnZ1ehc7GP078wTk5lljEljJWMc1izGzwbEJLA5MXFse0w0uxQTwd7F-JgR62HJsTorHMtYvViJtY4VWPfYn3RI7A86MfYbnRf7la6BnXAM5-cxXo_9TB_EfqDPY9_S97Ev6bfYJ1SKu0dD4m5RI-469cRdpmFxF2hU3BkaH3eSJsYdo07cIZrhPxnjDtLMkAWy4jwb_PbLEfp73FGaPe44zYG6nHGnaC70yB13Fs7DZcSuY_4Och-g9gn6vEC_tzQt7iNNiftGg3E8C8YRUJgTp7GUOBfLEOdhWeJsliMuguWPi2bF4-JZhbhEVjMuyBrFpbDWcRlZp7gsrFdcbjY5rgBbE1eCHYkry-7GVWLf4qowO746yxhfjRWHClAjviprCC2hI_SEgYiPQt4qjCfiq7AX8RWYlq4sS01XnJVMV4i1SJeHDU2Xg81Pl4XtSpfGLqcLsLfp0jEtIZoFEnzszwQ3q5lA2eSEb_Rswmuqp39Ii6e_RgekP033pD9Iv6XfTrMnbqYlEjfQOolr6V-JK-mgxGV0WuISuipxId2XOI9eTJxL7yfOoW8TZ1MhaTZ1QUzSLJoKuZJm0mJJM2iVpOm0YdI02j5pKu2VNIUOT5pEpyZNpIuSJtD1SePpDtifNI6eSBpLL8LNpDH0EbxOGk0_g-IfTSPAgZxQAmpAC-gOg2G8fwyd4x9LV_jH0a3-8fSAfyI9459Cb_pn0Hf-WZQF5tDowGyaGYoEZtCagSm0XWAcHRgYRccERtDpgaF0UWAQXRsYQHcE-tLDgd70XKAHvRn4mz4PdKJfAx2oEmxPw4LtaFKwLc0KBXBcDqpCbWgU_Iu2CHakbYNdacdgT_p3cDDtFhwCQ2n34HDaMziC9gqOpH2Co2g_GBAcTQcGx9JxwfF0VnAiXRacTDcHp9J_gtPoqeAMeh0eB2fST8FZlDizqeXMp-mcRTSDs4LmdtbRYs4OWtHZQ6s6e2ktZx-th7ExtHB20zbOTtrB2Uq7OBtoL2cVHeAspsOcOXSUM5WOd8bRSc4wOtXpQ6c7PekypzPd4rShB5zG9LRTk153ytFHThH61vmD_nByUS45O-WTs0ImSIVkxAL0pxOg3-EbfHH89BPGD_AO3sBrJ0hfOVnpPScPvewUpSecCnSfU5tudprRlU5HOt_pi_X7Yy8D6RhnMB2OPQ1yRtC-zija3RlDO2Of7aEdtIU20NoZS1tBS2iBnBbIbY6a5qht5gylTdGnKfo1dQZAf8S6o64j7ei0pt2cJuhdlw52quE-lKcTnBJYvwCd5-SmS7HPtU4K7kMi3e1E00OOTU86Or3ghNJLjkKvOJRedSR6zRHoDecnuel8gy_klvOJ3HY-YHwHb-E14i_JDec5ue48I9ecp-QqXHGekEtwwXlMzsEZOI3zk5g7jtwjqDnkvCIHnDfkH_Tag567nI9kB_pvhc043uC8J-swtxprrEL-CvRf4dyFq2SlcwbxI2Stsxd521Cznux0VqDXMvRcgv6LyAk4AxecxdjPEuxxGfa7mtxD7iNnM3nq7CAvnT3kjXOAfECvz85J8h19fzrniJB8gchAky8SFUJxrCefI0byGeJKPk3M5JPEnXwcjhJP8mE4RKzkAxg3IbaChCTPI1LydPLFmUBeOaPIfWcI9tAb--mG6-9CDjodcM3tyTanLfbfFtfTlixy2pHZiM2Aqc5fZDJyJjgdyVinExntdCYjUDfU6UoGOj1IX6cX6en0IX87_UhHZyBp5wwmrZyhpJkznDR2RpKGzmjSwBkHE2EyzqeRRs4M0tSZRZo7c0lrZz5qFpIOuDedcV-64t71wL3p5awhvZ11pA_uUV9nI2yGrbAddiK-C_O7kbcX6-8j3Z1_ULsf-9iPPvuxlwOkPca20AqaQxPkNERufaiDuuqor4Q-5dCvJPoWxfMrgDXyYK2c8DtkdbaQTIhnwDNKQX4y6hz0SnaOk1TnAuI3SGbnAfJekN_wrmTHO5rTYfie0OgfjgfCIAbSg4N4BshGcznZIRfNgc_6704-ms35k2bGZyKjU5CmYkzGuePkpwHMJeFznIi8BHxe0qEm3skBmWmMk0yjnAQa4URRn-OlXqzpcQg1sQcD77fiXCIi9vojuJZ8DM4ir4LDyeNgV3I72JRcDNYn54K1yalgdXI0WJUcCFYie2B7sCLZiHFNsDJZEaxClmBuQbAamYu8mcGaZGqwFpmEunHBFqRNsAMpFuxJ0gf7k5-BIeRyYDhZFxhFhgdGksZQCypCSSgAOSEz5oMQHxhNojCGIeYBA1TESGAsEQJTyE__NIwziByYTVhgLgkJzCd6YBExA0uIFVhGfIHlv4QFVpBwiAisJJEQFVgFq0l0YA2JCawjsYH1JC6wEettIukCW2AbSQhsJ-kDOzDuRHwXcnYjdzfq9qDPHvTbg77bSWhgM-FQ_96_mjz2LyPX_fgc--eSA_4ZZJt_IlnuH0Vm-AeRUf7epLe_C2nvb0ca
-JuRSv56pIi_Fsnrr0F-91clGfxVSJK_MonBaONc81cnkr8ueZHUmFxKakH2JLUjy5I6kwlJPUmvpP6kWRLuG1RIGkXKQ7mk0TCGlE0aC-NImaTx_5kIk2Ay4lN-KZc09ZfySfNJk6SVpHvSJjImaTdZmHSIbEs6SU4nXSAPky6TH0lXiOy_SkL914jbf4OE-2-RWP9dkuh_SBz_M-z5Ocnof0ky-V-RzP438A4-wCf4Al_hO-Z_Io-naX6BpvpFmuKX8PeCTIOQ3k9ojJ_SMHBDKFDgMfctiaNPk76Sq0kfyNGk12Rr0lOyNOk-mZJ0kwzB_v5OOkXqJR0gxZK2k0xJa0l40mLCJ80kTxLHkzOJQ8jWxAFkdWJfsjCxN5me2JOMSexBBiV2J92hPTSBAhADX9J3J-dhDYxI34M0hYKQAhZ8S-hJ7sExWJ_Qi0yH_gm9SeeEPqRFQl9SO6EfKZ_QnxRKGEByJAwkqQmDSFzCYBIGRsIQQhKGkh_phpL36YaR53APrqYbTg7AGpgOg6A91IKimM8MftREgSvdECKnG0w-xw8iL-IHkjvxA8jF-P7kHJyO70dOwNH4vuQwHIB9sDu-D5ke34v8Hd-TVI7vRjLHdyFGfEfyLK49ORTXhiyIa00mxrUiA-Naks5xLUjTuGakWlxTUiyuMckZ15Akx9UnUXH1SGhcXfI9Fu9ibB1yA07C7tjaZHVsLbIKVsTWJMtja5ClsdXJElgcW40sjMV3AsYFv46r_7IIOf9ajPwl_1mK-mWw_FefWmTlfz1Xo_-a2KZkW2xbcjC2Mzkb24Pciu2HPQwmX2NHEBY3nnjjJsBEYsdNIr64yb-ExU2Bqf-ZhtgMzM9E3ixixc0hHnDHzSUuMOJmEwFz72NnkEexU8mV2MnkeOx4XNsYsi52OPban4yL7UZ6x_5FWsU2I9VxD4rEViZZY0uSdLH5iSv2D6LG5iBy7G_kZ0xm8jkmA3kXk0xexPjJ45gEcjcmnFyI8ZDDMaFkWwwjK2IkMjNGJKNieNIb2sYIpAQkIsbBlWiRbIDR0RJpDoWiZZIULRAazZHHUd_kI1Gf5eVR7-WRUa_lNlEv5HJRz-XCUc_k3FFP5UxRj2V_1CM5Kuqh7I66L7Ooe_L3yNvyg8ib8qnIa_KWyMvy3MiL8rDIc3KHyNNyrcgTcpHIw7I_cr_MInfLjyO2y0ciNslLI9bJwyJWyi0jlsolI5bIhSIWy3_Ab5AGSRAbsUj2gQEsYqHMwafwhfKr8AXy4_D58m24Ej5XPhM-S_4nfIa8MXyavCh8qjwlfIo8LHyy3CN8ktw6fKJcN3y8XCp8rJwzfLTsDx8pW-HDZD58sPwibKB8NayffCisp7wsrKs8Iqyj3DasrVwhrIWcLayxHBZWX_7qqy1f99WUT_pqyHtgHcyHiTAI_sZcC2gM9Xy15Fq-OnJVX125gq-eXMbXQC7uayQX9jWV8_haytl9beVMvo5yiq-r7Pf1kdP7BsvxvjFyrG-qHOObL0f5VsiRvo1yuG-3HOY7LNu-s7LluyZ7fB9l3WcSxZdMJF9hwvnqkq92N_LBnkBe26vJc_sgeWzfJPftD-S2rdPrdhK9Yv9BL9iV6Bm7FT1hd6bH7T70qD2cHrYn0oP2bLrfXkb32RvoHnsX3Wnvgb10h_0P3W7vp1vtA3SLfZBugo2wAdYhthZzq5GzCrkrULMctcvsnXSpvZkustfQBeg5355P59kz6Fx7EozG8RDE6tEldk660nbT9fYTstXeS3bbU8lB-y9ywi5JLtg5yRU7QG7YNvYvkXv2G_mhfUt-bJ-Qn9nb5Zf2Ftggv7LXyK_tFbAUx4sQmy8_t-fKj-AB3LPnybcRu2EvkK_ZC-XL9mL5gr1EPmevlI-i_h97m7zD3idvto_K6-xz8ir7urzcfiAvxpoz7Xgyzs5LBtk1SVf7b9Ia97auvZaUt0-QAvYl8od9l_xmvyAZ7U8kaAs0na3RSNtHLTueana6X0LtBBoCqp2eKsCA_pJACfJkO5aKdgwV7CiIpLwdAeGgIOcz0e3HxLIvk0j7MIm3t5CAvYRksKeQbPYQkht7KmA3I8Xs6qSsXZxUxj2rZTukoR1Bmtvh_wkDH9ikme0lTW3rlya2hzSGRv9pCA2gPtSDuqipgT5V7BhcbzwpbSdinQApZCeTfHYGkuuXjCQnZIff4TfIBll_SSNZ7FSSGfmZ7CAEcJ-SIBH7T48xFvMRqPGSHLYL1xJC8tqE_GkLWOO7XNT-LBe3P8jF8NyL2S_kIvZTuZD9WM5vP5TzQE7Iaj-S0xALQoL9RI6GMOS5IRRUUBCjICNHRL6AOg5-eB_88t17X_7mvQd34Y781Xv7P7fgJtyA63AN81fhyi_fvRdlgvfFsM9gzZNyvH1Mduwj2NNB-Q97v1wY71QJe69czt4jV7F3yTXtnXJ9e4fcBO9uK3ur3B462JvlTvYmubO9Uf4b72JXe53cDe9zd3u13MNeBStgGSyBRYgvwPx85M1D_izUT5Nb25PkZvY4uYE9Sq5tD5er2oPl8vYAuZTdQc5k15e9djn5izevfNObIv_jjZCXeKk8yvtW6uC9L9X3XpDKeg9Keb2bpDTvYinGO0nSvYOkH1Yn6YXVWnpgNZRuWjWkS1Y56axVRDpu5ZaOWJmlA1aStN9KhGTpqJVROmP9Jl22ciE3H2oKS8-sktJbq7z0yeosRXgno_8WqaH3kjTM-0Fa6zXlq95UWbILyxnskniOFfBcq8tl7LpyNbuJ3NBujWvqgOvrJveze8lD7T7yWLufPMXuL8-GxXZffEb7yBvtHvJOu7u8x-4q77e7yIfszvIxu6N80v5LPmO3w2e8DT7rFWTFl0PO6YvD9zGVp_teSid8F6Sfvp1SprAFUv2w2VKLsOlSh7ApUvewidKAsHHSyLCx0uSw0dKcsH__L-n_5wEpYDwghaAYlDLuk_JQFWob90gj4w5pYVwnfYyrZJJxmawwLpF9xkVyGV6C7LpIIiEnVIXOMBHWw1nXJfIGXOZlkmheJDnM86SUeZrUM0-QjuZRMtg8SKab-8lq2GDuI1vNPWSnuZPsNbeRA-ZmcthcT46Zq8lJcyE5b84gV81x5LY5hDw0e5HnZkfy1mxBPpv1yE-zPKHuAiTUnZWY7kTidtvEchOM72WX-54c4j4oC-4l8hdzuPzWbC0_NcvK98zM8nXTki-YH6WT5hvphPlcOm4-lo6a96Qj5k3psHlVOmRekA6ap-GwdMDcC1thHeLLkLMA-TOlU-Yk6TxcMCdKF80JMF669Ms46bI5VrpijoHu0mOzjfTarC99NitLX83i0nczl_TFTJE-mm7EDemVGSK9NKn0whSl5yYnPTO_iU_NT-IT87342Lwu3jL3i5fNleIZc4J4zOwh7jcbibvNUuI2M6u40UwWN5gJ4lozUlxtWuJyM1RcYsrifPOHMMv8KEwxXwhjzHvCUPOK0Nc8JXQ39wsdzW1Ca3O10MRcKNQ15wq1zJlCDXOqUNWcKFQyxwrlzZFCWXOYUMocJBQ3-wtFzX5CQbOPkB9ym72F7Bizmn2FjJhLQ45jDhWSzBFCOnO0EGuOEyLRx2dOETzmdMFlLhJ4c63w1rVDuOc6KJx3nRL2uy4LG1y3hQWuR8J412NhLIyGkTAchsIQzA1yPRQGuu4L_V13hH6uW3Adx1eFAagf5LqInPPCMNcZ1JxC7Qn0OIZeR9DzkDDRdUCY7NonTP1lL-yB3bALdsKOX6a4tiNvG_K3ChNcW4Rxrs3CGBjt2oSem9B7s9AGYznXRiGLa51gu1YLn4wVwhVjibDDWCjMMuYLQ405QgdjplDbmCYUNSYLmY0JQpQxVqDGKOG1PlJ4qI8QbujDhXP6MOGoPlTYA5v1IcJKfbAwXx8kTMY4ArG-yOuijxFa6ZOEhvpMobq-UCinrxcK6DuFzPpBIZ1-UnDpF4Sf2lXhmXZLuKLdFQ5q94Xt2kNhrfZYWKw9FWZqz4Vx2mthiPZO6KV9Fjpp34Q22g-hicaJdaEqlNN-CsUQ-xNzObUvQmbtkxDU3gvx2lshHLUu7aXA0Odn6FPh
Y-gT4T28DX0svIaXoY-E5_AMnuD8ETxA3t3QZ8Lt0OfCjdAXwrXQV8KV0DfCpdB3wgU4H_oBPsEX-AY_EOfEC6GCeDE0RLwVaomPQqPF16FJ4ufQDKKgZRdVLb_o0YqLUVopMVYrKyZo5UW_VlFM1qqIGbWqYlatuphDqyH-odUWC2t1xdJafbGy1lCsozUWm2hNxLZaM7GL1lzso7UUJ2htxCVaO3GH9pd4Wuso3te6iJ-1rqKm9xDj9J6io_cWs-h9xT_0_mJhfZBYRh8qVtVHiPX00WJzfZzYXp8kdtGniz31uWJffbE4SF8lDtU3iiP0neIo_aA4Rj-F8bI4Ur8lDtEfiQP058h9i5r3Yhv9g9hC_yg2hnr6J7EWVNU_ixWgNBSHHPoXMQjhwOCT9kV8BBe1r-JB2Ae7Ybv2TdwM67Xv4hrth7hC-4nr4qTFGi8t1ARpgSZJ8zUizdOoNFdTpDlaCEYd3IjZmAtHTjRy46VFWnrUBaQlWn5pnVZdwr2RDmrDpVPaAumKtlO6q12UnmuvpQ8aL3_TTJnX08lEzyyH6AVkl15BtvSGcrjeUY7Ru8lxel85Xh8sJ-ij5PT6BDlJny4H9LlyUF8iJ-u75cz6RTmH_kLOq8ukoB5NiulZSQm9JCmtN4TG0BSaQ0toTcrobaE9Kav_BV1IOb07qaj3IlX0vqSG3p_U0QeQhtAMx60R66r3IH2QNxj5Q_VWZAR6DtfrkmF6NTII6_TS85DuekbSRU9HOusW6YR9dNI_yp30x3Ac1sh9se-Rei95vt5U3qpXky_rJeRPenE52igm5zYqyFWNWnIHo5U8zOgpzzXGyWuNxfI-Y5d81LgonzdeyBcMiVwyIsgZIwM5bvxJ9hiVyQajCZlv_IXfzl5kmDGM9DQmknbGHNLQWEoqGetJEWMb-d3YSTIbe0iqsY8EjIMkwThCYozjJNw4RbzGOeICw7hAdPzeavgNDsVvcSh-k0OMm3CLqMZtjHcwdxd5d5F_j7jx-22BF3z4XY-EWEiAAKRCFshp_O_3v4CRV2JqXikENDWP5AIP2OofUjhEQex_4hCPR146SFDzSenV_FLiLwVwXAiKQDEogflSUBq5ZVBTUYpQq0lutRbWqS9JahPpu9JC-qC0lV4oHaSHSifpvtJFuqP8Ld1Sukk3lB7SVaWndFnpLV1U-krnlIHSSWWYdEwZLR1WJkiHlKkwSzqizEdssXRaWfLLGWWpdFZZhvx_LZfOwwVlBXqsR-_t0lPlH-m9ckL6plzEHu5Iqvoc1_tZslRe9qlUjlI1OU415STVK6eoYXIWNVLOocbI-dV4uYSaTq6oJsi1MTaBtmqs_LcaJfdVffIw1ZAnq6q8QJXktei1W_0uHVe_SdfUL9IT9av0Gb7BD-BDvkpSyBeJggpayGfJFfJGSgt5KZUMeS61CHkmDQl5Ki2Ggzi-H_JEkkIfS_7QV1KR0I9S41BZ7hvqkWeF-uXNobnl06GV5YehdeSXoU3kj6Ft5J-hHWWmdZPdWk85Susr-7X-chbIBr9DDsgJuSEP5IM_oajWRy6l9ZIroLaK1kmuobWTa2ktZXynyrW12lAF52XkmloRzOWTq2vZ5WpaJgjKVbUAJOE4PeIJmI9HXhxqYlEfK9eF-jhvCI0x10RLJzdDbnMtUW6p-cGRW2lpchv0a6tlk9tpOeT2Wm7IJ_-lFYTicges3UGrJHfUakA9aAwt5U5ae-gmd9b6yV21YXJPbYzcT5skD9GmymO0mfJkbbY8V5sjL9fmypu0efIebb58TFsgX4Db2kL5qbZI_gCfcfwVcz-Qx-mzZUGfAVNlUZ8MAxHvgJwG8jutnPwS-3qK_d7XouVbWqh8RfskndPuSce1U9IBbbu0U1sibdImSKu0PviebS3N1upL07Uq0iSthDRWyyeN0LJJg7Sg1FeLkXpoHqkzvqc74ju7nSZLrfBd3hTf7Q3xPV8b3_vV8FtQQfsgxmjPxSeh98WNoVfEfqGnxDKhB8TI0G3io5B14vqQ1eK8kBXi2JBlYp-QxWLbkAVinZB5YumQ2eIfITPFlJBpohEySXyrjhUvqiPErepgcabaR-yrdhMbqx3F4moLMUFtIH5TaojnlYriCqWkOFApItZW8ou_KXlEXcktfmM5xCfsN_ESyyweYGniBhYU57FEcQyLF3uxOLErixE7sGixDYsUm7FwsSHzibWZV6zGLLECc4ulmCkWYS4xP8bcOP8d8ayYz4TcTKjLyNKBX8zAkiEjZIMciOXBfH4oJGZhRcVsrARqS4s5WDn0qSjmZZXFP1lNsQRrIFZizcQ6rI3YlHUU27NuYnfWWxzIBmCPI8UFbIq4mc0Xj7LV4nW2XXzFDou8ckH0KPfEROWpmKa8EX9XPov5FE4qphCpvKJJNRRLaqRESK2VJKm3kiqNVbJKC5Ts0mYlt3RUySPdVPJKb5X_fX8y9TEpZz4mJaGw-YTkheyQ0XxKAuYzEmu-ID7zDSHmO_Le9YHcc33Ev5M-kz2wGmbBSOgKjaAc_AFB8AIPz43P5BocM76Q7cZXstz4RqYbP_D7wtFuhkhbGDKtD1UNQssYlBaC3JAZAgajseAGAp91Rp_rCr0F5-CQrtJtsFEPoWv1ULpC1-gS3aDzdRedrbvpNN2ik3SbjtUj6Cg9hg7XE-hQ3U-H6CmQCcdZ6Qg9F52oF6TT9VJ0jl4ZtXXpIr05Xax3hN44HkEX6hPpXH0WnaUvoJP1Zei3kg7W19Ce0BZaQwtoCo2gPtSBmlBNX0WLYsyhr6eOvo3G6HupqR-jRL9Iv2r36RvtATyir7Un9JX2DF7AK5y_gbeYewfv6TvtA32vfaQftU_0M3zVPtPv8BN4_QsVQQYK-JuMqvpnGgq6_o6m09_Q3_SXtLj-gtbWn9P2-jM6UH9Kp-pP6Er9IT2s36d39Tv0h36Lhhs3aBbjOi1tXKPNMPaHIcZVOsK4Qscal-hE4wKdapylM4yTdI5xlM43DtDFxj66wthN1xq76CZjJ90B-FuDHkLshLGXXjb203vGIfrKOEK_GscpcZ2ipussjXJdoH7XJZrmukKzuq7RnK4bNL_rFi3iukNLu-7Riq4HtLrrEa0PTaGN6yHt6LpPu7lu0z7IHYjaYegzynWCjncdpvj3E53u2klnu7bQ-a51dLFrJV3uWk5XuZbQta6FdINrPt3kmku3umbRna4ZdI9rGv3HNfWX_XAADsJhOAJHMX_UNZ0ec82kx1FzwjWHnnTNo6fQ5zT6nXYtglWIb0L-TtQfoHuxl12u83Sb6zrWuk_XuR7TNa5n8Are4vwDXe_6hLmv2Md37OM73e36gbqf2AfHDsBBF88OuwR2FI67ZHbeRdk1F2P3MD7F-RvEP6Pmp-sjlcznNNR8SL3mHRpt3qR-8xrNBLmgEJQ1b9CG5m3axbxPh5tP6CzzBV1nvqMHzC_0ssmxZybPXpoie2US9sZU2FszFAxwg8Vem1HISc8eminstpmVXTNzswtmQXbaLMGOmhXYAbMy-8eszvaZtdlesx40wnEzxFphri07ZHZlp8w-7JI5BPUj2RNzHHtnjmc_zYksxD2e-dzjWIx7LEvvHsOS3aNYZvdIlt09guV1D2OFoKR7KKvoHsJquAezBu5BrDm0h67ugawPDIEROB-N-fHInYjaKe7RbCp6T3NPwTgT53MwLsD5YjbDvYzNcq9kc92r2QL3GrbYvZFtcG9je9y72Qn3fnbFfYQ9dJ9kb93nGOe5zEJBAx0McIEJbs8l5vnlIvN6LjCf5zwL85xjEZ6zLMpzmkV7TrEYz0k4xmI9h-EA7IPdsBO2wWbML2bhnknoMwhrdGKKpzGTPJXZD3ch9smdjb1xp2dP3W52z82xG-4X9JL7Kj3tPkyPuTfRg-75dK97Kt3tHk23uwfSLe4edL27A13lbkUXuxvR2e46dKK7Nh3nrkFHu6vREe7KdKi7Ih3kLkcHuEvTvu4StLe7AO3qzkM7uLPTVu6stLE7A63jTqFV3EFaxp1Ei7jjaDZ3OE1we6jp1ugPk9BnJkevmJ_JIfMt2Wi-JMvM52Q2fjPG47djMH5L
ukNrqGv-7_elnDmH7k-eRc8lz6R3k6fTN8nTKJcyhRopk2l0yiSanDKB5oACKeNpqZRxtDLUTRlLm8Ff0B0GpoyhM2EjnIAH8APs1DE0DQpDxdTRtH7qKNoudQTtlTqMjkgdRKel9qdLUnvRjald6PHUtvRealP6NbUeNdOq00BaeZo3rQStnFaAtkrLQ3um_UZHpWWgs9IS6aq0KLozzUWPpUn0StoH8iDtNXmS9pS8SHtA3qTdIu_TrpCPaWfJ57Tj5GvaAdhFvqVtxriWfElbTj6lLSQf0mYjdxp5mTaRPE4bRC6ldSUH01qRDWkNyNy0qmRUWjnSNa0YaZxWiJRJK0DypuUnGdPykXiM7rQ_iYj4-9Ri5EFqWXIxtQo5nFqTbEutR1akNiIzU5uRUamtSO_UtqRdantSP7UzKZLajSSn9iKu1L7kXcoAcjllMNmRMozMSRlJBkIf6A6dU0aRv6A1NEsZTRqmjCF1UyaQUimTSc6UqcSfMo1YKdMJnzKDPE-eQa7AQdiaPJMsT55FZiXPIWOT55EByQtJ5-QlpHnyclIreSWpnLyGlE1eT0okbyGFk3eSP5P3kbzJh0nu5NMkV_JlkiP5Dsme_IT8lvyWZEv-SrIkSzRzcijNlOylGZLT0dTkDNRJzk2TkovS-OSKNDK5DvUkN6MhyX9RPrkj_el0pt-dv-lXpzv94vSin50-GPvDIPrNGYy5ofSHM4xyycORP4KKICePpBSU5NE0LnkczZ48gZZNnkSbJE-lvfAuTsI7uTL53_fzX835gq66fAFXFSjF_-kqwOd35YSMfD6Xn8_riub_cHn53C6Nz-GS-N9d37ksrvdcBtdLLuh6xKV33eWiXNc4t-ssp7iOcpxrL_fB2Mo9N9Zxd43l3GVjEXccjhgLuUOwH_bCLsS2G4u5rcZSbrOxjNtorODWG6u5dcZabq2xgVtjbOZWG9u4VcZOOADHcX4ec1e5DcYdbovxiNtpvOD2GW-5w8Z7rPGJO2184c4b37DmT-66wfN3DJF_YMj8E0PhXxuh_HtD5z8bbv6L4eW_GREY43Ae5D8Yafw7Iwv_1vidf2PkwpgPCiK_KP_RKIm8cvwPoxLPu6rxsqs2z1z1-VBXE97lasF7XG14n6sttIP28Bd04O1fOkIn3uvq_Ivl6oL8v3n3f0xXV_ToyhuIS8j_YrTBPpvxj436_G2jOn_FKM-fNYrxx7GXI0Ye_qCRnf_HyMzvMVL4nUYSvw3734zrWI9rWmWo_FJD4BfgHsw23nBTjSfcBNyn0cYVbiju20DjDNfHOMl1h87GCa4dxpbGKa6xcZara5zj6iCnlnGBq2Fc5Kobl7hqqKuCe13ZuP5LJeMmxluI3eaqGncxfw-597maxgOuNp5FHahnPOYaYN1GxlP0fcY1NZ5zzfGMWhgvsdZrrhWeVWvjHXyAT_AFvsI3zP1Azk_kcnwzPLumuJbGeH4NoQHUNSS-FlSHKlARsXJQBnklkV8EtQWM71we9MuJvtmMj1wmvBepuBcO9hOPPYcZ1zgD10qNY9xP_R_ug76de6Gv5x7oa7i7-krutr6Mu6kv5q7r87mr-hzuij6Du6RP5S7qE7nz-ljunD6KO6sP487og6Afd1rvzZ3Su3Mn9MbcAb0St1UvyK3Us3Oz9BRulJ6e665HcU31CK6cHs6VwlgU5wX1GC6vHs_lwvzveoDLitws-u9cBv1PLkUvxQX0qlyi3oBL0Ftz8XpXLlYfyMXpI2Acl06fgrmZXFCfy6XqC1C3mMuhL-Hy60u54lARx7X1RVwTzLXF_rtg_32w9yGoHa6P5kajz3h9KDcJ-5-m9-dmYv9z9R7cwv8sgsWwBJbCMlj-Sy9uBXJX6X251bjuNfoAbi16rNMHwxAYgfMxiI_H_GTcg2nIn4X6ueizEP2WoO9yWAVrcL4O8Q3ouxE9N6F2M7dB38Jt1rdy2_BMdug7uF36Lm63vpfbq-_n9ugHcXyY26kfxdxx3OeTyD2FmjOoPYs1L2Lvl3E9V3F9V7lh-jVc91Vc_xWutX6Ja4T5Wvp5rjJyS6OmCGrz6ie47PoxLqN-BPfzEO71fi5C38N5sL6OPTHsU8I95XENP7Wp3HdtHPdZG8691wZxr7S-3FOtJ3df68bd0LpwF7RO3EntL-6Q1o7bo7XhtmgtubVac26Z1pSbpzXmpmuNuMkwHkbjfLjWhBuM-QHI66e15fqiTy-tH9dVG8Z11EZzrbWJXBNtGldHm8VV0eZxpbUFXDFtMVdYW84V1FZzBbQN3J_aVtiF43-4QtppzF_mKmi3uVraXa6Z9oDrgLGPdosboV3gJmlnuanaKW6mdoybox3i5qNmkbaHW6rt4FZoW7jV2kZunbaW26itwt6Xcdu1RdwubT63T5vNHdBmcIe16dwROArHsK_jcAJOwqlfZnCntZncGeSf1eZy57Dn89jzBW0hLILliK3B3AbkbUX-TtTvRa-D6HkM_U_h3p3HeAXn1zF3G3l30eM-d0W7x93E8UPtDvcC1_NBu4lncYOT8YxD8YwtPONIiIZYnMchnk6_zqXXb3BJ-k3Or9_C873NJet34QE85hz9KWIvMPcan6e3yH-P2o9clP6ZC9O_cl79O-fWf-I94PkQXeSZLvOSznhBD-U53eB_am7w4jwM8UjMJ_K2noFPr-fkM-kF-bx6ab6UXpWvodfnm-kt-c56K76L3hraQFv-b70dtIe__tMBOR35TnonvoPemW-vd-HbQRtoDS0Ra465JshrhPz6qK-LPrXQswZ6V9ObYL36_J96Tf53vTKfopfj4_US2FNhXtXzYa95-W_wScvDv8P4SsvPP9MK8I-1QvwDrRh_XyvJ39XK8ne0ivxtrSp_S6vJ39Tq8Ne1-vw1rRF_WWvNn9I688e1PvwRbRhM4A9rs_mj2lL-mLYeNuB4I-KbEd_CH9K28ge0bfx-bTu_T9vB74U9sBt2IbYTdmB-O2xD7jZtE78FfTZpq_kN2gp-Hfqu0Rbxq7R5_Eqss1ybwi_RxvLzteH8bG0gP13rzU_SuvFjtE78MK09P0Bry_fFHntqrfhuWgu-s9ac76A149tqTfmW0FRrwjfEWAex6lpLvrLWhi-v_cWXQX0JrStfXOvPF9VG8EW0iXwhrFcI6xfS1vGFsd8i2gHMHeeLaWf5ktplvqx2na-o3eGraffR7xHfSHvMt4JO2hO-NwyBcTAdFsIq2IL5ncjdqz3kD2oPcL_u8Xi_-fNwBW5g_ifmYvUHfD79Dp7tTb6Pfo2fo1_m92C8A_fhITyB5_AK3sIH-Kxf53-AYNzgqXGLDzHu8rrxgDeNJ7zHeMVbxht4y3uN97xtfOTDjE98uPGZjzS-8FHGVz7G-M77DU7IaIhCTkMSChhEKGlQoTLUwTl-j4VOxk--P_LGGN_4mahZDlvgAJyDW-j3FL0_Yi3e9YIPcT3E3zu3-GjXRT7RdZ4PuM7wjuskn-o6xmd0HeEzuw7y2Vz_8Nlde_icrh18Htdm_M25ji_kWskXdi3hi7rm8cVcM2ESjMX5cL6IayDm-iCnG3TE361t8Ddr8_-ngv-XVeSjspI8VVaQW8pyckFZRo7DfmUp2aEsIRuURWSlMouMUWaSDsoMUkWZTXIp80ksckRlLXnItpFjbD9ZzU6TCew66cqekbrsKynCQmkGFkNtlon-pL_RLzQ3_Uj_pO9oUfqWlqZvaCWMNXFeH_Em9BNtTr_SVvQ7bU051oaKQEBlLanOmlOTNaUWa0R9rAGNYPVoNMSxujQ9q08DrCFNw1xWyAF5cV4QecUxVwY5lVgN2oRVpl1ZeTqClaazWHG6lhWh-1lBeonlo0_ZH_QHy0FdSjaaoGSk2ZRkWlRJotWVeNpKiaa9FS-dpeh0l0LpTYWjP5XPJFZ9Q_KoT0lt9R7pqd4k49RrZLF6hWxXL5PT6iXyAONXcIVcJYkQDLlGUiFTyHWSDXJAbsiHWEEoHHKFFA25TEqEXCSlQs6TMiFnSbmQU6R8yAlSIeQoqRhykFQK2Qe7SOWQbbAJ1sNqxGaQsiFDSemQzqhvSIqHlIM8kEyKhYSBAQT9
f8hFQ97DM7lIyD25cMhVuVDIWblgyCH5z5Cd8h8h6-XsISvkTCELZSdkjhwfMkP2hUyTQ0Mmyy_UifIpdby8DuMEdZLcRZ0h11DnynnUFXK8uloOUzfILnWLTNWd8k9ln_xROSS_VI7LD5Wz8k3lqnxWuSsfVJ7K25V38mrlu7xAkckURScjFR_pq4STXkoU6anEkR5KeghACmIZSG8lE-mv_E5GKHnIJKUgmaMUJ0uVsmS9UonsVGqQQ0o9ckZpTK4qLcg9pR15oXQmH5Qe5KfSnxB1GNHV8cSrTiS2Opn41GkkXJ1BItTZMI9EqgtgMSzD-QrMrULOamKpa4gbDAgFBWTEBfihrCZflVXks_Lv52YV1vrf-FGZJGwx5wjbzOXCDnOzsMv8R9hjnhb2mTeEA-ZT4ZD5SThqxohnzYLiNbO5-MAcLb4yN4pfzKui7MY_c9x-KdIdlKLcKVK0O4MU484kxbqzSnHu36R4dw4pwZ1bSu_OJyW5C0pBdxEpxV1MyuguKWV1l5JyQB4o4C4hlXIXl6q6i0r13YWllu5CUmd3AamPO780DLUT3Xmk-eiz1p1T2u3OLp1A7-vuLNJTrPUZa1JPmhTqSZVc4PUkSxEeR4rxBKUET0AKePxSiie9lN0TJ-X1REuFPD6pmMctlfSowEulPO_FEp4rYhHPbrGAZ6GY1zNMzOVpJ2b3VBazeXKLWTzxIImpngeC4zks-D3LhCTPSCG9py2Uh2xCgiczZBDSeVIgKMR7_EKcJ70Q64kXYjyxQrQnWoj0RArhngjB5wkTvB6f4PF4BZfHEjSPRwgBBajHLRCMEiBB4DD_w20J39wxwg13orDLnSzMdmcU-rizCvXdvwsF3DmFBHcuQQIefpi5hK9mbuETvIe35h_CK3hu5hXumoWEy2Zx4ZRZXjhsVhf2mg2EnWYrYavZBc-_K_SA3tAfBsNwGAOT_vNZehP8JEnOB8l23kp-56WUw3kqFXfuSzWcm1JL57zU3Tkr9XZOSf2d49Jg54g03DkojXL2SeOc3dJEZ4c0xdkszXTWSHOcZdI8Z74035kJk6S5zhhpljNcmuYMliY5_ZHfC3XdpGFOZ2mQ00Hq67SVejqtpL-dBlILp7pU0yknlXaKSHmdPFIm5zcpnZMqeZxE7C1G-hAMlx4FLely0JSOBHVpWzBUWh4MkWYEVWlEkEntgrJUMShI2YM_xcjgN_Fn4It4J_BRPABLAh_EcYF3Yo_AG7FJ4IVYPvBUzB14JCYF7omuwG3xi_-2-N5_S3zpvyk-9t8Q7_mvizf818RLcNZ_VTzuvyyu818U5_gviKNwPhi5ffwvxf7-nziOk6b400lT_QnSNH-iNN3vl2b4g-BIM_0p0ix_mjTb_7s0359PWuAvKi30l8VxVWmuvw7mm6CutTTe_5c0yt9FGuLvIfXz95V6-AdJnf3Dpfb-MVJL_0SpsX-S1Mg_RWronyo18E-HmVJ9_2yYC_NgAWILMb8YeUuQv1Rq6l8mNfMvl1r4V6DHKqmTf43Uy79OGuzfII31b8ReN2M_W6WV_m3SJv9O6ZB_t3TZv1d66v9H-uY_IGmBQ1JM4IiUIXBcyhc4JVUKnJWaBS5IPQNXpHGB69LiwC1pe-CudDrwQHoQeCi9DTyW-OATSQ8-lSIhGHwm_QYFg8-lclAP2kHf4AtpbPClNDf4WlobfCPtDX6QzgQ_ShfgCt7DG3AHHgQ_S0_gRfDf9_Nfo5UHRjdordwz6im3jWrKFaO8csYoq-w3SiubMc6FGYhNMiooY41KynCjsjLIqKr0Maor3Y1aSmejtvKXUVdpazRQWhmNlRZGM6WZ0QraKU2Njhi7Ks2NHtAH-iM2SGliDFEaGsOUelDTGK4UN0Yo2Y2RShJYwCP2Uh-qXNcHKkf13spqvacyUe-hdMNxPb2vUlgfrKToIxS3Pl75pE1Q3miTlOfaVOWRNkO5p81RbmrzlavaYgX_9lLOaKuVE9p65Yi2RTmo7VD2aXuV3dpBZYd2TNmqnVY2apeUNdotZYX2SFmivVIWaZ-U-RqnztcUcKsLtVh1qZasLtGyQwGcl1HnadXVmVojdYrWVh2ndVJHa93VEVpfdYg2WB2ojVT7aePV3tpUtYc2S-2qzVO7aIvVv7UVOF6D2AbMbVb7a9uQv00dqW1VZ2ib1GXaenWLtlLdj1z8e1K9pk1QH6LfS_R9p3VTP2p_qZ-1luoXraH6VauFsRLOS6sftCKYz6--1nKpL7Rs6lMtg_pIc9T7Wnr1jhaj3tSi1BtaJMZw8IFXvaV5wK3e1ly_3IX7mon1TPUxPMXcc3iBvFearb5F7UctGmvGqT_Ql9f9qqQ7KtPT1BA9k2roWVS3nk31QjhE6VnVWMQS9Ixqkp6iOnpQzaAnqln0eDW7HqPm1iPUfLqtFtI9ajHdrRaHkrqploayUB7nFaEy5qvollpV94JPraaHQyRE4zwW4iBJrYQ1KmIfFfTfMObCeT7EC6o19KJqPb2E2lAvpTbWy6rN9ApqS72S2kavqrbXa6gd9FpqZ72u2k2vp_bUG6h9oD8MwvkwvY46Uq-pjtWrqRP1yupU1M5AjznotUAvri7Ri6jL9ULqaqyzBtbCOr2Auh42wEacb_qlkLoZuVv0YupW7GWbXlLdrpeGMlAOqmCuFuoaqKv0ZupSvQ36d8Q63bBef3WaPhCGqNP14Tgfqc7UR6uz9bHqPH0c8sapi2EZzlfqY7CPMdjDaKw9Gj1HofcodRfsxvle2If5_cg9gJpD-nj1sD5BPapPhEkwWT2mT4GpOJ4G02GGekSfh5rF6h59Jfqtx_VsxbXuVlfo-7H2UXWufh735546Xn-rjtP5kEm6ETJdjwhZqCeGrNaDIdv0tJDDemrIJXio-0Pe6elCeCMsJMTQQ7wGFxJhfFOjjI9qtPEWXqgxxmO4h-ObcFWNNM6p4cZx1WscUN3GbtUwtqghxlqVGstV0VigcsZc9Yc-S_2O_X7D3r_hWr7iur7hOr_jejljtCqADNQYo6rGWFUzxqkuY7zqMSag7wTVZ0zEGpPUCGMy9jIF605VY41parwxXU0HCZAeEiEJ8X_5IYC8IPL_5aDWQY9k9EpGz2T0T8Y6ycYw5PZFj67o2Q7X0wzr1cXaVXAtZXAtpbGnklAcx0WhsBpqFMQeC6i68Sf2mV81wQMW2IiFQQTmo5AXDbGoiTOKYK9FsU5x7LUE9loK65bGHiupaUZNNbPRUP3NaKHmMP5S_zC6q3mN_mp-Y4RaAPssiL0XNmaoRY1ZakljjloWKkNNY7baELFWuO4OuMZuuK4-uI8DjaHqUNSPNLqpo40O6lijpTrOaKROMGqpE43K6mSsOwX7mWrkVacZmdXphl-dbUSq8wyXutiQ1RXGV2W98VrZZjxU_jGu4PfmtHLZOKzcMvYod40t-D1aCfNg9H9KKks9JZV1nhLKdk9xZb-nmHLCU0S56Cmo3PLkVx57_lDeeHIp7z05lc-e7Mo3z-8KZ2VTRCurQq0simplUnQrTQm3HCW95VcyWIlKTitBKWSlU8pBTSu90hSxltAOx50w1xXxXla80t-KVQZb0coIGGVFKGOsMGWcZSvjLY8y0TKVSZauTLZCMVIQ4AebaH1mE6x3bLz1io21nrIx1gM2yrrEhlqH2QBrG-ttrWDdrJmskzWatbX6sBbWX6yxhX_BWtlZWSuCFbK-0dzWdZrZ2kUdazZNZ_WhUVZPGml1h79phNUJ_qLhVltoRcOsFtRn1aNeqzp1WRVoqFWGylZx-tNTlH70FKYvPEXoPbgNN-Ea4pfhApz1FKOn4ISnDF3nqUineKrRXp46tKGnIS3uaU4zetpQr6cj_eruRN-6_6bP3d3pI3cfet89gN51D4exMB3ny-kT9w760n2CvnPfoJ_dL-kP908qelyMeeKY5snOvJ4yLNrThKX39GIpnoksq2cly-3Bv9A911lJz31W2vOclfN8YBU9P1hlD1GqeXSlpsdW6nhilPqeVKWJ5zellSev0h7PvSvegb54F0bivZji-d_7sdRTXYm1qyvp7WpKAFIgza6qZIIskA1-h8J2
ZaW0XVGpbJdRqtnFlRp2AaWqnRvnmZUydrJS3Ma7YUcp-WyvktvWUUOVzDanpNqfWNC-xDz2VvbVO53d9fZhh72N2CpvCTbOm4l19oaxat5QVtLLsTzedzSj9yFN8F6ltvcEVb276XdrLX1jzaf3rQn0sjWIHrO60F1Wc7rOqkkXWqXpFCsfHW7logOtbLSPlYF2t4K0s5VA21vRtLXlo80sN21ohdDalkKrWYRWsCgtBUUQ-9My6B-WTbNbkTSbFU-zWEk0k5VMM1qZaAbrd8gNf-K8Nv3N6or3ayJq1tJi1glaxnpMq1gyq2vF4V3MzNpbBVkXqzLraTVl_a2ubIg1Au_vLLzPa9hUazObbu1kM639bLZ1lM21zrD5eLcXWjfYYus-W4p3fqX1ha23RGWrpSr7LLdyFJ-X81akcgufoWdWnPIdny_dm6TEeh0lozdVye_NpJT3ZlUaeLMrHby5lP7evMo475_KPG9hZZ23mLLPW0o56y2r3PVWUN56KymfvZUVzq6iEDzLUDxjN_jw3KPs_z3_WLu72jmss9oxrL3aIayl2j6sido2rL7aJqym2iqsitoirJzaPKyw2jgst1ovLLNaMyyoVgqLU0uHhamFwlzqH2GKmiXssxIZ9kgRwi4oT3z7lTO-9coW33xljm-cMtjXT2nja6WU8VVRMvryK6YvoLy1XcoF-wPbal9jM-3drJ-9lnWyF7Cm9iRWwx7CStndWT67Ncts12WJdnkWZudj1E5lH70R7IGXsQve93S_9w7d4D1JF3h30PHetXSYdxHt651Ou3jH0DbegbSxtxut6W1Hy3sb06LewjToTcR7JdGn1l1y3NpDVluzyFirB-loVSdVrWqkilWFVLYqk4pWJVLBqkDKQRmrPCkNJa1ypATGYlAE8UJWRVIAeX8iPx_q8lmtyB9WX5LXmoTjZcjZSUpZp9DzDqlnvSVtrW-kiyXR3lYoHWxZdLQVRSdb6elsK4UusbLSNVYNetHqS39YS2h67ylawvuBtvNGs8negmyntwW77-3MXnv7s2_eMYzZM5nbXs6i8bny24dYRvsCy4l7WRqfvwZ2VqWLXU4ZZbdRFtjDlR02_q639ymv7EuK7HuiRPq-KZl8oWpxX6Ra3-dXu_myqhN8edQ1vsLqQV9p9YavivrOV1dVw5qrcWEd1WxhvdQSYcPUumEj1PphI9VGYaPUJtA8bLTaEmMbxNqFDcd7MxTvzxAYpHYKGwD9oA_0hH_fr389IpdCHpErcB1uwV14AI_hGbyETyEPCBd6j7DQW8QIvUbs0AskMvQkiQvdT9KHbiOB0LUkOXQxyRA6k2QJHU9-Dx1GcoX2IflCO5OCoe1IkdDmpHhog__Dfl0Hx5F8baJWV-XJLO6WulXdkmWBJbWkNjOPme0xMzMzMzMzMzOzx8we22MY85jGzMywr_Tzt7H3i70RN-6_u454IqsyzzmZWVVtVfHfjTq8olGVVzXK85pGSV7XKMwbGAV5Q6MAbwxNjN94MyM_bwGtoA20hfbo74jxzojtYhTi3ZDX3SjKexjFeE-jEu9jNOD9jLa8v9ELhsMU9C3kvYx1iN3AuxobkbcZ-Vt4J2Mr72Bs4-2M7ai9nbeGVtACfc0x1hQxTbCfRshpiNwGxipe21iO9S7h1YzFvApUMpZiH8t4BYz9jjnKonZp1CiJa1HC2M-LGYd5EeMEL2ScxjW4wH8zrsJNXsD4lxc2HmL8CS9lvEDuS1yLV7wG1DJe43q8wXxvcC3e4jq8xZreYn3vsPd32O873td4zwfBCBgHk2Em-rcaH_g54xN_ZnzlivmTx5qyKGAqopapi26mKYaYTjHJDBELTI9YZ3rFHjNcnDQjxBUzSjwwo8VzeAdfce6wIoVipRKWFSY8VqgIt9wiwgoWkZZTxFimiLV0EW-pwm8JkWAROCAIfT94rPWdx0AkpAIf-myMK5aM2ky8gDtwEes7ajrETqx1jfmVjzNf8W7mfV7PvMRLmUd5dnMTjzPncrc5lDOzN_9hdOCfjKb8rVGLPzd-54-MIvyukYv_Y6Tnl41EftGIxf4j-RkjjJ8yPPy44eJHDJ0fNATfaxD_w2B8lyHzHYaEa-Xgm2A9rMH5KliB8aWIW4z4hYbK5yF3jmHyWYaTzzDC-RjoBx0NN54PE8-CA_f_A5UynlAJ4x4VN26ivQIX0HeGyhgn6HfjCFU0DlA1Yy_VNPZQXWMnNTS2UzNjK7UyNlM7YyN1NtZTd2Mt9TJWU29jBfU1lsJi6mcsQDuX-hhzMDaLehozETeDuhrTqYsxjTpBB2MqtYe26GuB8UbGbMwxl2oY86iSsZDKoU5J1CuC-lkxV6yxhTyYm8E7fRPd09fTRX0lHdaX0i59EW3U59FyfTbN1afTZH0KjdQnUn99LHWFLtAZOkFH6KCPo_YpxlM7fQK11SdRG30ytdanwnRqpc-glvosmANzYT4sRP9iWIqY5YhfAauQuxY11qPWJtTeijm2Y65dmHMPddP3UXf9FPXVr9BA_T4N1d_QMP0nDdcNPlwP58P0BD5Iz8376WV4H70u76W3h0G8pz4FluF4BxyB07yvfon316_zofptPlr_l0_B_2lz9Id8FayHrbAbDsBR-BPOw5X_rUf_zSV5lHlJngaLzcvyetgDx-Ei-u7Ac3hnXpA_m-fkH-afssM6LpN1SBbWXlmztsu6tVk2rPWwGsfL0bdEVqxFMrcWyLI1X_5pzpU_mLNRZ6b8rzldvmZOkc-Zk-Vj5kR5rzlB3mKOkWeYI-Te5hC5vjlALmL2kf1mD1kzu8rPjY7yOaODfBIOwR9Ge3kbrIeVRjt5Ecw22sqTjDbyCKO13N9oJXc1WsptjBZyI6O5XNNoJpc3msqljSZycShkNJbzGY3knEZDOStkgCSjgWwadeU3ei35kl5N3q1Xkufrv8tD9FJyC72YXE4vLOfRC8oJen7Zo-eVHXpu-YWWQ76uZZOPa5nlrVpGebmWTsaXqDxaS5T7aPFyOy1WbqBFy5W01HJRzSdn1DxyKs0pc02T36gk_6M65BPqN2mL-lFaoL6TJqivpAHqc6mD-kRqoD6SKqgPpILqPSmTeleKUu9ILvWW5FBvSG-UK9K_yt_SReUv6ajyp7RdOS6tUA5Ls5R90lhlt9Rf2SZ1UjZKTZQ1UnVluVRKWSTlUxZIOZSFUiYcp1WWSgnKCilOWSfFKFukKOREIT9KOYXz81Is6icoNxF3V8qsPJRyKk-kAso7qZryXWqrkDxUMeQ5Soi8RfHKp5UI-b4SJf9Q4uQ4NUkurWaUO6jZ5alqPnm3WkS-o5bGfivJ6bRacnmtodxRaylP0TrI27Xu8lWtr_xNGyxH6cPlwvo4ubc-Td6iz5ef6ytkv7FJrmfskacbR-Wzxl-yYp6XfeZFOdH8W86FZ7EUns2a5hW5JfQ0r-H5vfrLlV8u_y8u_dJWvWC1Ua9YrdV_rFbqXXhgtVSfWC3UF1Zz9bXVTH1vNVU_Wo3Vz1ZD9atVX_1u1VV_WLXVIGcN1eGspkrOqqrsrIy2IpRHXzmMlVV_WqURVwrxxdUvVlHUKKS-swqor6z86nMrL-bIpT60cqj3rNTqSUtX11qflQnWc6WDdVupYF1RMlpnFcs6oTw1jyuP4J55TLkNN-CKeVT5G87BafOwss88omxG_3LzlDLH_EuZaF5RRph3lP7mc6WH-VnpYJLa0gxWG5qRai0zoFY2c6plzaJqMbOiWsBspOY0u6iZzKFqkjldTWOuVFOZu1WPeVo1zVsqmU_VIPOj-t2Qta-GE1JBgvbDyKoFmQU0bhbTVLOMppsVNcusoQWb9TS32USzzVZamNlBizC7alFmLy2N2U_zmwO1tOYQLZM5TMtujtDymKO0guZorTiUgYrmSK26OVyrg5iG5gCtmdlHa2l209qZ7bVOZkutm9lI62nW1vqYlbV-ZlltgFlUG4g1DDTzQA5tkJkZ0kECpNEGm5HgxrGqDTF_qMPMd-pI84k62rytjjcvq5Oxx-nmJnWhOV_dYI5R95n91AtmR_WB2VL9bjZUQ616akbc7_xWHbU07nkNaIrjTugb
gGdhrNVInYVnYxGekZV4VjbiudmB52cfnqOjeKZOW8nPV7JJbKKYyEaJ8WygGMt6iNGsrRjJGovhrLoYwsqIQawA5BMDWW7IIQawrJAZMkBa9CVCAmL8iI8Tw1gsctOgRgxqxYgxMAn9MxAzjyWJJSydWMUyig0si9iGertR9yQrKK6y4uIRKys-sQpCUBXhpWoigaqLXGjzQUEoCiWoqigD5RFTGapRJdGQyos2VEZ0pxJiEBUVY6iQmEG_icWUT6yjvGIjbKY8YivlEjsoh9hF2cQeyiL2UiZxgDKKg5RBHIYjcAyOw0n4E05jPNkZxP5HZsgizqLGWcqO4xwYzydOUWFxgkoht7w4inUepjqo21jsp5ZiH7XGXO0wZ0fM3Rlr6Cq2UXexhXqKTbCC-mCtA8VcGipm0RgxnSaJaTQTFoqptBI2wR44AmfhiphCd-EZvBeT6auYRA5lIgllPBnKGApWRlKoMpTClP4UobSleKU-ZVYqUX6lNJVRClEtJT-1VnJTXyUXTYSpMEvJSfOVHLREyU4rlGy0VslCG5VMtE0J0CElnv5SYuimEknPlFT0RQkjRfWSrdoUB37VQ0mqm9KqwZRBdVIm1aDMqkZZVQU4ZVNltEHwnWVRv7LM6ieWUf3AMqjvWDr1KUuj3mM-9SYz1etMUq-yD8o19kS5zm4qt9k55S77U7nPjikP2QHlCdujPGPblRdsk_KarVHesOXKO7ZIec_mKh_YDLRTcD4e_aOVV2y48pQNUS6wrsoB1lBZz35XFrGcyhQWo4xgqtKXvRYd2VXRnv0t2rHzoi07I9qwU6I1OyZasUOiJdsvWrA9sAt24nw7-rfCZsRtRPwG5K1H_nrUWSc6QRccd4MeGOsFvRE3iG3B72KrGMW24Te2VUzA-UT0T0L8JLYClsMyWAqLYAHMgeki-feZ7IXWx_tCGw2zvc-1VbDT-0w7AVe8T7WH3ifaBwjyPdCE71_N6bup2b4rWoTvnBbjO6nF-w5oSb4_tLS-HbAZ1mkB30r0LdX8voVanG8e4uZokb6ZWirfdM3nm6qF-iZpIfjWtfCdq-MbWPGN0H54B2vvvf20Z96e2l1vV-2qt6N21ttGO-ptqe3x1tameEtp7b05tDLeKC3Jq2iK97n6xD6nnrI3qRvstepqfJMvtxeri-x56jx7pjrTnqJOtcerE-zR6mh7pDrSHqEOt4epQ-2h6iB7iNof-tiD1Z72ILW7PVDtjLY9-lojpgVim-I7vzHyG9qT1Ub2BrW5fVptYz9RO9pC627HaX3sQtogu542wu6tjbfnaTPszdpi-4S21v5b-8O-o522H2j37CfaN_uZFo1rmQ5yQhH4HWpBU-gIfVI8_29e_DcdHBM9HR1jPJ0cwzydHQOgl6eLo6unq6O9p5ujlaeHo4mnp6Ohp4-jnqefo7ZngKOGZ7CjmmeYo7JnpKOiZ4yjvGeco5xnoqOsZ7KjjGeao7RnpqOUZw7Md5T0LIKTjgKe146snjApwVNQCvc0l0zPWOmne4v02n1duud-LN1yf5Kuurl8we2RT7vTyEfdGeX97vzyTncZebO7jrza3UZe7O4jz3aPlSe758qj3Wvlwe69cm_3Gbmz-5Lczn1Lbut-KLd2v5TbuD9BEGvvVlgnt4t1c3tZL3cEG-yOYWPcadg0dyxbgONV7ki22e1jO92hbI87hO11O9l-t8EOIu-wm9hRt8SOu3_IJ9135GvuQ_Jj91L5k3u4zD0tZI-nlBzjCcgZPLqc2_NAKuE5IFX1zJEaeXpIHTyVpX6eDNIYjybN9tx3rPBccazDNdjs-cOxw7Pescez0LEf1-qQZ6jjqKc7dIFOjiOe9uhr6zjgae3Y52mFuJaOnbAdx5vQt9bTxrESliBmvqedYzbip3mS79__F99otGXyMVYEn2Cl45OtPHymVYLPt6rwFVYDvtFqxfdabfgBqx0_bHXgx6xO_JTVhZ-xuvLzVnf-t9WDX7V68htWL34b7lm9-SN4ZvXhL-Gt1Zd_tIZyyzmExzoH81zOPryMsyuv52zB2znr8P7OsnycMw-f74zjK5xOvsn5iTY778IpWu3cSoucC2i8cxoNc46nPs7h1Mk5kFo4e1NdZ3eq5OxExZ3tKY-zFSU4W1Oosw3J6Htjdae71gA6b42iQ9ZU2mJNp03WDNpozaQN1mxaZ82htdY8WmPNp9XWQlplraHF1naabx2iWdYZmmZdo0nWfZpgvaaxVvL1SfaV_9A-89vaF35U-8ZXa0FissZEb00VTTRLlNPcIqcWIUzNL_5VM4mdah4xXi0imqplRV61qghW64oHSkNxTmkmdiutxTKlg5igdBO9lT6imTJIVFRGinzKaJFLGSOyKuNERmWCCCiThF-ZImKUaSK1MkOEKbNFsLJQ6MpyQcp6ISnbxE-xD47DeZxfhEuCKVcEV64JVbmB2H-EBcEQgvFsyilRVTkkuim7xAxlo9iJWteUeeIr5olQx4gc6lBRQe0nWqk9xBC1k5inthU71BbivNpIPFfriyCttgjRqot4rYrIpVUUZbTfRT2tjOiolRRDtOJiIszTiok1WlGxE47CRa2IuAMvtcLiE0h6IaHrBUUoROoFRKL-m8is5xd59XyioJ5bFNNziFJ6ZlFOTycq6Amikh4jquipRFXdhmBRWTfRp4ryOomyuiRK6j95Mf0HLwgF9O88P-TVv_HckFP_yrNDVsgMSRANPggGDQiC9OT7m6yZ9MRsIQVZzSUPJFpNpDxWQ6mcVUeqb1WTOljlpYFWKWm8VVSaZxWQ1lh5pd1WDumElUW6YmWQHlpJ0nv4YCVIHy2_9MmKlz5bsdIXKwaipK9WJKT-JQJ9qSAcMeGIDUOOD7nJvKjjld5ZtvQW3lihKV5bHumVZUg3LSH9aTmkndZPx3Lrm2OK9d0x0PrhaGdJUm2LsF4hFbRUKSv4IcxSJAN9P01Zem1K0lO4BzfhMvr-Mpl00iTpkMmlPbDNFNJ6U5FWmKq0yMT_V6YuTTUNaRwMN01pANoe0AFjLRHTEDm1UKOyGSSVNb85ipofHfnN144c5lNHZvOeI515w5FkXnT4zVOwD7bACpgLE2GYI8HsDe0diWYzqIec6o5MZkXUKOPIZ5Z0FDOLOcpBNahjFnc0hOZmCUdbjHUySzl6IK6vWdYx2CznGG6Wd4wxKzgmmJUcU80qjplmVcc81Ftk1nAsN2s6VqFdZ1ZzbDQrO7Zgju3I2Ykau1Fzl1nAscPM7dhmZnVsNdM5Npt-xEU71pthjrWmG7lOx0rTcCwzVccSUzgWmoTazDELpsEkk2N-jrVwrIs5Wpiyo54Z5Khifg8qbX4KKmi-D8oNWSG9-TEowfwSlMb8GRSJ2HDU9ZrBjlAz1OE2wx3BZqTDZcY6LDPBYWIthpnZoZuFHSrWLcwmDjK7OhiunWROdwThev40djq-G_vgCJyCv9B3CWPXHbJ528FxLzTzDeb46YjHfcxihksFzESpnJldqm0Wxr0sL3U3q0p9zZrSULOeNMZsIE0xG0tzzCbSUrOZtA62wV44CqfhIlyH2_DATP79JBsrN8Pf5ObuMXILaAmt3KPxd3g0_gaPxt_kUTBCbu8eJnd0D8bf6oFyV3d_ubu7r9zD3Uvu5e6Bv-Gl8Dc9TF6J94B97h3SBfdw6YG7qvTBHStxzyuH2_MCnjk8nifwyBHqeQD34V-H7bkD_zi8nqto_8b4eUeI5y-H03PGYXhOOxTPWQd5LjteuW85brgfOY67Xzk2uz855rsd0mi3KnVzh0iN3KFSbXeYVM2dWqqIOcu5E6XS7oxSSXd2qbg7H1SC5tAHJsIy2C2VcP-FmPtSKfdnxJtyWXeM_Ls7u1wR-6nsritXc3eQa7qHyLWx99p4b6iL61DPPVJugGvSENemMa5VU_d_rl8zd1ex2OgqpsNYo4sYAn2hK7RHX0toAvWM7qKW0UNUNXqLikZf8bsxUJQxhoiSxkhR3JgoihgzRUFjkchvrBJ5jU0il7FL5DAOiqzGSZHZ-BPOwFmRxTiHvgsim3FRZDcuIeYyYq-IPMZV5F5FjWuisHFdFIOSUMa4
gbluiCrGP6K2cVM0NG6JFsZt0c64izXeF72NR2Kg8QJrfyNmGR_EMuOT2GJ8FQeMb-KM8UNcN4KUR4ZDeQYvcfwWPho_xVfju_iJGMn8Krj5WWjmR-E0Pwi3-VZ4zdciwnwpos3nIs58IhLNByKTeU_kMu-IQlAKKpp3RU30NTIfilbmY9HBfCq6Ir4X8gYgfyjqjDbfiwmoOw1zLDK_iVXmd7EJxzsw317zjThoPhNHUeukeUxcMHeKy-Yqcc1cJC6Zs8Q5c6o4ZE4UW80xYjbMMEeLqeYoMRkmmCPFWHOEGAXDYag5VDQzB4mS5gARMPsJ0-wtXhk9xSXcs93Gf-7vYqOlyGY1EFmtWiKLVUVktiqIjFZZkd4qLRKtkiLOKi4iraLCtgoLp1VQCOs3EWTlE5_NvOK1mVs8MXOJu2Y2cdzMJNaa6cQkM0n0MONFXTONKGJG4hqlEpYZjmsZhuvqEx_hJTyC24ZXXIFzsN-wxQYjVCww3GKCESL6G8F4zpyivmGK8oaO50AX8YYmXPBV18QDOKfrYg_aZb8sxfkSWAyLYKFuiAUwH-boTjFTDxHT8Ld8qh4mJuupxST8fZ-kx-M4CX0ZxHQ9C2KyIzY3cvKhzm9iOd4T1uhFxG69uDiplxZX9bLikV5efNQrCG5UEqEQb1TEM1xR_AaloTo0Rn8H6GNUFiNhqlFFLDSqinVGdbHLqCGOGTXFBaOWuGXUFs-MOuIFvITXRl3xFt7DR6Oe-AxfIdpsKIqbTUVrsxXuc3vc_67iqtlH_DCHiFhriEiAgDUY920A7l8_3MdeuJ_dcG87QHtoB21_aQOtoRW0_KUHTVe70RS1K01QO9NYtSONVNvTMLUtDVZb0wC1JfVVm1NvtSn1VBtRd7UBdVPrUle1NnVWa1AntRp1VCtRO7UctVFLUSu1KLVQC1IzNR81UXNRQzUH1VMzU001I1VS01NZKKamowJoc6kZKDP6A2omilSzkkfNSSryfiiF6J1Sgp4o5eiOUpkuK9XpvFKH_lQa0DGlCR1UWtIfSlvaoXSkzUpXWqd0p9VKD1oBy2Axzheif77SmeYq7WmO0ppmKy1oFnJnKI1omlKfpih1aQJqjoURMATnA5V61BdjvZSG1B2xXZTm1Am5HZR21F7pBN2gF877UUdlIHVWhlJXZThiRyBnFPVRxlA_ZSzqjKfBygQaqkxC7ck0SpmKuabTVGUm1jGbFihzsM55WPMC2qgspG3KEjqqrKSLylr6V9lKr5Q99E05Sor6F7nVWxSh3qMo9SHFqU8oSX1KGSArjnOrj3Ad71FR9SpVVc_gmh_C_dlOw9U1NENdSCvVabRTHUUn1WH0lzqI_lb70TW1B93Efb6L-3sf9_UR7udjtT49wT19gnv6WK0J1dFfjR6qVeiBWhlxlege3FUr0m24qVagG2ivw1X0X1Gr0gXknVXr0CnUO6riHqktaC-en51qO9qqdqCNaidah3lXq11oOZ61xXjm5qvdabaa_Pwle05dzQ_UxfyJVvBuppP3ML28lxnF-5kJfJCZgQ83f-MTzXJ8rlmHrzRb8W1mD37IHMrPmZP4bXMef2ku4u_NJfyruYw7rGVcWEu5ZS3mHmshT2XN5THWLO63pvGANYlntMbyzNYIns0azLPjmzEHvi1z4Lszm9WQZ7Gq8kxWacQU4OmtbIhP5IlWauSmgnAeb_l4HKSxvDwaInEcYYXxcIz58F1rW5HcbUXzYCsNd1qx3LTiuWb5uWIlcLKSuGwFeJCVln8302Gt6fgnMz3WnZ6_MTPyJ2jvmmn5Nez5ohnLz5ip-QlchyOmix82FX7QDEL7mY6ab-ik-ZTOmA_ponmXrpq36Y55i-7BI_MmPYNX8BY-wlf4CQ7rH5KBrBvE8d3JraskrMvwN44vwgWMXSBmnYdziD1HkvUX8v6iIOss_TDPoNZp-mT-SR_MU6h_EvOcoOfw1DxOt8yjWM8ROmEepj_MQ7TJPEjLzP0029xHE2A0joejbxBi-iO-N2r1NM9Rd_MydTOvwg24BXfxHNyHR_AUnv_STbNdzaGGFuoqqXlcubUQV0BzuVJphsvUFNcPVXZ9VSXXJ_Wn84P6zflO_eR8q76DV_DM-V597Pyi3nX-VK87mXbRqWtnncHaCadPO-KM1g44k7S9zszaHmdubZezkLbDWVrb5qykbXHW1jY5G2sbnG209c4e2lrnEG21c4K20jlXW-FcqS1zbtWWOg9qS5xntEXOK9pC5x0cP8HYK8R_0LY6P2n7nF-042gvON9rt5wvtCfOR9p75y3th_OSxl2nsP79WrBrs-Z2rcG-lsBc7HEqjIVh2HM_6PZLgBbqaWmiHqAB0AHHDaCCnoEK6pkpk56TYvRcFKXnptR6HorQ81K4no_C9N_IqxcgWy9IHr0QhepFcFyUfHpxjJVATClKpZdGfBmK1MtRGv138usVKK1eiTLqlSmbXpVy6dUov16DCun1qJLemBrpLaiT3o4G651pst6TFuv9abM-jA7pY-icPp5u6ZPouT6ZvoJiTCTbGEdxxgjKYgyn7MYwymkMpTzGEMoPBY3BVNgYRMWMgVTS6Ee_G72pktGDqhtdqZbRieoa7aie0YoaGM2ovtEQx3XRV4NqG1WoplEBceWoilGKKhglqKxRjEoZRai4UQg1C1IBowDlNfJTLiMfZTPyUiYjO0UZWcg0MmBt6egxrt9lXMsjsFlPvr7JbK0xnqkGrgdqXdcZtaZrm1rZNU8t5xquFnV1UPO5aqmZXDXUjK5qanpXFTWtq5Ka5KqgJrjKq3GucmoaV1k1CiIhAlJBGPq9rt_VUHAjLsRVUQ1Gngv5TldV1XJVV01XTdVw1Ya60ETVXG1U1dVZVVy9VeEapJJrlMpcE_Gsz1QdroV41lfABvWHc7sa5PoDz_9hxJxEzjnUvIy5bmLeB2pq1ws12vVejcWe4l1cS3A5tUSXrSW5IrW0rngtvSudltGVTcvkyqtldRXWsrtKaTldZbRcrnJaHld5LZ-rovabq7JW0FVFK-KqqhVzVdNKuqprZdD-jvNKrkpaVVcFrYarrFYLuXVdxaCAVs-VR6uPuvVdGbQGrkStoSsNRGiNXMnXN9ltaSzdk8bRI2kCPZcm0mtpEr2XptAXaSr9kKaTJM8kXZ5LIfJiCpdXUoy8nhLkbZRe_oOyykcol3yafpMvURH5FpWUH1E5-TVVlr9QDVnmdWWDN5JDeWPZRuuFMN5QTgURvIEcyevL0byeHANpEJuG15FjeW2oBTWhBlSH8ogrLqfm-eVwng110soenkZ28TDZ5MGyyh2yg7-RPmAfz-iydJtOShdor3SUNks7aIW0kpZLK9AugyWwiFZKC2iVNJ9WS3NpDWySZtEOaQZyptMR7PuUNJnO41pclcZT8vVJ1l98ZQOEhtZL_UQ89RaZqIfIR51FcWonKlJzUYvqiFZUUfSi4mIk5REzKL1YRlFiE7nEXvrOj6b4Bl_hC3yGT_CRH6EP8B7e8cP0lh-Cg_QGXvMDsB_2IW4F_eATiWEOp2hK4Zg3SRSg3CIDVRAxVFOkprrCRw2FhxoJixoLFa2M8x-svvjI6on38Bbe4PwVvGANxDPWUDyBR6yReMiaiAesqbjHmol_WQtxl7UUd1hrcZu1gXbQATqhrzPGuiKmG2J7iPvwgPVCnd7iOesjXrO-4h3rhzn7iU_whSVfv2RXeSXrKq9rXeFNoS10hl7QH4ZgbIR1jc-1LvP11t_8oHWWX7RO8AfWfv7R2s4V5xruc66GVTwsxUoe7lwBy2EZLIUlsDhFmHMRLET8Au79xXbO5uScwd9ZU_k9awq_YE3GPNP4RmsGX4D3lfF4d-lnreDtrLVY5yZeDvPmt_bineQwT239ifeK01zHuhTrHN4rLuC94m-891yGa3i_-IdL1k24hbHbeBe6g3eQO8i5w13gBhv90YhJQmwW6wbPY13nhZFbEnv_3frP9amEd59pIoHPgFnCz-fAfBHPF4o4vkTE8uUiDV8pwvlO4eRHBfGL4hPdFE_pkbhBrwTeE8Qe-iF2w07YDlvpu9hM3_A0fhUb6ItYT5_F
OsStpQ_wHt6KNfQaXsJzeApP4DE8wvjDXx4g7z7cQ-2L4iAdFqdos7hAizD3RPEvfiFP8It4gyfxLZ7ID1Qda6sqvlJl8Z0qiSBeUcjAeCWh8upYfwMRyltgL51ENO-D_Q3DnseL5P0n-8zLhHziZUM-8N9D3vHyIW94xZBXvHLIC14l5BmvFvKEVw95xGuEPOA1Q-7Dv3CH1wq5hfYfuA6nEbsXuRt46ZCFvHjIZF4oZAjPF9KN5wxpzrOkaMYzhzTlmUKa8IwpGvMMkB7SQVr0JUECxCMuFvFpIDqkBXTlvpBBPDhkAtdC5nIpZDX_GryDvws-yp8HX-QPgv_m94Mvo70K1-Ef_jD4Fn8UfJs_hifB9_j74If8Z_BT5L_goSGvUfMd5vzEc4R8xVq_8sJQBIpCsZAv2MMXXhJKhSRfn2Tbgqo7twbVdG4JquPcHNTAuTGoqXN9UCvn2qAOzlVBXZ3Lg3o7lwQNdM4LGuKcETTMORFGwRCc90N_L4x3DmrvbBvUyNk8qKqzSVBJZ8OgPJDO2SAo0tk4yIU-w9ksSMU4OVsGSc7WQT-ttkHfrPZBn6yOQe-tTkFvrG5Br62eQS-tvkEvrIEwFEbifEzQK2sm4hYhb3WQ7twQ5MN645zbgrI5dwQVdSavP9l3UTH4hygb_FOUDA5SikKhYIfyW7Ck5A2WldzBTMkRTEq2YKFkCVaVjMG6kj7YVNIGO5VAcLCSGOwBW0kIDkMbAZFKUnAMxuIQ40dsgpIhOANqZFUKBOdWSgbnVyoGF1JqBxdRmgYXV9oHl1B6BpdUBqAdDmODiymTMTYzuKAyH7FLg3Mpq4KzK2uDsygbUGdzcFplC2puQ_1tmGcb5tuKeTcHhysbg33KeqxlLda0OtitrMT6lsOSYAv1dGUc1j8kmGM-prTD_ppgr7WCk_efrI7oq9eDBtBI9NObQDNoAa2gteiv9xSD9SFilD5BTNRniZn6ErFQXytW69vEVn2v2K8fEsf0o-KMfkL8rZ8SN_Q_xb_wFMdv0fdFPy4cxhFBxkGhGXuFZewUwcYW4THWC9tYKXzGClgOy2ApLIHFsEh4UyyEBYidL0KNeTAXuXOF25iTIgTH3_QZ4rE-RVzSR4sj-iCxRe8ilurNxTS9mhgJI34ZDsNgKAyBwTBIry4G6jVSDNBrYr-1oDb2niz5-iQLwrdsEM2BeaqDFsBiVaKlsAJWwVpYDxswthFxm9SfbIv6g21Vv7Nt6je2PcVX-AKf0fcJPmL8Q4ot6ku2Rn3Elqh32Bz1OpuiXmRj1DNsiHqM9VEPsC7qXtZB3cPaqLtYC3UHa6xuZ_XVbayWuoVVg4rqZlYebTl1KyuN_pKIKabuZEXU3ayQ-gcrgPzf1H1wAA7BEfQdYwXVE3ASMadZUfUvVly9wEqpl1hZ9QrqXUfdm6wK1lRVfcpqqm8x5xfWBHtrrcrUCXqrjIZgv-PRNwEmwiSYDFNhGsZmqP-5frPVkdIjc6R0B67DRTgDx-AA7DJHSZthE2w0R0sbzDHSenOctM4cL601J0hrzEnS6l_WmJNhCvqnYjzZNMROQ85Maac5VzpoLpBOmYulC-Yy6Ya5UrpvrpZemOukj-YGKcjaICkQbK2VfNZqKdpaJiVYC6UM1iwpG2S3ZsIMmC7lsKbBVJjyy2T0T4KJMAHx41NktcalyGKNlZKsMag5WvJaoyTTGikxa4T01RwuvYFH_9OI_8XI_yYPHddy0AUtC93UMtAjLUBvNT_90NKQqkfi2y4c329h-P4Lo2jdB158D9r4ngsFzy9uCEkRowcjJpkLOS7kuvDdaJFLdxJD_0fNTU81m25p4Zgzko5psbRHS6SNmHuZlo1ma3loolaIhmklqY_2O3XUqlJzaKZVg-pQA2pCLaj9Sx2oi7h61AJaavWpFbT-pQ1iu6PGYK0ijdPK0iytBC3VCmPO3zB3buz_fyfPf-Pm-MLiFaEyVIXqUFMN5rWgjuridVUHb6--o4HqA5qiXqVl6p-0U91Pf6qb6Za6jF7DG3UpLKG36mJYBAthQYp36nyMzaNX6lx6Ac_VOfQUHquz6RHah-pyOo9af6h78X_BKZqqXkmZq536nmqrnJdOIUDhpVQVNNDBABP9Fjh5mRQuXhbrLpcihOMLEvtL9o8oJV8TJeXLooR8URSXz4li8llRVP5TFJFPiELyMVFQPiwKyAdFfnm_yCPvEznlvSIbZIGM6EuP8ST5uIhHToz8l0iNOmHyFREq3xAh8h3hlO8KU74Pj-ApvIDXwpLfYey9cMlfhEf-IXyypETIXImWNSVONpVEOVhJL4cqmWVbyQrZZa-SE20u9OWRPUpeOUTJJ7uU_LKqFJBlpaD8TRSWP2Ddr7CHx9jLv9hX8v6STWSX_ZPZOf9UdsI_nR3wz2Q7_XPYBv88tty_kM3zL2FTYbJ_KZvkX8Ym-lewCf6VbLx_FRvnX8PG-tey0f71aDeibzPGtyJ2O3J2sOn-XWwmzPbvZvP9e9hiWAarYB36NsE2_07Mt53tR-4x_wZ2BvUuovZ1zHXXv4g98s9nL7GWV_657LV_Nsxkb_wzYBp7658Ck36ZmOKNfwJiJiB-PPLGsxfwHJ7CY3iIsftwF24h_oY_ef_J-lKs1of8Wm9K1HpRQOtJ6bQelF7rThm1rpRJ60KZtY6URWtH2bRWlF1rTjm1xpRLa0C58bvLg99iXvy28uG3lU8rB6XQVxzjRSkHfmNZIRN-z-nRpoVEiNeKUBqIRkxqxEZopSlUK08hqGPht2qitqE1w3EbcmqdyY11eLRuZGNNPqwvFdaZGuuNwrrTaMnrT9ZZq2Z1SlHVwv8aVgetitUe2mmVU7TVKlmttHJWC62k1UwrDPkhF86zWC219FYbLQFxcchPY3XToqxeWqTVT4uwBsJQGIa-4VqMNQIxIzW_NUpLgnSQATJDVozlQlw-xBe0BmvFrAFaKdQoZ_XRKqJeVahm9YQe0B26QVfoAp1_ycd6it_wJVoIX6ZF8ZVaAl-tpfAVWxZft-VZbVGJVROVocovVaEa1ICav9Ri1UVtqMNqpKjLaop6rBbUTtEAX8cNWHNoI-qzjhjvhpzeojq-aCuzwZhjiKjAhorf2TBRDsqw4VjDcKxluCiO86JQBOOFEVuIDRIF2QBRAF_I-VEjef3JblBz4y41Mx5SC-MZtTReURvjHbU3PlBn4yN1R9sb-hrvqR_6BxhvaaDxhgYjbojxkoYaz-ERDTf-hZs0zLiG_ks0yLiI-HPUyzhP3aCLcYE6oa8DxtoZlzHHVWplXMecyfMna4d3tfbQ4ZeO4rLeCTpDF-gqruC987reW9zS--J9sp94pPcXz9C-hg96H7xX9hFfMf4Nvuu9xA_E_9R7pAgyuqPtBl3Q3wk6IKYdYtsipzVyW4vPeL99D2_0luIFPIGH8C_efW_BDbiO82spWomryLmit4G2WF_y-pNtlqYGb5Km_TIdZsBMmAWzgzemmBO8AdZLc1Osg7XSvOA1sBpW4HwJxhcidi7yZiF_GupMRr3xqD8OxkqTg8dIk4JHSxNhfPAoaWzwSGlM8AhpFI5Hom8EYoYjdhhyhgZPlIYET5IGB09BOwPmon8hxpcidqU0GnOPw5omBievP1k1tkOtjvfSGngnrYl30dpss1qHbVTrsQ1qfbZObYh300ZsrdqYrVeboq8ZxlqwTWpLxLVCfCvktUKNlmwX_IGxfWpzdhBxhxF_FHnHkX8StU6qddkJ1D-GeY5gvgNqNcQnz5-sPN6pf6clalm8X5ehRWppvGuXpPlqCbx3F6e5MAdm4nw6-qciZrJajiapFaAyVMN5dfydr4GxmoipiXfPWjQL5qi1UaMOatVCzRq0EHEL1aqYowrmqgQVMW_y_MlKiP2sOBQVB1gRKCwOskK_FBSHUhTA-G9iL8sv9rC8YhfLI3aw3GIrbGa5xEbYAOtxvhZjaxCzmuUTqxC_AnnLkb8iRUGxEnWTrcI8yVZjzjWwDvNvhM2smNgGO7Cm3fAHS15fshNSczohtYCWdFxqBa1THJPaQFs6-ssROCy1o0NoD8KBX_Yjbh_y9iJ_L2rt
lZrhvCn6myCuMXIaI7cxajRJcQxjyY4j7j9z_0ecqGOlEXWtGIiC1KKeFQHhECbqW17w4diHOJ-ohb6aUB3j1aCqlUpUThEhKiG3khUJUaKiFQ0xKSpZcRCPGL-oAtWsBOT7USce9ZLnT_adnprf6Yn5A35CEH9sOn6R-CNTRst-If4Enpo8xTNT8OcpOH8FrzH2FnFvkfcO-W9R7y1qv_7lFbyEF_Acnpn_mfs_iqoZPMV-KQ4loOQvpf6njJ7SaqZfMkMWyArZUpRScyA-J3JzoUYu1MrlKYrzIugvjLj_yILzzJDpl4ye5Ln_yzJuycmWwhJYDIt-WZjCTLGAG6CBCsovAmMCORy5HDUItbi8HH3LEbec6_J_1a_Ma4gqUBWqQXWoATX_H2pCLagNdaDuL_WgPuLrI-8_qkFVqPK_qIy4yoivjNzKqFEZtSqjZvLc_8UR9BP_cpBD_r__ZOn_iE1K_8fdNun_Ptr_99__76fL8f_6-DgOewaJOYEhYnpgmJgYGCHGBEaL4YGxYlBgvOgTmCi6ByaLTtAROkB7aBeYJNpCG4y3TjFetEJOK-S2DIwSLVCnBeq1QN1kLQN9kNdVdA20E70DzVG7gRgRqCnGByqJqYEymL-IWBzAe1Igm9gUSCd2BuLF_kBqcTxgi7MBS1wKGOJKQBXXAkJcDzBxIyCJm4Gf_FbgG3zhtwOf-J3AB7Tv4C28Rv9LfjPwnP8TeMZvBJ7y64En_BpcCTzml-AinIdz6DuL8dOIPRl4wY8HXvGjgTf8MGodQM19gY_8D9TfBTtwvDXwnm_G2AbMsR5zrEX9tYF_4TpfFziP_pN8U-Ag4nYjZwvfG1iLWqtRcyXqL-dn4DxcCqzAelZijaux3g38HmIfBXbwp4E_-MvAAf4mcJR_QK3PgbP8O-r-DFzkUtpLnECkvcw1MHBspb3InWnPc1faczw47VkekvY0nOLutCfgOPekPYp2O_rWcj3tYs7SzuFfAlP5q8B4fj8wEmsYgPX0xv578GOBLthzJ7470AHr74D9dODLAx35AvTNhVmBznwGYqYGuvJJgW58QqA7H4u8UYFefFigLx8U6M_7BQbynoHBvGtgGO8YGMHbBkbxloExvFlgHG8SmMAbBybDNJiB89m8aWAubxGYz1sFFvF2gSXIWca74Np0x3XphWvXF9emf2AjHxDYzAfiGg0KbIMdsAv2wF7078P4fsQdxPyHeJ_AYeQewTqOoM4RrOUo74S2A7SFVhhvDk0Q2wjqI68W8quhTkXUK4u6JXH_imCO3zBXHsgJ2QI7eWb0Z8Q9Sof4tMgLoF7awGmePvA3-m_yLIEHiHvBc-BZyYVnNE9AEfkCpsgfcIMPIiEOAujPCNlF3kAuyCNyB_KLnIGCInugsMiC30SmQFGRHm1anAcChURioIDwB34T8YiLxe8lTSCviAnkhiwiMpBWRARiRXggQngDoSIUc7oDXAQHfnAnnm81cIXLWOuPpE38Y9J8_ippDH-c1JPfSWrBLyc14heT6vG_kmrxU0k1-NGkqvwA7Emqwreh3ZhUja9Nqs5XYmxpUk2-CHHzkurwWUl1-XTkTU5qzdsndeGlkvrxuKTB_GfiSH41cQzfnDiej0kcx5tBXagCZaEI5IEsGE-CmMQJPAKtD31ucIKGPp44iUuJM_jPhNlo53JKnM-VxEVcT8R7beIyHpy4knsSV3Nv4poUvsS1PAzCE9fxVBCRuB428NSJG3lk4mYelbiFRyduw3zbeZrEnbCbxybu4XGJf6Ddi_59iNmH2P3IO4A6B1DvAOru4UbiDh6E_PcJG_jjhNX8nwT8jhMW8aMJc_nuhGl8TcJ4PjdhOB-fMIAPSOjBOyV05E0SWvKqCQ15iYS6vEBCbZ4zoQbPmFCd-xOq8Ui0Ns7NhFqcJTTgL_zN-BV_a37A35Gv9nfnU_19eX__EN7Sj-sGlf3jeSWo6J8AE3kF_ySYzMv7p_wyFabDDPTPTFHRPytFJf8S3ty_jvfxb-cT_fv5Mv9xvtt_lp_zX-IP_Vf5D_81TgnXuZFwg4ck3ORhCbd5VMK_PD7hAQ8kPMOan_NMCS955oRXPEvCG3gHH-ATfIGv8B3jPxHnEBkSJJE-QRbpEpgIQFICibgELiLBlyBECBggwIGxb_4g8dT_lV_3f-Cn_K_4Lv9Tvsp_n8_03-Ijsb6e_r94Q_9RXsq_h2f2b-Jh_hXc4Z_Hn8RP4efjR_Jd8UP5hvhBfFn8AD4nvh-fGN-XD4_vw_tAJ2gORSASvsT14X_DRhgb15e3gKKQDjzwLbYfvwd_wpbY_nwODIkdwLvHDuStYwfxerGDeaXYIbxY7FCeO3YYTx87nEfHjuA-cMaO5Dx2FP-RZhR_n2Y0fw734HqaMfwobIQ5MBw6QV0oifEskICcCHClGckpzQj-OWY4fxEzlN-FyzFD-EU4FzOYn4FTMYP4CTgKh2IG8v0wJ6Y_7xnTj1eL6c2zxPTgzpiu_Fl0J348uj1fGt2OT4tuy4dFt-Hdo1vzFtEtec3oFrxUdDOeJ7oJTxvdiEdEN-RGdAP-PQrPYlR9fhPOwv6oenwDbIxqwXdHdeDHorrzC1F9-e2owYgbwb9GjeVK9BQeGj0VpnE7ejr3Rs9I4YueCbN-mY2-uRifh7j53BO9kLshJHoRd4EzegGXMPY-ag5_FDWLX4uawU9HTcH8E_nmqDF8edQQPjmqNx8Q1Zm3jWrJa2GdJaKq8WxRZXmaqILcFZWfa1G5OUXl4D8js_DPkRn5u8i0_AUeuseRsfzfyDB-KdLNT0QafHekwtdGMj4vUubjIx18AHSIlHgZiEdfEFxLLfOtMCE1462gWGri_tQSF6mD-OOIb3Qy4jOtiXhP4yJeU_uIF1Qx4jkVj3hG-SKeUuaIx5QQ8YgiIh5SSMR9UiLu0fdUd-hBqlv0V6obtDPVVVqU6hKNTnWRuqQ6R3VTnaESqU5QQqojpKTaT4_D99DJ8O20KnwzjQ5fR23CV1HZ8JVULHwF5YcckAH8EBW-nLzgBCV8GQXBp7Bl9CpsKT0OW0J34FrYIjofNp8Oh82lbWGzaUXYLJoZNpNGh82gvmHTqV3YNGoQNoXKhU2iPGETKCFsHHnCRpMjbAS98A2j677BdNzXj1b7etFYX1fq4OtAlX2tKbuvGfl8jeirtx79461DZ7216QBshiUwDYZDT4y1hmbQ0FuX6iK-hrcBVfY2pPLexlTa25SKe5vTb942lMvbgTJ7u1I6by9K8A6kOO8IivFOpCjvLIr0LqEI71pK5d1GYd795POeINt7gTzeG-T2fiTLG8xVb1rOvMV5kLcB_2r35h_sqfy1vZ4_t4_xx_Ytft_-wO_YlvjH9otrdn5xya4qztttxBm7uzhtDxSn7DHihD1NHLMXiCP2anHI3ioO2PvEXvsAHBR_2IfEHvuI2GUfFTvtY2I7bIOtsBl9mzC2wT4s1iN2LXLWIHe1vVessreL5fZGsRQ1l9hLxGJ7rlhkT4cJOB6JvoZipZ1brLNDxBb7Cd9lH-T77Vn8mN2Zn7HL8Et2Hn7NTuQ3bRvrZ_ye_YYe2rfpsX2Gntl76KW9A7bSK3sjvbbXwiocL0ffEnpuL6JH9kJ6gPYe3EHfTXsp3bCX0VV7BV2yV9JFex2dQv5hezdhj7TDPkWb7Yu03v6H1tgPaAXmnGfH8Ml2AT7crsN72T15O1zbBvYmXsk-zYvYV3h--1-ew8bfCvsTT7IlkcY2RCrbKzx2jDDtNCkMO1booNlxQgUFRIo0giOO7Cgh25FCsiMglXDY4SLIDkOrIuYzt-zH3GNf5ansEzzG3skT7ZU8oz2TZ7dH8nxYUxG7JS9l1-IV7NK8Gq5ZXTvAm9jhvJUdBr5fvGDzlnYob2F7UjS33bwZNP2lCTSGRtAQGiCnDupUtyOx3xj-ux2HeRJ5MTstL2hn5HlTZOJ5IBfkhByQHbKlyMCz2ul5FsRntpMgEdfJD_FYfxzaKIyHIyeU57Zd2IvOC9icF7YlzPGdStqfqbT9nkrhvpeyX1AJ-ykVsx9TIfsh_QZ5IJv9iDJAEvpj7SeUGnyICwED
NFDRJ4AQIyNWQl4Q_Ah9kOJ76H36FnoP_oW79DX0Dtz-5Rb8AzfgOsaTXUvxPfQycTwvTvs85jxLMfafFLBPYk3HKL99hIrjmSpjH6SK9gGqbu-jOvZeamT_Qc3x7La1d1Eneyd1wTPczd5O3e1t1BPPYi97M_XG89zH3kB98Xz2xXPd114NK2E5-pdifAniFiN-PvJnUzt7OrW0J1NjezzVs8dQDXsEVbKHUjm7C2W2G1GoXZG-hBagW6Hp6HBoOK0MFTQ-9C3rEnqfNQq9xCqEHmMFQrezDKErWGTodGaFDmc_PN3YC0879sDThN3y1GZXPBXZBU8JdtqTj530ZGFHPX52xJOGHfTEo03LTnkysfOeHOyqJy_iCyKvOHvmKcveeiqxT57uLDx0BubYyZqEXmGjQz-wTaHBdD00PTG7OGW0y-JeVsa9rUnl7QZU025OTex22FcX7LE3Dbb70yh7IE2yB9NMewgtgBX2IPxOB9I2uy_ttfvQAbsXHbF70HG7O_1pd6Wzdmc6b3fE77w9fu-VSfXmpjzeaPyfLGiO9yU7473Efnr3ssy-payRbwFr7ZvDuvhmsj6-aWyobzIb55vEZvgmsIW-iWw12rW-8Wydbyxb7xvNNvhGsY2wGbaib4dvHNsGWxCzGTYifgOsQ-7alPwFbI5vLRvj28V6-46yVr5zrIbvOivmu8-y-l6waN9rFu57y0J9H5jL94npvq-M-34why-Ivnll-uhl9M7L6Q3W_tKr0guvRs-8Jj31OumJNwStGzz0HF7AK28oYkPpPXzE-WdvMBk-kyJ9KmX2ERX1SVQd9Vv5vmC_H9l433s2C_Mv873B2l-xP3wv2XHfc3bB94zd8j1lT3xP2CvfY_bB94h9BUfYQybCHjAj7D4LCbvHfGE3Waawq6xk2AXWMOwM6xl2nE0MO8RWhf3BDoZtZ9fCNrCPYauYJ3wJyxw-j_0ePpO1Dp_KRoZPYMvCx7DD4SPZjfAR7G34MKanGspiUw1meVMNZJVT9WetU_Vhg1L1YHNTdWM7UnVhF-BFqs5MiejMYuE3qAn1oAm0gg7QLaIL6w0DI7qy4RF92JaI_uxOxEBmph7E8kKL1APZ1NQD2MHU_dlL-Jm6L3NG9mJRkd1YxshOrEBkO1Y-siWrF9mEtYusz_pG1mJjI6uyOZEV2JrIMmx3ZHF2KrIQux6Zjz2JzMteReZh7yNzs6-RuVhQVC7GwYjKyULAC2EQjr6IqNwsMiovi4rKx2Ki8rM0UQWgIIuNKgxFoBjOS2CsFIuOKo24sogvx1JH_Y7cCqhREbUqoWZlFhpVhXmiqmKO6iw4qgZzRdVizqg6UBfq47wB-hswd1QT1GnO0ka1Yjmj2rAiUdhbVHtWJ6oDaxHVkXWFkTA3qhPbGNWFHYnqyq5GdWfPo3oyR3QfFhrdnyVFD2D5oweyitAUxz2j-7GxGFsU3ZNti-7KzkZ3ZI-j2zIppiWLiGnKssc0ZOVj6rGWMbXYIBgGo2AcTIqpzabF1GEzY-qyuTH12fyYZmwp8lbHtGWbYtqznTEd2P6Yjuw4nIXL8BHsNB1ZDqgGXWEqbIWLaTqx-_AeKLYzCwV_bFeWI7Y7Kx7bm1WL7cNqxvZldaA-NIztx5pAc2gFbdE3OrY_WxE7kB2NHcruxY5gjrjRLCpuPMsXN5HVipvE2sZNYQPiprHJcTPZsrjZbGfcPPZn3EJ2K24xexO3lP2IW8b0-OXMG7-SxcWvYpni17B88etYqfiNrGr8VtYkfhvrHL-DDY7fzibheGH8ZrYBY_sQcyZ-NbuCvLvIfx6_lH2MX8Qc_gXM8M9ltn8Wi_ZPZjn8Y1lZ_3DWyD-Q9fD3ZuP93dhSf0e229-WnYeL_jbsEuB7ml2DG_5W7B-45W_J_gd7dx0kRfb2Cz7zeEpVV9FV1d5VjXTTjQ4-wAyDDA6D66CDu7u7u7s7gzs0NsDg2jTu7tC43i_9I-4_d-ONjdjdiN19b0x84mSe8zxPnnMqq7KKIWZuxjZlD2Mbsuexddib2OrsQ2wF9iW2FPsWW5jpcT8zLS4HjhPQl459io3EuIe9i3UgVrCU2K_0VewX-jL2I9r38JamxL6GFPo69iV9A2_hPXyCr6DFvaQ07hXlcSlUxb2mJthxb6kj7h0NivtAXXEfqTvuM00T95UGx32jnjideeMI88UxFhInGH4vs7A4g4XHWeBgEXERLBCXwNJjrvFxJViWuGosR1wjlieuIysQN4D9lqo_KxzXjxWN68OKxfVmxeN6sZJxPVmpuB6sTFx3VjauBasXV581Q277uHJQDPKz5nHZWYO4GFYpLpSVjnOxIrh2AcwrV9wbmiXuCY2Nu0X9cZdoaFwS5nkacz-OtRzBug5ijfux3r30Q-xu7EUifQ6P4C7Ob8buoVdj99OLsQdpUuwReib2OD0Ve4qeiD1Hj8cm06Oxl-jh2Kv0UOwN-k_sLbov9g7dBdti79KNsbfpWvStxNiS2Gt0QewVOjvVZToLZiJ3BkyHabEX6dRUF-AGHYMag2Lv0x6xD2m72Ee0CdrasQ9oxdh7tDjq5oi9TqNQSyE-JcM5ei3DKXokwzG6KcMhOj_DCvpThnF0b_qutGL6evRmuhK0Xbrs9FvaMDo2LaXRab_iC-5H8jLmDbkU85L8E_OErI55QKbG3Cb9Yq6TFjHXSOOYK6R-zGVSO-YSqR5zkVSKuUDKQUkcF8NYdsRExtwgKuYWeR24S24EHpDjgSdkW-AlWZzqFVkUSCELYUHgNZkfeEPmpXoL7-ADfEL_Z_iKmG-g0YUBnS4KCLomYNMdATc9GPDR04FIeiUQQ-8HYumrQGb6NVUWyEq_BbIB1hb4CXJATsgFuTH-XR76JZAX8tHP8ClVXvoC_ffgCmJOI_4QcneixnrUWobaMwOZ6OhAPO2Ha3YMpKdNcP2agShaNhBGCwXS0PiAg6YJGPSzn9O7fkJP-L-RrX6sxf-OjPhhOAyDoTAEBvvfk0FoB0Jf_wfS0_-JdPV_IZ39Gu3gZ7S9X9F2fgvHHtrZH0W7-WNpL3822tefjw7wF6ZD_KXpcH9lOtpfnY7x_0nH-evT8f7GdKK_OZ3kb0Mn-zvSKf6udKq_G_SAnjjvhf4-iOlLJ_j7I2cAHQtj_ANRZyAdBSNhBAyHYan60UH-3rQfavRCve7-TphPe8yvDW3jb0Fb-uvRBv5KtIa_OC3vz09_92elBfxpaQ6_j8b7TerHekKxVpf_JVH-R-Rr9G3yJvoaeRx9kdyMPk-Sok-Tf6OPke3R_5LV0fvJ3OhEMj56OxkUvZl0iV5PmkUvJD9FTyCfovqTA1FtybioOqRWVBmSIepn8jwyjmyPDJDFkeFkXGQw6RHpJI0jFakQSUn-yG96hsjPelDkJ11EftC_RrzX30S81Z9GpOh3I17qVyKe6eciHuvHIm7oGyMu6TMjzuoDIk7ozSMO6xUiDup5IvbrkRF7dBqxS38Qvl0_Eb5Z3xC-QZ8WvlbvE75a_yt8uV4qfImeNXyR7g2fr38Om6PfCZulHw2boa8Pm6pPD5us9w-boDcLG6_XDxun14SKYWP1UmFj9CJho_X8YaP0nGEj9UwQGzZCTxs2XI8KG6aHhg3Vg8OG6EFghg3Wedgg_VnoQD05dIC-J7S_vjy0nz4htI_eK7Sn3ji0m14-tKteDm2Z0O56qdAeegn0Fw_tpRcL7a0XDe0L_fQiyC0SOgjHQ2AYxkbov4eORNwoxI_Ty4ZO0iuFTtOrh87U64TO1RuGLtSbhS7R24Su0DuGrta7ha7D9Tbq_UO36ENCd-gjQhP1saH79ImhB_WpMC30X3166GE4CsfhJJyGsxj77lyqqaFJ-hSYHHpenwQTYQLGRyJ2EHJ6Ibdz6BFc95DeNPSAXj90r14T1y0SulTPFDpdD8a8v4T01O-HtNDPhtTQE0OK6atCiuorUxXRV4QU1pen-k1fFlJIXwpLQvLpc0Ny69NDftInwmgYEpJT7xuSR-8WUlBvi5gWyG8UUkKvG1JarxlSXq8cUkkvH1JNLxlSSy8a0kzPEdJFjwkZpLtCJujffPP0Z741-jXf
Lv2475i-05ekr_dd05f57utzfM_1Sb73-gjfN72vT5JOPidp5nORRr40pL7PQ2r7vKS6L4RU8oWS8r5wUsoXQX73CVLFl6I39l3Xu_iO68N9O_SZvhX6Gt8MfZ9vuH7eN0xP9g3RL_gGw0D9oq8_9IXe0BN6_NAd491SJfu6Iq-rngTnfB31Hb42-nxfC32Yr4nextdQr-Krpxfw1dZjfNV15aumf_ZW1V96q-h30V6CE97q-n5vTX2r9099lbehPs3bVB_kba239XbQa3u76SW8vfUc3oF6tHe4bnpH6sQ7Vv_kmai_9kzTn3tm6w89C_W7nuX6Tc86_Zpns37Fs1O_6NmrJ3sO6uc9x_RzntP6GU-yfspzRT_hCSI7PYXJck9HMtWzmAz0JJO2HkVrefLTYp4WNIunC83oGUjTecbSKM8sGupZRj2eTTTIs5eanhOUe85Q6kmmxHOZap4b9GvwHfo5-CH9FPyUfgh-Rd8Ff6EpwYo9Dfaw-8F-djM4gV0OzsOSgwuzc8HloRY0ZeeDO6KvL7sUPJJdCZ7GrgcvQuxadif4KHsYfJ89Cyb8dXAU_xD8M_8aXIUzT1tuekbwIM8E7vZM58Ge-dzrWcZDPGt4mGczj_Qk8mjPAR7jOcrTeU7yWM85nuBJ5lk9l3hOz1Wez3Od_-K5wYtCCc9NXgb-8NzilaEa1PLc5nWhIXSEQTAFlsJWjB-By8h5gvy3qKV7r3LLe5n7vBd5wJvME7xJPLf3LC_kPc1_957gpbxHeHnvAf6Hdw-v6N2OdhPO1_DS3oX8N-8Untc7gmf19uHpvR14hLcJT-OtxZW3PP_mKcrfefLx556s_L4nHb_uCeXJHgc_6aH8kOc92-15B2_hDbyGFHgFL1Ptgb2eF2w_HIBDnufsMByBYzg_hvyznq_skofzmx4b1wjmzzzh_LUnhn_0ZOSa92fu9Jbhkd4_sabWmGdfrGccr-RdwOt7N_DWWEsH727e1fsP7-39lw_0HuPDvSf5OKx7qvcMnwsLsQ9LYaX3HF-DfVmP_dnkvcS3eq_xbd4bfLv3NtyDBzh_DM8w9pJv8b6GD3yz9ytaIrZ6hdjhtcQur1Ps8aYR-70-cdAbJg57o8Qxb4w46c0gTnvjxVlvFpHkzSHOe_OizQc_Q35xzlsg1VlvQfhFnIHT3l9TnfIWQn4hcQKOwzE4-sNhjB-CA4jfj9y9qLEH9RJRd5c3l9jizSbW47qrvOnFUq9fzMecZnk9YgrmOd4rxQivLgZ4P_MeWEt771ve3PuG1_Om8GpYX1koCcXgNygI-TCeG35CbBbkhXi_4XXQxUMPEWc8VOyARTDaw0QX6AjtoI2Hi5YeIZp5pGgMf3kMUR_qeSxR12OLOh6n-NMTJGp73KKWJxi8ECJqekLRhkMkxqIhgLi0iE-HvFjkZxQNPJlEQ08W0ciTTTTx5BBNPblEc08eXK-8GOBpJqZ5-ou_PTPEP56N4pLnuHjpuSek96vwe8NlAW8-Wd1bVXbwdpSjvePlMu9auc97Ql7xPpVvvW_kZ-9nSXxUGT5TBfncyucLVVE-v0rni1UJvnyqgK-UKuerrer6Wqt2vr6qv2-8muBbpBb4tqp1vh1qgy9RbfbtVVt9-9UO30GV6Dus9vqOqn98J9Qh3wV1xndLXfM9UQ99b9Ubn2boIaZhh3iM0JBoI31IeiNzSLyRKySrUTAku1EsJKdRLiSXUQ3q47hFSDajT0hmYwJiloTEGtsRfyIkxrgV4jfehkQaZmiYkTbUaxQITWNUCQ0yWoXaxuBQZcwJ5caWUGKchKRQ3bgMN0I14x48gVfwDr6EflNBYd9U2rCvKlfYF1U87LOqEfZRtQh7r3qFvVFjwlLUlLBXajYshtVhL9VG2An_wDG4Ak_CXqgv4Ah_oaIgS_hz9SuUh1rhz1Tj8KeqXfgj1TP8vhoSfluND7-hZoVfVkvDT6p94fvU1fDN6n34ChUcMVdljZikSkeMUE0i-quBEb3V-Iieam5EN7U6oqvaEdFZHYnooi7APfS9gbcR3dW7iB7qPeI-IP5jRB_1KaKf-oz8L6kG4Pi7gegfBIMRMxixQ5AzQj2KGKOuRkxUJyOmqr0RM9XGiHlqScQiNS1iuRrxw_CIFbBSDYtYBavV0Ii_YY0aAkMj1qJvLcbXpRoRsV6NhFEwGsbC-IgNaiJMhikwDWbALORvRb2zqP88YqmyIhep2Mi5qkjkTFUncpLqFjlSzY4coPZHdlcPItspR1RTlSOqrqoRVVX1jiqnFkQVV4lRhdXlqALqXVReFRydQ2WPzqrKRieo5tFxanB0OjU_OqB2RkepC9Hh6nV0iAryB6tMfqcq7leqgZ-pNn6ievq_yeH-r3KK_7Nc6P8k10EiHMV5Etqr_g_yrv-tfOpPkW_8z-Vn_yPJAnekGbghgwJXZXDgogwNnJeRgTMyJnBSZggckwmBf2W2H7IHDsmfICfkwnluyJPqiMwbOCrzBY7Ln5GXP3BKFkCNgoGzkAQX0XcV47cQew-5j2SOwHPUS5FZA-9k5sBnGR_QVXxAqIwBQyUEHCpzwKWyBYJVzoBP5QuEq8KBaFU6EKMqBzKoPwPxqlEgs2odyK66BHKqvoGCalqgqFoXKKMOByqo24Gq6nOguvLF1FLZYmqq0lAJasfUUI2gFXSGPjAE_WMRtwbtiZjq6llMZeVIW0FlSVtalU37u2qZ9lc1Iu3PalHanCoxbVZ1MW1GlZI2rXKki1Jx6UJUkXRp1J_ppJqa7rM8m-6ldKa_L0unvyIHpz8t96Q_JD-n3ynzZtgqy2TYJOtlWC87ZvhbDs2wUs7MsFyuybBE7suwUJ7PsEDezTBfpmSYJ_XYedIF0bFzZRYoEDtHloqdLavHzpKNYmfK9rEzZN_Y6XJU7FQ5PXaKXBo7WW6MnSR3wYHYifJE7ASZDNdjx8sH8CJ2nPwARtw4GQ4JkB_KQG1oCT1hGEyKGy_nx02Qq-Mmym1xk-TBuCnyTNx0eT1utkyJmytVxvkyKuM8mQNKZJwt_8w4XbbPOFEOzjhWjss4Ws7KOEIuzThUrs84WO7KOEAezthPnsvYW17P2F0-zdhFfsrYSRrxHWRIfHsZC7ni28kiaCtCdagLjeM7ypbxnWW7-B6yc3wf2T1-mOwZPxxGyF7xo2Tv-NGyb_wY2T9-rBwIg-PHySHxE-TE-ElybvwUuTJ-mtwaP0P-Ez9TnoqfLa_Cw_g58n38XCkS5klPwiKZNmGpzJawWhZM2CBLJuySVRL2yhoJ-2SdhP2yAdom0CJhj2ybkCg7JWyX3RI2yT4Ja-SghGVyRMJ8OTZhhpyUMFFOTRgpZyT0lzMTvv-9xe_SMNufhjnBBWnAAz4IgTC_m0X4bZbOr1gmP2U5_V_xO_sDLep_Tcv4n9HK_ge0lv8Kbe4_R9v6j-M3-gFIpJ38m_A7fRVt5p9N6_ln0br-mbQO1IYaUA2qQCWMVfIvpyX9m2kh_36a23-KZvZfpWn9j2iY_x11-TmTIPwSrQKTKczH8DuZ6Xcxy_-f-dv-__w99hbkf_899v83_n1n8l92_n_yr2frs4zXvI6WwqtCBe01L6O95SW1d7yY9gm-8qIaFcW0EFFayyQqaIVEda2SqK81Fi20LqKzNlT016aKcdosMUmbL6ZrS8RsbZWYr60Ti7UtYrm2U6zW9op12mGxRTsldmnJ4h_tqjiq3RZntQfisvZM3NZeicfaa_FUeyNeaG9FivZOvNXeiw_aB_EJvuJY018Lp_5WhOjvRUD_KmJ1JjPpDplN98mcul_m0TPKn_WfZEE9v_xVLyYL6-VkUb2a_F2vJ0vqzWXpVC1kGSibqqUsB-XhD6gAFaESxiqnai6rQFW9mayW6i9ZA7Vq6rVkbdSto1eUdXGN-nop2RDXa6QXhSKysV5YNtF_k830QrK5_qtsqf8iW-kFZesf2uC8LfrbpSok2yO2A3I6oEZHvYTshHqd9bLwh-yiV5Jd9SpQXXbTm8reeic5WO8vR-uj5FR9ilygz5Fr9CVyp75SHtX_lkn6enld3yQf6ltkir5dftF3SkUSZRqyW0aRPTIr
2ScLkQOyAjksG5Bjsj05IweQC3ICuSnnkztyGbkr15B7chPaHeS23Euuy0PksjxGzsvT5IRMJofkVdS6TbbIh2StfE6WyTdkvvxEZkidjpEWHSxdtJf00k7SQ1vJYNpYmrQuxqrKF6S8vEVKynOkiDxICsitJLdcQbLJWSRejiHpZL9UaSFG9iUB8EM0REEkRKTqR8IhTPYnoZh7qBwIg34YDmNgIkyDWTAfsUuQswI195KM8jzJLp_g-hotjjlWlnG0vsxP28kyqdrLclAe_oAKUBEqpWonK9M2siptLavRlrI6bSFr0GayJm0qa2GdNbHOmrQa-v7AWAnE_IbYfLIKzY68eOSnhwDqRsqyNFSWph5ZkgaBBRJ9DGMUMQR5Omppsg79JhrQr6Ix_SKa0c-iBf0kWtKPojV9L9rQt6ItfSPa0RTRnr6EF6IDfQZPcPwYHmLsPtxD3F3E3xGt6G3UuC2a01uiKTSGv6AB-uohpzR9LnLT18KP2gb9IF6TD-Ia-Sj-RbseFsJkGALdoAXUhnJQCHEZyXuRhrwVX_QUcV9_Lk7rj8VO_b5Yot8W4_RbYox-Q4zUr4nh-mUxVL8gButJcFYM0s-IIfpp9J3C2EnEnBCj9OOIPybG6kfFeJioHxGTYDJMgakwDabDjFTHxErk7UCNo6h3WT8nHuvJ4pN-UVjkqogg10UcuSFykFviFygFVchNUQ99Lcg10YVcEb3JZTGYXBKjYRK5KGbBInJBrCTJYgNsJOfFJpIkNpNzYgs5K7aS02IbOSW2k5NiRypcnxzH-TH0f3cUMUcQewQ5h8RackCsIPuxj3vEbJIoppKdYjzZJkaQLWIQ2Yjrr8M8_hZtyQrRjCwVDchCUYvMwzxnivJkvChChovcpD_2uacIJ52ETdqIr3pz8UJvKG7p9cRFvTb2vLr4V68sdut_iM16GfG3XkIs1ouK2XoRMUsvLGbqhbBXv0BB7F1-yId9zJNqhp4b47kQm1PM1XOI-bBA_0ksQrsYfSsxvg5xm5GzU_9Z7NULiEOodQw1T-u_i6t6SfEQ13wDOikrnBBOyohYUlLkJIWxjnyiE8mGvc2AvQwX50iQSCFUpKFv-U_0Dc9BX_Oc9BXPRV_y3PQ5POV56GOelz78n_LQB6ly0_uIu4_4e8j97i6PgTRAcZ5C7vE75CFPIo_5QfKcbyEv-Vryiq8gr_lCmA1TSAofh77hGB_wQ3_yjPcjT1P1JU_gMe9DHsFDeAD34R7chTsYv52qH7nJh5BrfBS5wieQi3waSeZzSRJfTM7yleQ0X0eO8T3kX36SHODXyF7-hOzin8gWbtB1PJQu5xnoMh5Ll_I4ugQW8Yx0AY-n82EuT6CzU8VDHJ2F2Fk8HZ2J9c7kAYimM3gkREA4hEEohIAPvHQ6TOMeOoUH08ncTSdyFx0P43gQHQtjYDByeqJmB56JNsW-1uEFaSVelJbgpWl-_keqX3kxWoTnp8V5Nlqap6d_4HqVkVudM1qbfyS1-Qd4D-_gLanFX_-QQmpCDf6KVIMqUIm_JBXhDygP5dBXBrGlkFcCNX5HvaL8CynMv5HfuI5rM5oL64jD-iPw-jsxF41Xpq9YA3qHtaXnWR96hA2niWwSXc_m0sVsGZ3G1tMRbCvtyXbT5mwvbcj20drsAK3C_qXl2FFanJ2khdhZmo8l0xzsEo1md6jBntI3-OcG_UKPUca2UIvNp242ioageigbQsPYQOgHfaAn-rpTH-tGg1lXxHWlTrDAQJ_AGGU9qIa4r7QffUcH0Zd0GH1MR9O7dDy9RqfQC3QmPUvn0eN0GT1A19FEup1upvvoGnqULqXnMHKVTqf3EP2AjqWP6Cj6hA6HIfQpHQj9cdwH_X0w3gdxvekduA034TpchSsY-wd5a-g0VFuK7K20Iz1MG2KkAn1OC2OtBaiD5cZasmMnEmhGloH-xAI0PwunRZmXlmVpaAXmotWYE7to0_rMoI0Zp82YTluxD6QVe0OastekAXtF_oRqUBHKsBTyO_yGsXyQHXHx7C2JYe9JOPLSsI_EZJ8IZV_Je6phNQQz5_Q8ldgBg-6mNt1InXQ5DaILYTaOp1IHnUgt7IfCfnCsS8eufiHD6Ad4S4bTFDKSviCj6VOCPSMT6AMymd4jU-kdMp3eIjPpDTKHXiPz6BWygF4mi-hFsoReIEtpMpwny2gSnIOzcIYsh2X0NMZOkcX0JOJPIO8E8o-TuTAbZiF-CGq1Q_1a9D4phmtnpa9ICOaj0_fkIfkA78kDuE_ekXtwl7wld8gbcjtVCryEF_AM_U_gMTxE3APE38c_93B0hzxKHblNnpJb5Dm5iaybyL6OilfJZ3KFaPQS4ViTgTU5sZ5grCcE885BD5FydDdpRjeRAXQV5jyPbKKTyQk6lNynQ8hDOpg8oQPJczqAvKT9yWt4R_uRj7Qv-Qy4h8k30Fl_QtgAwthAwtlgItkQosBgQ2EYDMdrOgJG4ngUjIbxiJuC-BnInUM0tgD1lpBPdAX5QP8mbzGnl3QHeUz3kXv0MLmB-V7G3JPwGp2it8mRVLdwfIsk05vkGtzF6_iYXiev8Fq-R9w3rNlmySSMJZFYdo7kYmdJYSjPzuCePEOaQw-cj4LZ7Dz5m10gu9llcpJdJzfYXfKSPSAf2UPyjT0ijD8ggt8jBr9BFL8EJ3D-L-H8HyL5bpzvIhbfTpx8Kwnmm0kI30QiU60hYXw5zhcSL540Hj6VpOHjSRAfSRx8MPJ6EZ13JV9ZB_KJtSVfWCtcryVqN0etZsj_rgpifid3WB5yiGUmy1kMGcnCSUuWBu8nB8nEbJIeophFQphB3EwSizHsrYY9-Kh_ou_1D_St_o6-0d_QFP0VfaU_py_1J_CIvtDv0-f6cfpE30gf6DPoXb0fvaU3pTf0cvSanpNe18NwHERv6gz9H8lt_Tm5o98l9_TL5L5-ijzS8UzV15I3-nTySR9IdNKaKFKdBJHCJIRkJgHiI3GEk-zktZ4P2UXIGb0s2afXIBv0v8givT2Zoncgk_WO0JlM0rui7Q49oTf0wXhf6Jdqqt6fTIPp-gAyA2bCLFx1NsyBuTAP5v-wABYibzNqHdZ7kCt6N8y2MyGkA_GStiQjaUUKkBakDGlOapOmpCX0hJE4n4X-VaQN2Qm7EJtI2pHdyNtNOpE9pAvZS7pBD7IvVU_oBb3R1xvjfaAvYvsirx_y-5MdZADZRgaSrbCZ4FseGUzWw1pYSYaQxTCXDCUzYBKMgWEwEP1N0ZYhw0k2Mop4yFjyXp9ErurTyF59Nlmiz8Ha52Gv5pPR-kIySF9EeumLSUd9KWkJDfVlpJq-gpTRV5Pf9HUkt76JZNK3kxh9DwnBq-fQTxBdP0_eaNfJQ-0Bua69Iue0z-SoJuk-zUt3aD4Ipdu1cIiEaAhAWkiHsfR0p5aBJmqxdDfs1eLofjgAB-Ff9B3D-EnEnUV8MvIuaTH0Gmrc0vz0LtyD-_AAHqL_ETxGzHdPkPME-U9Q66kWDwmQGbKiLxvgG6CWn97UCtHLWlGapJWgJ7TS9JBWju7RKtBtWlX6t_YnXaw1pDO1lnSS1pGO0nrRIdoQ2k8bT3tqM2g3bSHtpK2k7bSNtLW2izbXDtIm2kn6l3aB1tce0traB1pNM1klLZyV0zKxklpBVkwrywppdVh-rQ3LrfVhubQxLKc2m-XRVrOftR3sN-0IK65dYBW1i8i7zCprV1kV7Rqrqt1g1bSbrLp2m9XQ7rKaGuGttDA-QPuJT9WK8nVaVX5Ua8Afam241DvxeL0z_0nvyvPp3XghvQcvoffi5fU-vJrej9fRB_BG-kDeRB_Em-qDeTN9KG-uD-ct9BG8pT4KxvBW-li049A_HuMTEDsROZP4X_pk3gBtfSiCmFh9JDdR77nWjSdpzflOrTZfpP3Ox2gF-EAtO--uZeBttHD-lxbEa2qUl9feYw-eYq1PWF7tMfbgMcuB42yQWXvG4rUXLE57xTIgNkoL5qFaOu7RcvFg1EyDNfq0JjxM68rTav15nDaSZ9Ym85-0uTyvtoIX1DbyIloiL6H9y8tqx_kf2hleUUvmVbQrvJp2
C9e_z2trT3gd7SWvr73mjbR3vLn2kbfWvvL2GhGdNSG6aaboqblEb839QxoIFr00D3hT9dR8oscP3bUQ5ISIrtDlh87QCfFtUKel5hBNNSUaaVQ0xHXqax94Xe37n5d9958_q82h_7f_s9r_4r8s8H84ou9k90TRoHvidygF5YLuikpQA-oG3RGNg26JlkFXRf-gy2Jq0EWxOuiC2B-ULC7Cc-CuZBEB-aEGdIUpsBHOui6IV-ByXxQZ3MniZ3eSKOc-LRq4T4jO7qNimPuQmOU-INbCJvd-sd29VyS6E8U-9w5x0L1VHHZvFMfca8VJ9xKR5J4tLrsnipvu4eK-u6946u4sUtwtxQd3A_HVXUnINEWFnSaXcKfJINKk8QlPGo72DXelucOtNIc4SbOcf3SP4inuNvyxuwK_487Br7o9_Lz7HTvpfsVOuJ-yY-6H7Kj7Djvivs4Ouy-zf93n2SH3aTjMDrr3wXbYgP6ViFnMjrvnsFPuqSwJzrunsGT3ZJjELrgnprrongDj2SV3L_bQ3Za9dDdkH9zV2Cd3afbFXYB9dGdm79xp0B_EXrgt9twt2TM3ZU_dGnvi_kwfu9_TR-439KH7Kr3hPkAvuv-mZ9yT6TF3b3rA3ZjucZejO9y56GZ3JrrJnY6ud0fQtW4PXeW26XI3p4vcX8lc9zsy3f2MjHffISPcl8gA9ynSy32AdHbvIG3ca0lT9xJS372A1HHPIbXdM0gN9xRS1T2BVHKPIRXcI0k591BS2j2IlHQPJMXc_UlhKOjuR_KhzeUeQLJjLCtiEtwjSKx7NEnrHkf87okkAnVC3NNJsHsWcbmXEt29nqS4dpE7rkMkyXWKHHBdJJtcN8li1wMyyfWQTIBxMAZGwQgYjrGhrvtkiOsuGeS6RQa6bsBVHF8mg5E_1JWMmCTEnkHOKeSeQI1jqHUENf8lU1wHyTTXfjIj1T7YC3tgNyTCrlTTXTsRtwPx28lk1zYy0bWVjIdxri2ouQW1t5I2aCu6NpOcrg3E51pL3getJpeClpNdQUvI3KBFZETQfNIpaA6pGzSTlAyaRnIETSaRQROIDBpLXjrHkPvO0eSacxQ55xxJjjpHkL2w1Tmc_O0cRhY5h5JpaEejbwDiujnHk9bOqaSRcw6p5VxCKjo3kqLORJLDeYikdZ4kLud58s1xmTxx3CCXHLfJIcddstNxn6x3PCTLHI_JHMdTMtHxkgx3vCZ9HR9IF8dn0tbxlTR1aLQ-1ICKjm-kFPqKYCy_4yPJ4XhP4h1vSIwjhYQh1-V4ThTqfLMfk3f2I_IGUuyH5CU8tx-Qp_AEHuH8AdxD3G37CblpPyXX7Gfkiv2CXLJfkQv2a3Iekuy38B4-wmf4in6NnrcJTbYtesP20Ad2FH1px9IPdjZKHPmo6ShMgx2laaSjHPU7KtB0jko0zlGFZnJUp9kdNWguRy36s6M2_cVRlxZ31KflHQ1pNUcjWs_RhDZ1NKXtHM1pN0cL2t_Rik52tKXLHe3pLkdHetrRmd51dKUfHD2ow9mbBpx9aIKzH83pHEB_cQ6ixZ1D6R_OEbSGczRt4BxHWzgn0g7OqbSbcxbt41xABziX0aHONXSEczMd7UykY52H6HjnKbQX6RjnDTrc-YAOdj5FbApy3tC2zre0JTRxvkO997QO1HB-oJWhPJSGn50faTyEgYL3jo_0ASQ7PtFDsB_2wE7HZ7oVNjq-0LWOr3S14xvW9Y0uc-hsiYOwxQ7GFjkEW-iQbIHDYPMdFlonpEGfD2NhiIlCbAxb6kjPljkysuWOwmyDoxbD3rCDjlHslGMxu-RIZLcdyeyp4yV769D5Z4eb6860XDhzcMtZlLuclbnH2YiHOTvzaGdPHnAO4DHOYTydcyxP75zMY52zeEbnAh7vXM4zOffwHM5k_rPzGS_k5KKYM0qUcuYSZZxlRXlnI2giyjmboW0BraCN-MPZDjqICs6O0E1UdPYSVZx9RXXnAFHbOUjUcw4WjaA5jtugr4ezt-iPuGGIH-FsLUaj5ihnfTHSWVMMdZYRfZ2_il7O7KKbM63o6vSILphHF-c73sX5EI7DOj4A8x7j7MsXOZvx7c6a_KKzDH_vLM2jgkrxgkGVeY2gOrxTUGs-MqgPnx80ka8PWsb3B-3mR4OSeVLQM34-iIkLQeHiTFA2cTyoiNgbVE1sCmoqFgV1xLOzrxgZNFL0CZoi2gfNF42CVoiqQRtFiaAdIm9QosgRtFdkCdovMgYdEumCjojooOMiLOiU8AadEy4ICjovnHjeOvAMtvEstvFMtoKuww1hBt1EewtjtxF3G_F3RBo8vz3ghRA81yPAD-kgI2SBnJA_6D_P_6KYzw7XcnHQtVScci0SF13zxA3XTHHfNVk8dY0RKa4h4p2rj_jk6iy-uFqLb67GUEd8dVVFXznxwfU7YoqIF65C4omroHjo-lncdeUVN125xRVXTnHBlUOcc2UTh13ZxW4cb3TlEStdBcQCV1Ex01VGTEKdsa66YqSruRjh6iiGu3qLUa6h6BsnJrumI2aeWORaIJa6FooVrsVitWuJWIu5bnQtE5sx722u7_P_rp3I5u4Nw0Uu9ySR3z1LFHMvxPeOJaKme5lo4l4kOuC8s3uB6O6eJ3q554q--G4x0D1TDHFPF8PdU8Vo93gxxT0M3036igXuLmKhu5VY7G6ItoaY7y4vZrp_F5Pdv4pR7nxikDuP6OnOKdq7c4umOK7jLiAquwuJ0ogp5i4tfnVXxBxqiNzu-iKnu6nI7v4-v-_-8521zP_zf7-A_O__WNn_P_9jYf_Ll_logxgrbdNYaHuMWXaUMcWOM8bbPxmj7ILGULu4McCuYPS2axld7cZGB7ut0crubjS1BxoN7dHGn_ZUo7o936hoLzAqwB9QHspCaSgJxeF3KIa4YvY8o6g9F-bAbKOIPQtmwkSMjUDsAOT0QG571GiOWg1Qt6ZR2c5r1Le9Rhv7tepln1Uj7fVqpj1erbTbq512RXXCLq9O2WXUGbukOmcXU-ftwuqC_au6ZOdXl-286qqdU123s0NmiMd5BvSnQ0xAJdl-5Ear43aUOgwH7Ei1z45QiXa42m6Hqc12qNpgh6hVaJfCfPTPQsxU5E6w06sxqDfS_ln1s0upLnZN1dJurhrY3VU1e7gqa09Xhe3lKq-9SuW216icmHd2e5PKam9Vme0dKsFOVHH2XpXB3pcqPaSDtBADAfBDNEQhLsreoyLt3SoCwpEbbu-CnbAelmN8HuKnosZY1B2Ca_TB9bqoPHZLVdBuoIra1VVpu6yqaBdRNbAvde0sqrGdVrXCuttijW1tN9iqtS1VC5upJraOtWiqtv1N_gHF7K8yH2Sxv8gY8IH5_X_Sa32RKdZn-QCuWh_lGeu9PGi9kTutl3Kd9UQusR7KedY9OcO6IydZt-Vo65YcYt2U_awbsjt0hBIQCS_NG_IgzIR28DuEQxrzprTMW5Kad-Rn4658bdyXT42H8q7xRF4z3sh_DE2tNCw13vCpbkZaVc_Ipoobv6isRhnlMyory6ipvqn66rVqoh6oVuqKaq9Oqc5qv-qqNqkeagPazaqj2q7aql2qpdqrmqoD6i91WNVTx1VtdVrVUOdVGXVf_aY-qNyol1lF4zrZjVBV1AhS1QyhmhtUtTZ01cH4JrsYX2QP45PsY7yXA423cqjxWo40XsrxxnM50XgqpxiP5GTjAdyRE4ybcqxxRQ4zLiPukhxiXJSDjGTknZcDjHOyv3FW9jNOwyk4gfNj6D-K8cOI-xfxh5B3CPkH5DjjHznV2C_nGvvkEmOP_Bs2G7vlLjgAD4xEaZuJMhtUhi4wA3bBTXgB3yDISpTRkAV-gbJQG-pau2QDaGTtlE2sHbK5tV22srbJttZW2d7aIjtYm_F6bpSdrA2ys7VOdrHWyK7WatnNWgUr8XqvgOWwDOdLYQkshkWIG4o6XWRTq7Gsb9WRVa2qsrRVReazKstYq5qUVnX5xqwpb5u15Wmzjtxt1pOrzYa4VxrL4WYz2dVsL0ub3WWU2V8-N0bIfcZE7O8c2dxYLgsaW6QLa_-s9ssH6rA8q07I3eqsXKEu
yCnqquyvbsnW6o5sou7K-uq-rKkeysrqsSynnsni6oX8Tb2S-dUbmUu9l9nUJ5lJaSpOMZVemSqtClIB5YXcKlpVUVGqk4pQk2ADnMX5K_SnMQLKY8TgboxRobhzwiDCSKeijPTKb2RQASNWpTXiVDojo0pvJKgMRiYVa2RRcUZWldHIruKNnyBHqoxGTvTnwnjuVBmMPMjJo8KNfCrIyK-4UUB9VAXVC_WruqcK424vhnmUwl1cGsrgzi-nTqryUEGdUJWgMlT9oRr6qyGmOmKrqzO488_COUhWNdUluKpqqetwC-7CA3gM1KiOOdTEu-JPvPsaqD-Npqq90U4NNbqrWcZANccYpOYbg9VCY4haYgxTy4wRaoUxUq02Rqs1xli1yZikthkz1S5jvtptLFP7jDWwBRLVHuOg2mlcVFuNJ4j7ptYZbmO1kd5YYeQ1lhiljYVGHWOe0daYbfQ3ZhgTjanGYmOSscWYYBw2xhmXjTHGU2OU8RGkOdLwmqOMtOYYI5s53ihoTjJKmTONalDdnAWzjRpQ05xj1DLnwrwf5qNvISzG-BLELUXOMqOqudyoApXNFUZRyGWuNDKYq3CNVYYwVxvvMM8Hxt_GhR-S4byxxkgy1qY6Z6yD9bABNsKmVEnGZtgCWxG_FXl7jIfGv8Yn45ThNC8YAfOGkdN8YPxuvsR8PhgtzE9GO_Oz0dn8YvSEfjgejP4R5jtjrPnKmGQ-M6aaj40ZyJlj3jUWmLeMxeZ1Y7l52ViFemtNzMI8bWw0jxubzcPGVvOAsd3cZ-w0E41Ec7uxx9xq7DM3G_-YG42D5nrjkLnWOGyuMY5ijcex5pPmIuM09uysOc1Iwr4mY58vmoONK2Zf45rZ3bhp_mU8M8sZn818hmmlM8Isp5HR-qjyWXdVCQv3mnVE1bH2q0YWPoGtLaqjtV71sP5WA63laqS1RE2yFqvJMAXHU2FaqqVqOsywlqmZqZbDCjXLWgmrYDX8rWbDLNSbYW1G7nbUSlQTrH1qrHVAjbIOq-HWMTXEuqy6WI9VU-uzqmE5jDJWtPGLlc3IbhU20lmVDJ9V03BZ9Q3bampIq41BrM7GF7OX8cEcaLw2RxjPzbHGY3Oicd-catzGvXQd985l3C_JuFfO4r44ifvhuPk39uv7vn3fv43GAeznfuzrXuzv7tR9_r7f3_f9-_5_fx2-vx5JxgbzorEOr_c68x5eo6c4T8HYe2MbXuddJjH3mdw8bLrN22aI-dqMMpkVZjosr-mzuBlqvTEirHNwxAi3dqPdBCtgrhFpTYYRRpTVD_pCHyPa6m34rV5GwOpppLV6YO3djfRWNyMWbSzO4yAjxjIiJh6x3yUgL8EaZmSyJhqZrdlGVmuZkc1aj73bZeSwDhk5rdNGbuua8bP1xMhnfQRp5sP8frbSmgWsbOavVn6zuFXMLG-VM6ta1c06VgOzkdXSbGl1MTtY_czu1giznzXWHGiNN4dZE83RMNGaYE5D32xrlLnQGmIusQaYy63e5kqru7nK6mSuttqZf6PG31YTHDdEXzVzhVXGXGb9hthc5mIrHqIgDc6FuRR79d0yiwFFLYL473TU1JCvow5BPWquRcw6xG5A3kasZZOlIMzcZiWYu6wC5l5c54D1p3nYam0et_qYp60xZhLmfN6aZiZbs8wL1nzzkrXEvGytMK9aa8xr1gbzhrXJvGltMW9b28y71g7zvrXLfGglmk-sPeYzeGntNV-jfWvtNj9g7BNiPltbza_I-2ath9WmZi83dXsRzDWJPdOk9hST2eNhtMntUTDSFKlGmBKUPdw0wATrBxv9DnAiLghcyHMh321PMj2oGWIvMMNwnUh7rem3t5hp7UQzg33AzGgfMzPZp81sdrKZw75i5rVvmAXsu-Zv9kOzuP3ELGs_M_-ASlDNfmrWQl9djDWw75uN7DtmE_uq2Ry5LexTZkv7iNnK3g87cbwZfWvMZlhLQ7uXWc9uaNaxS5l_2tnAi-NPRl37plHPvg5X8FvhktHATsZvlHPGX_YZo7F90mhiH8fvlmNGsx-aQwv7qNESWkFraANt0d8O2kMH6Ii87zrZJ-C00dlOwm-hC0Y3XKe7fcPoYd82etr3jV72Y_iI30qG2dsOg4yQ1-xjl4Bq0Bi6mH3tQeZAe6I51J5njrFXm5PtbeYc-x9zmX3C3GSfNXfY58299gXzkH3RPG5fMs-hvYTzm3aSeR_jT7E3r-zj5lvszyf7kKk59pvcscc0HbtMp2O7GezYZHod68xQx2ozzLHMDHcsQjsX5zNNj2OUKRw9zC92czMFc3piFzPv2NnNa3aUecE2zTM2MU9hDSftFOOE_cQ4Zd81TmNPk-yLxiXs5U3s4337sPHE3m-8tHcZb-zNxgd7jfHZXmZ8w-874phoSMcQw3Z0N9yOlobPUdeIdFQwYhxFjVhHHiOzI9LI62BGMcdjVdGRpBo4ElV7xwo1yDFFTXUMUqsdA9Q6R3-10dFPbUG7Hec7HYPVbsdQtc8xSh1wjFGHHOPVv45J6rBjqjrqmK6OOWaqE47Z6qRjjjrtmK-uOxarp47l6pNjlTKca1SIc53K4FyvcuK4CBRzrlbFnatUKedyVca5VJVzLlblnQtUBec8mKMqOmeinQZT1B_OiRgbp8o6xyB2lCrtHIG84aqEcyhqDEGtwaqoc5Aq7ByoCsEvzv6qgLOfyufsq_I4--CavVV2Zy-V1dlTZXL2UBmd3TGXrirG2UVFOTurcGcn5XN2UMHO9irI2VbZzlaKO5upr45G6p2jvnrh-FM9dOBblqO6ugzn4KijBvailtrmqKPWOOqpJY6_1GxHEzXJ0UyNdLRRXR2dVSNHL-zvIFUIe5YZexWO_VHYl7f2MvXCXqke23-r-_YGdcfeom7g9-M1_La8bB_C7-Vj6qJ9SiXbSfgNfQm_pa-ps_Zt_K6-r07bT_A7meLeCDeO2tmNQ3YJY79d19hjdzZ22SONHfZCYyfuiV32eRy_MLbhftpipzM32r-Ya-3q5mq7nbnCbg8dzOV2R9zvncylsNjubC7E-2IBzId5OJ-H_rmImZOqgzkbebORP9v-w5xlZzFn2rY5w35kzMC9OMNeasyyhxhz7cbGIrumsdQuayyzfzOW2zkhzliB-a6wnaAbK23yQ0Z8xmYy71hZITs-a3NALvOelQfy4XM3PxQwH1gF4Rd8Bv9qPrIKpXqMZ8eTVIXwmVzIfIGxV_AacW_gHXLeI_cD6nxCvc9WTvOL9RM-o7Pi8zkTPp8z4rM5Ft4Yyj5gBNtTjGi7qZHF_tkoaNtGefs6fnPj16i9SvWwF6ve9hzVH7_pB9nj1DB7uBppD1Bj7J5qvN1ZTbLbqil2czXVbgT14E812a6J_poYr6lG2bXVcLuOGmzXVwPthqqf3UT1RXxvu5Xqac9W9e0TqpT9TeWwcxh-7J9tzzC-WieMF3iu3bdMCMJ-BEMo9icSAtiv9PB9_777zx9IXvk_9y_RyX-zP1v7r__l-v_1jP87Z_Jf_CWACtIn5zOfXAIrmVeugY2wjXlkIuxnaeQhpuRd9k1Q_lbE8KeiEL8t6vKLohc_KWbwfWILXyuu8VmCiKEiTrQRJUU10ULkE8NEhFgiPvC94hE_Jq7wZHGc3xK7UWEtfy8WcConcqccxENlJ55e_sUzyUo8hyzMc8nsPI-MRmvj_CPLJJ-wOHmdpZWnWZT8h4XILcwtVzBLzmZcjmdfRG_2SjRn90VVdkUUYSdFVrZfRLJNwmRLxQc6Rdyng0QSbS_207piAy0jFtK8YjKNEUOpJXrRFN6J3uGtaBL_ix7ktegWXoku46XpdF6UDueFaLdURWlXXoJ24WVoZ16edkJMR16VduA1aXv-J23LG9BWvDFtxlvQxrwNbcA70jq8K63Je9KqvC-tyIfQMnwMLcEn06J8Nv2NL6a_8NW0IN9MC_DdcBQuwB14if4v9FdusN-4lxXhMawEz8BK8oysFM_MSvPsrAzPxcryvFCAleOFWHleDErj_A_EVGbFeHXk1mD5eS2WC202XoVlwFgUYryIdfJfmOS5GeVZ2DeWln1lHvaFcXhHP7MH
cAmOwS5YQ7-wZfQrm0c1Pp0SPoFyPpIqPohavBd18s7UhfW6eTsajLV7eEvq481pCG9Cw3gjGsEb0ihemWbE_mXmBehPPDvNwjPQBB5JI3kwDeImfcsM-pqZ9CWz6HPmpE-Yiz5iwfQh89IHLBSiIT3O4yEbxnJDfvqY_QbFoQSURF8pxJWm91lZehdus3L0JtzA8VVWhl7G2AXEnEfsWeSdZr_TE6wYPYY6B9gvNJH9TLewPHQty0mXs-x0ActCZ7IEOonF0mHQBzrhvBX6GyGuDvuVVkfNiqwSLc9q0TKsIS3BWtBirCMtzHrSX9lAWpCNpD-zaTQXW0KzsQ00ge2lGdgJGmBXaAR7SH3YczfTmJMZzGJpmGQReCXSM8qyQl5GWGG0xRljpeEPHFdBX02mszrsG23IvtDG7CPtwF7Rvqg2it2k09gFupidpOvYQboLr-ARthGrXU2vYAZ32Vzs8HT6gU2kFHekgw-noXwwjeH9aTzvTXPwbjQ_3hFFeFtaGndzZbyCtXl93M31aF2oz-vShtAImkAzaI7-FohphXdBa7yLWuOd0IY3hWZ4Z7RA2wp9HWhL3h2xfWlTvBsa81H0L9xJDXBH1eNzUX8xLKd_8r_Rrse1NuFaWzG-HdfajutsR_1ttB36OuJd04VvwLtyLe2B-N58BR3E59GRfAqdgDtzGtYyF---Jbjuatx9G3kNuolXp5tTVcM7vBrdCtvwDt4OO2Anznelqk4TYTdyduPdvSdVLWiA8-bQHrpBP8QNhbEwFaahbwbMQuwcuhfz2ccX0H_4QnoADvFF9Agch1NwFs6j_wJiLvL59CrybqLGXT6JPkDNx3wEfYbX5SWuk4JPkS_YUyH-oEHiZxoq0uHTy0ETxFuSS9wgv4gj5FfxLykkDpDCYj8pKvaSYmI3KS52kZJiBykttqYqA2WhHPwhtpEKUFFsT1VJJJIqyKuGGtVRq4Y4RmqKk6S2OAvnSV3xgPwl3pNmQtF2IoR2E7F0oMhJR4vf6CxRlq4S-OQULek-0ZP-K8bQk2I-PSM20fPiME0WV-EOPML5S5ok3sNXek5wdlbY7IxIw06LCAhAevTFsSSRwC6KzOwaPs3vi5_YC5GLvRX52GfxC9NkUcZkKaiAJ0B1RmRdPJ8as0-iFXsvOrLXojvi-7EnYgh7IEazO2IiTGa3xVSYDjNhNsyBeRhbwO6KheyeWIT4xeyRWMIei6XsqVjGnsNLeIPzj_ANY1QuxjNxEXPIhXgSLWD_eYb-R22xk9UTu1hjaAkdoYdIZANgpNjNJok9bBYsFPvZCnGArRVH2GZxgm0XSWy3uMz2iVvsH3EPHrMD4jmk4Pgdnmgf2V7xBTFf2U7xDfEa3yJ0vhHWC8LXwCpYgef0clgGS2EJLIZFGFsIC2AE6nUQbzDXFFZMvGVZxAfmQ71vXPGHPA2_yz38BvfxKzyUX-Dh_CyP5Cd5ND_CA_wgT8sTeQa-hcfyNbAMx_N5Oj4DYxN5FB-FnJEwAvnDUWc46g3jLnCCjXMLsR_ZKv6I7eaX2Vl-ij3gB9k3vgdz2MGyY_9yYc_yQUEoDLiPWVn0V4baP8TxIyKaHxXBaA1-GDtyCCs6IJ6k7mCiuMC2iVNsoziEHd7NVootbIlYw-bjFZyFV32qmMIm4I74bpyYxMbCaBgJw3C3DIHBMAjnA2EA4gYgpz_uoH6ppsEM1lfMYn1Qr7eYy3qJ-bCQ9cQd1BPX6Sk2wX7WXZxh3cQN1lU8Y53FZ9ZJWLyDCOPtRRbeVhTmrUVV3kI0501Fb95IjOP1xSJeG9-qqontsItXFXt4FbEfDsK_cBROoP8Uxk_zGuIsryWS-J_iPK8rLvAG4iL_C5qIS6h5kTeHluhvLZJ5G8S0Q2wHcY53RG4XcZJ3F8d4L3GE9xWH-ABxgA8W-_gwXHOkWIdvdfNwN43lm_Btbyfm-I-owg-JX7HncT90EkFYkQv3uRvSQDDuLQ94U7UXPtZGhLAWIow1xXv8L3wzqy-i2Z_Cz2ri_V5VxLBf8H7PgPe6Q-Rgb_Ct5iovyA7wIrhHSrBJvCybwMuxsTAKhsMQ9A2E_rwM68NLsV68JOvJi7Pu-GbTFXld-G-sM77hdOL5WUeeD_JCbpznRP9PGM_GuvGsiM_MesAAHs9G8DhcJz2biW9bC7mfreRRbAOPYDt4GDvCfewi9-A-TcPecRcTwoF71cacTdyrihWAolAaKkFNYbAG0Azj7X5oL6xUHZDXAfkdhTPVf_YvCE_-AUyx_njC98eTvT_7SvuzT_Ae3tB-LAXu0F7sPO3B_qXd2XZYBXNwPhb9_fH07wt9oBf0wHeVbrQ36wKdMN6R9mQdoD3i20Fb5Lah3aDrD12gE_o7QDvE_A_27jLYiiPcF35Pj_R0z_TMWrPWFtzZvpEAAYK7bnzj7i7BHYIGd3d3d3cnENzdNbhz_yF567Xz4ZV7TtW9dT_8qqe7n35aZpYBlbSB1ohviXEtML65NkKtry1Sa-H7S1XtilpZe6dW1PxaRS0GimlVtOJQAkpCKSitJWplfqiqlYUErZpWXquhVdBqYkRtrZJWB99l6iKyPjREZCNoAs1QbwGt0N8GcW0R3w45OiB_J62w1kXLq3XTcmo9tJ-0Xlqc1keL1PriO1M_LTWkwFkmgRDwwAHrX379pR6iv9CTQWr9uR4B8fozPTvk0Z_qhaEIFP3hmV4M_cV_eKGXwNgS-l_wCl7DG3iLvnfw_odi-gc9t64a8To30uquEaL7DVP3jM-ag9e_ZdzSqHFDU4zreMe7pn3Tr2pf4DPeCT_Ce3gLb9D2Gv1_6de1l_oN7bl-S3um39ae6nfhITxD_RW8h6_oV7FGjjX-vb-_PdYy68-1n_S_tBz6G_wOeKvlQ2whwArx--GDVg7Ko14BKurvfqiEuMqI_1sV_TW8gr_gJbxA-_MfKmH-SvpTjH-M3x-P8JvjAfLe1wrr9zT8PtTyYK25ICf8DDkgO9r_lg17-Amy_nBPy4JxWTD-Hw-x7kfw-F___CnE-P_1T_n_a_45GP1__i_GqFLA2ED7iw10gNhIB8EQ-F1sosNghNhMR8EYsYVOFjvoDLGHzhMH6BJxmK4SR-kGcZxuw_VetB1G3wnE_In482IdvSJW0htiMb0r5tGHYiJ9I4ZQYnWnttWKhlt1aXqrAs1sFaZ5rBy0hJWNlrSy0jJWFppgZaYVrHhayYqjiVYsrW7F0Jo_xNJaUBvttdFfx8pE6yK2LsbUxdi6yFEXuepYOSE3YvIgPi_G5ac1rNLIWZUWtxrSfFZbms3qQWOswTSNNQ5rmUVdax7WtYhyaxll1iqqW-sotTZjvdvpN7GbfsHevoi9sA_2wwE4CIfo1x8O0-_iCOKPYtwxqlnHkeM4cp1AzhNUgI26Az70e4gLWEdoiHWYhlmHsIa9NKW1G2eyE-vaSbNYO2hOlPnQVhR9pa2DOItjtJ71B21pnaWdrYu0r3WNDrNu0QnWPTrbekgXWffpKusu3WjdoNutK3SfdYYexHxHrf30iLUP9sAuehi5D1vbYAs9ZG2CDbCaHrCW0v3WfIybRfdaU-genM1uayTdaQ2hO6xf6SarDl1jlaDLrZ_oQisl5uR0qvVamWBdV0ZZl5WR1gVlhHVGGW79AceUYdZh2K_8bu2GXbAD9e3o24a4LYjfjHGblDHWRmXsv8bBeJiA9okwCTGTETvZOqTMts4rC617ynLrrbLG0rDPIN1mpae7sJ79VkHspxw9btWip6wW9JzVlV6yBtFr2MNtaw69j309xP19jPv7xFpJn1tr6EtrPX2N_b_FOXzAff6E8_6O89HsXZSDY--kAXs7Dbe30GT2JprC3kBT2WtpansVTWuvoOnspbCIprcXwCy0TaZp7LHoH0ZT2gNpcrs3TWp3pWF2BxpiN0S-KtSwi2GOnJgvCvMno48sm96yvimXrffKeeulcsZ6pJyybivHrSvKEeucctA6qezD3nfjzLZZq5Ut1gJlkzUVRsEA1LsqW63Wyk6rvHLIyqactpIoV62v5KF1m7yxDhNqryCuPY6ksEeRVPbvJI09iKS3-5OMdm8S
aXcj0XYnEmu3J_F2W5LJbg0tcd0cmpI4uwn6GpEYuyHi6pC0dg2SxE4kfrsSMe3y5LuVQN5aZchTuG2VJjdRXrPKkitov2iVJ-esiuSMVYmctqqQP6zq5IRVixy36pKjVkNyxGpKDlstyCGrDTlodSAHrGFklzWfbLF2kHXWBbLCekkWWVyZY6VVplm_4HnIj-eiEJ6PYnhOSiqjrbJ4dsrjOaqMZ6oqnq1qylCrOtRQhsBgq6YyCAb-awD8hvZ-iOmD2F4Y09NKVHpYVZTuyNEd-bpbRZVuVl7Iget4yAipIAxxHuJtjDOU3paCHJ9JX-st6Y91_mY9JgNw3gOtyyjPwHHSzzpAelu7STdrK-lobSCtrbWkqbWSNLCWklrWIpJozSMVrNmktDWdFLWmkPzWJJIHckI21DNbU0mcNYNEIyYCsRkxJoO1BJbjeiXaVpMoaw2JsdaReGs9yYI5slobMXYTyW5tJj9bW5BrK8ltbSO_WNtJXpxrHmsXrvegbS_JZe1H_wHEHSQ5rEMYcwy5_iBprD9JmHWOSNwD1bpIPopL5Lm4TO7AVTgLx-EA7BBXyAZYKa6SheIamSWukyniBhkrbpHhAuch7pI-4j7pKh6SDtBOPCJtxWPSRjwlrcUz0kq8IC3FX_CKtBCv__UG3sI7tL9HzIcfWgtF6SGEMkQElIkiuTJfpFfWiDhll8ihnBD5lctwRRRQroqCUAgKK9dEESj6r2JoK464EspFUVK5IEop50Rp5Sz8CafRvx9jN4pflCXIOV1kVkaJaKW_SKd0wnzNRVCpJWwlQWhKQfGVZMMaM4rnJAn2Z2HP3_gV8p5fIC_5WfKY_0lu8z_IFX6SnOUnyHHYD6tgKgyEdlATikFmfpwkAz_iTX6KfDPPknfmRfLcvE7um3fJDfMpuWi-J3-YVDloSmW7Ga6sM9MpS814ZY6ZS5lsFlVGmeWVwWYtpY_ZTOlsdlTamH2VJuYwpY45SUk05ykJ5nKluLlRKWzuVvKbR5V85lklj3ldyWs-wvVrpaD5GX2UFjUFLW76aUkznJYxU9MEM4KWN_FZbGajVczckB-KoF6SVjDLor8iLW0m0mJmTVrAbEDzm81oXrMtzWd2wnUPWsjsi74ByDUIeYbSyuYwWt0cQWubo2h9cwxtYo6jLczxtK05i_5uLqILzNV0j7mJXjV30g_mfhrkR2kWfpKW5WdoW36JjuE36Dp-n57jT-l7_pomER9pbkHUWkJX2wtTHSRsdapw1VUioO4XoeolkUR9LpKrqpVazWhlUEtaUWorK04dZWVR11k51PPWL-pHq6Ca3C6qZrOLq2XtkmoTu7Taxy6jTrIT1NV2efWIXVm9BbfhDty1K0FF9Z5dQb3_Q3n1gV0OEqAslIHSUApK_nDfzqNetjOpJ-y06m47RF1nm-pC-zOdYr-gw-3btK99i_a2b9Be9nXaw75Gu9lXaVf7Cu0MHaGDfZk2tS_RmvYFWh6K2OdpTpRx9kV87lzHZ9RdatsP8NnymL6yntF71kt60XqLz8PP-AzX1Y2Wif1ydbVlqcthMcy3hIrPcHW6ZahTrI90sPWKdrKe0IbWI1oO3yXy4DtFJPKFWC_wveY1fSVe47vcG3y3e00PiVd0i3hOl4kn-E54H98RsXZxkbYUf9Lq4hgtju9I2cV2ml6sp55YRhWxkL7js-kTPo3e4BPpWT6GHubD6Q4-mK7hv9GFvBsdxdvQbrwBbcATcb9L0Z95XpqWZ6aSp6PvzTT0jZmSvjKT0Rd4Np-ZIfSx6dGHpkvvmza9Y3J6E-VdU6LPRbxHCQ-lJk9K_TwVTYocaXkEjeH4rsmL0Ma8Eu3P69NZvB3dznvTy3wEnqdpNChm0xRiAY0QS2hmsQLP1mpaBN9lE_D9uDo0goZiDa2PvnqIqYN91RJzaQ0xk1YTU2kivudWFhNoGTGOFhVjaH4xguYSQ-lPYgCNF71ptOhCM4pONKnoQF3RhmqiOf3EG9K_eC36kFemN3lJeomXoCexxgO8ANaWm27g2egKHksX8fR0Dk9Gp_MkdCoPo5N5CJ3IA3Q899Ox3EdHcwdnaNMRnNPfUQ5HfeSPdg_9QcSFIj4c4_4e_3eeFMiZhq7mGegWHkN346wP85yYuwDuz9_rKE3v8XL0Ja9IP_NqVBe1sebGNEy0pql-7KMr9tQd97kX_UX0owWxx-Lid-x9FC3_4xwm4Wym4Lym0xZiFm2L3wGd8HugO34X9BH__Ob4xz-_DpeS_2F-HSrzaX7NFPk1C6TIp_kgAKEir5YEkkNKSAWp0Z4GcWkhnSigpRcFtQyQXhSGolAcSkJp9JdFXAKUw5jKWlJRXfNEbczTQNNEU-0rb6m94-2057yj9oB31u7xrtpt3k27yXto13kv7QrvrV3ifbULvL92lg_S_uDDtON8tHaET9AO86kwSzvK56NtsXaaL_nhT75UO8OXIf5vy7VzcJ6vQI71yL1de8L3a2_5Se0Lv4A13NaEeIb9ftSCQtHDBNOTC6mnFn49owjRY0W4nlUk03OJlHpBkUYvLdLqlUU6vQ7KptBOpNK7ieR6fxGmDxOuPkkIfYHQ9LXItVt81U6IL9pV8Ul7LD5rH-EzfAPF-qxp1ieNgQBpfdR81ist3nqhlbGeaS2tp9pQ64m2GA7h-p71WNPsR1qE_VIrbr_Xmti63t8O6LPsCH2TnUc_ZSfqD-y6-gu7qf7ebqt_tzvppuyhe7K3nlz21zPKAfpPkB1-hpyQG_JAPigAhaCE7KeXlX30ShibKDvrNWR7vbZspdeVTfQ6sg5URb2cXksW12vKAujPqVeXWSBKryYjISOu06M9HfrTIC41xqTC-FR6PWiAeiNojL6mMq3eHLEtZAa9lYyAaL21jNfbIl87mV1vL3PpHWQeKKD_KotAKb0j5u4oq-idZE2oD02gld5ZdoAeehf5m95dDtN7yzH6b3KSPlRO1UfLmfpkOVufK-foy-VcfZOcp--R8_XjcoF-Hm7JhfoTuUh_Bx9w_Rl93xBHnNm64szQqTNVV53JMAjtHfWPsqH-RlbQX2Bdj7HeezKFflPa-mX5QTsr72on5CntoNyu7ZRLtE1ygrZK9tMWyzbabNlAmyarapNkaW2sLKANl9m1wTJK6y9Tar1kQOsiHa2T5Fp7qWutJdWaye9qI_lVrSM_q9XlJ7WSfKemlM_Ux_Y9daN9Wf3NPqWWsw-qyext6kNrnbreWq3Os1aoY61laj9rsdrOWqDWteapCdZsNa81U421pqmuNUl9Lcaq58UIdasYos4U_dT-oofaRHRSS4mWajrRUP3Ca6rneGV1BS-jDuLF1Tq8oJqD51Mdnkf9YuZSH5s51ItmVvWgGa-uN6PUeWYGdYyZRu1jpla7mynVjmYKta2ZTG1uJlEbmWFqHTNErW4G1Uqmp5Y1_Wpx06cWRJkH9Z_Rng39WRCbBeMym2khQs1kxkBmyA65IB_6C0JR9SezhJrdLI2xCWouswLyVFbzm4lqIbOWWtpsqFYxm6t1zbZqM7OT2sHsofY0-6qDzIHqaHOkusCcom4256vHzNXqNXO7-tI8oir8vBrgd9X0_Ikax1-pP_OPagFOtJLc0CpyqdXkQa0xT6q14Rm1vjxOG8uzaQt4Tm0zz6Md4_m0Gzy_9pr_8_5p_vve_4X8T_Ung_8v_93PQ_WRUcH_yCgDxfyPjfyQEzL7nxiR_qdGKv9zI8z_yjD8b4y3vnfGXd9744zvo7EHVsMsGAndoTFUgLwQBSGgwDP3o3EVjrufjO3uZ2O5-8WY7n4zhrmE9XBV1tLVWQOo5hqsnMtYUcgDWSHSNVkq8MCAj47Jnjmc3YSzcNgRbBtsdCy21rHZCkeyJY7L5jt-Ntvx2DQnyCY5oWysk5SNclKy4U469rsTwYY6sZAF19nYCOcXNtEpwqY7ZdkcJxFj67FFTgu22OkEfXE9gi10JrK5ziw2y1nAJjvLkG8lG-KsYb2hHbSBltAMGkMDqAu1oLqzipVAmctZz6KdbSyls5f5nePMcC6wz_IeeyXvw0P2l3zMXsqn8Bxeov4KXqPvDbxlb-Q79la-Z-_l
B_YRPsuP7Ct8B8X5xFTQgYEJAmznI3OcNyyt84rlcF6wUs5zVsd5xjo4T9kg5wmb6jxmK50H7Ihzj91xbrNvzk2WxL3OfnKvsQT3KmuOcgAMda-wEe5lNta9yCa659lU9wyb4f7B5rjH2Hz3IFvs7mMr3N1srbuLbXJ3sh2wD9eH0XbS3csuuQfYXfcwe-keZZ_dE8zwnWJ-3xmW3HeeRfgusnjfZZbNd5Xl9l1nBX03WXHfbZbgu8sq--6zGr6HrAE0g7a-B6yT7x7r4bvF-iF2EMYOQ55RvpNsvO8Im-zbx6b7drLZvi1svm8dW-xbyZb7lrNVviVsrW8h2-Cbzzb55rKtvllsp28G2-Obxvb7pv5wAA7CITgCR-EY-o_5prPjvpnshG82O-mbw_7wzWOnkOc08p32LYJVaN-E-J0Yf5DtxVp2-c6xbb5rmOseW-d7xNb4nsJLeI36O7be9wF9n7GOr1jHV7bb9w3jvmMdxDwIh3yKecRHzWNwwqeb53zMvOozzbson_gM8xXaP2LMd997pvmfMdv_kIX4b7MU_hsswn-VZYFfoCiU919njdDX1X-PDfc_ZrP8L9g6_xt20P-JXfIT86lfMV_4VfOlH3n93Hztt8EFD4LmX_7kiElvPvDHmrf82cyr_jzmeX8R87S_tHnMX8k86K9q7vfXMPf565h7_Q2gMa6bo601-tqZh_3dzVP-fuZF_1CMH2k-9o8z3_jHm9_9E03LG2-GeePMlN5YM703xozxRplZvZFmTm-Emd8bZhaFMt7vZmVvqFnTG2I2hBbeYLMDdPcGmf1gKIxAfTT6xiN2IsZO8UabU5F7mjcF5UzU56BcgPpic4a3zJzlrTTneqvNBd4ac7G3ydzgbTP3eLvNk94B87J31Hzg_WG-9s6aJHDJtEGCAy74wA9e4KIZ-OGCGRI4b4YFzpnhgbNm0sAZM3ngtJkicMpMGfgDjpupAkfgIOyDPbATtsFm9C82kwQmIc9gzNHZ5IEmphZINL95Rc0PXnbzlZfefOJ55l2PmNe95-yid4Wd9o6w494mdsibz_Z6U9lubzTb7g1iW7xebL3Xka3yWrPFXmM226vLJnp12DivJhvtVWcjvET2u1eZDfYqsIFeAuvvlWZ9vcKsu5ePdfRystZeNtbEy8TqerGsqhfFynkZWXEvNcvuJWHpvADze5J98xvsqZ-wy_6PxmH_a2Oj_4WxzP_MmI3PjPH47BiCz5Ke0Abq-f_5fKngH8ry-YfBCBgFo1l-_1gYzwr4J8JkVtA_gxX2z2XF_ItZSf9yVsa_Gs_uOlbFv5FV929mdf07WDv_Htbff5CN8x9lC_wn2Ub_n-yw_zye48vsCTyDl_5L7LX_Invnv8A--s-xz_4z7Kv_NNa9jxneeia9hSzoTWbJvaHYUw8W7bViWbza7GecTy6vCpRnOXEuObziLBvOJouXn8XhfKK9vCzSy8Myer-w9F5ujM3N0ni5WCqcWwpIjrOTXhbME89e-KPZTX8EO-1Pz_b607D1_pRYbwo2B2bAFJiAtjH-VGykPzX73Z-WDfHHsp7-n1kHfyHWzJ-A_dZgif6mLMHfEWfSH2fVH-f2GwyAgTAIBsMQGPqvf77VJP7nfKtRKitz2IGYWexszEx2J2Y6exUzjZHYKcyNncxSxE5iMbETWC4oHDuelY0dxxKhXuxY1hx-hZ4wKHYMmwkb4STch28QGjeGxUMxqBw3mjWIG8Xax41gfeKGsRFxg9m0uAFsSVwftjGuCzsR147djWvGPsfVZ_74GiwyviLLH1-aJcYXZq3j87He8TnYqPhMbFZ8BrYqPjnbGe9jx-M1djn-nXE__i_jcfwT43n8feNV_E3jbfxl4338GeNj_Anjc_xB2GV8id-Mcq3xKX658SF-ofEufjZipxkv4icaj-IHGxfjuxuH4lsbG-IbGnPjqxmj4isY3eNLGk3iixrl4gsb-eMLGpnjCxhpUHrxhQwV7W_jShr348obF-KqGkfiahnb4uobK-IaGzPjmhuj4lobfePaGe3jOhgN4roYxeN6GDFxfQxfXH_jTexA41LsEGNH7DBjTuxIYxD0g57QJXaU8Su0geaxo41GsWOMerETjLKxk43csVONiNhpRjB2uqHEzjCexcwwLsMh2Boz01geM8uYFTPHGBszzxgYs9DoErPEaBGz3Kgds9JIjFljlI9Zb5SO2WIUi9lhFIrZZ-SPOWLkiTlt_BJzycgVc9vIGfPYyBHz2sge89n4KUZjWWNsliUmhGWKScviYjKx6Bi8VmJKsDQxlVmymLosENOcWTG_MiWmI_se3YV9je7GPkf3ZJ-i-7CP0f1QDoDB7Ev0EPT9zr5FD2MkZjjiRzAV9JiRjAGPGc1Sx4xjOWMmsPIxk1jTmKmsD57FSXgmV8b8_Xz-7Z_XQbv_9ff-_7W_NpTNeguliK-eUthXFcoqhXyFlYK-3JBZKeCLUPL7Uih5fSFKHp-t5PJpys--r-Qn31uSyfeCRPkeknS-OyS57wrxfGcI9x0lxLeXvHO3kmfuOnLHXU4uuYvICXchOQqH4QDshV1o3-4uJlvdJWSzu4xsdFeQ9e5qss5dS9a6G8gadzNZ7W4jq9wdcBBOoH4OfVfIBvc22eI-JDvd52Sf-5occd9ijg_ktPuJnHO_YM5v5JqrKLddVbnv6spjlyt_ubby1nWUj66nfHJDlC9uUpSpUI9S3rnxyhs3q_La_Vl55f6CsgAUQXwJ5b1bBnHllW9uFUXxVVd0Xx3F9DVQbF8TxedrqQR8bZUwXztoDx3g1x9CfR2hE3RWQnxdfgj6uiK-q-L5uin-H7ojRzfFRZuGMZ_ctlhnc-WR20C55dZQLrsVlTNuSeUE1nLUzacccnMq-7DO3W6sstPNqGx1UyubsI_12NMqVyhLXaoscD-S2e5fZKr7mEzAOY1yL5PfcW6D3D9JP_cP0hO6uCdJe5St3FOkiXuG1HPPkrqIqe2eJzXdC6SGe5FUw7iqOOtE99oPVdwbKG-i7Rb67pDq7l3E3iO13PukDu5FXajvPiINMW9j9wnyPiXN3GekBe5RS_cF5vqLtHZfwRvSxn0HH-ATfIYvaP-GmO-IJUpz3Ltm2EsT3L9G0ADquZpSG2pAVaiMtgpQDnFlMKY4xhZ2v5J8yJcbebO770kWPBdxmDMK60mDNYdjPy72ytzj5Luzn7xztpPnznpy31lD7jgryS1nGbnhLCbXnPnkijOHXHZmkIvOVHLBmUjOOWPJWWcUOeMMI386g-E3ctrpS045PclJpwk56FQhW50iZKWTk8xyYskoJz3p6SQnzZwkpAKUdZKSEk4yUsRJSfI7acgv6P_ZiSTZEPuT8zPJ5BQisU5ZEulUIxmchiSd04akcbqTVM5AktoZAeNIWmcK-maSKGcuiXMWYNxikstZQgo4S0kpqIzr2s4i0hR97bD-rlh_P6x9KMYOd0aT0cgz3vmdTML6pzkDyEysf67TiyyAhbAIe1kMS2Ap6stg-Q99yArErnL6k9XY9xqsaa0ziKxzhsBQGIH6GLSPR_9knME0xM_C-LnIsxD5liDvclgFa1Bfh_b1yLsROTdh7Gay3tlCNjlbcYbbyQ5nB9nl7CK7nT1kr3OA7HEO4foI2ekcQ98JxPxBNjunyAbnT4w9gzkvYO2XyAznCvZ3hQxzrmLfV7D_y6SNc5E0Rn9t5xxJRGwCxhTH2PzOSZLTOU4yO0dxnodx1gdIUswXwPwO1mRinRrOVMEevsup5KscRz7K4eStHExeyv7kiexN7ske5LrsSs7LzuQP-Ss5LNuTPbIt2SJbkbWyBVkmm5F5sgmZLhuTyTAeRqE-XDYlQ9A_EHG_yXakP_L0kb-R7nIY6SRHkzZyImmKOevKWaSqnEcS5AJSUi4mxeRyUkSuJoXlBlJIboVduN5PisrT6L9IKsmbpLa8Q5rL-6Qjyn6oj5DnySR5hkyVf5AZ8jiZIw-T-RizSO4hS-UOskJuIavlRrJOriUb5UqsfRnZLheRXXI-2Sdnk4NyBjkip5OjcExOI8fhBJyEP-DUDzPIaTmT_In4M3IOOYs1n8Oa
z8uFsAiWo201-jYgbgvid2L8XuQ6hJzHkP8Uzu4cykuoX0PfLcTdQY675DLcwPUDeZs8x37eyRu4F9eJjnts4x4HcY-TQQpIhXpqtKd1rpH0znWS0blBIpybuL-3SIxzB-7DQxLtPEHbc_T9hdfTa8S_xdj3JLnzkYQ7n0mI85V4znc8B4piOapiOrqiOaZCHUv5Ll3wIERRnHC0J0N_BiXUyaSkc3IpWZwiSn4nQSnrVFNqOg2U5k4rpYvTGtooXZ220E7p5rSHDvDrvzqiv5PS2emsdHS6KB2gvdNVaQttoBXqLdDXFHGNEd8A4-shV23krInc1ZymmK--UsippfzsJCqxTgUljVMaayqmCKcA1ppf-SLzKR_gNa5fyoLKU1lYeSSLKvdlSeWeLKPckeWV27KycktWU27KmsoNWVe5JhsoV2Vj5ZJso5ySXZQTsp9yVA6DCcoROVs5Jpcqx-V6lBtgI9o3o32LclhuVQ7KbcoBuV3ZB3vkjh92wy7Ud8IO9G-HbYjdJjcpW5Bnk1ytbJArlHXIu0YuVFbJecpKzLNcTlEWy7HKfDlcmS0HKdNlX2WS7KGMkZ2VYbKDMlC2U_pjjb1la6WHbKl0kS2UX2VzpZ1sprSSTZVm0AjXddFWQ7ZSEmVbpSLGJWB8adldKSV_U0rIEUpxOVEpivmKyiWwTimGdRaXB9F3Qikpzyhl5EWlnLymVJa3leryHvI9VBpDa_lI6SwfK31hKIyD6bAQVsEW9O9E3F75QDmEccflXQXPt3IOeS6jvI7-7-hL5dxXCji3cW9vKP2cq8oc55KyB-VtuAcP4DE8g5fwGt7BR_jmXFOoe11h7k3Fcu8ojntf8buPlYD7Ugm6r-C1EuK-VULdd0q4-0FJ4n5UkrmflOSQ0v2qRLiEZnZVmtvVaGHXoGVcRhOhLur4PKad3e_Kb4gb435RZrqflWWwBWMPojwLN5Hvifse35de4XvSc8XyPcD3nZtKCt8FJYPvrBLp-1OJ9v2hxPmOK5l9R5WsvkNKdt9-Jadvj5Lbt0PJ59uM75zrlKK-lUox3xKlhG-eUtI3EybheiwMV4r7BqGvH2J6QCd8b22L76wt_kNF_m_ykWpOPlLDyUtqOnnwefALqQP1nNykgZOLNMTndmN8Djd0cqCendR3sqHvJ8RkRWwWUgtqQHXUq0Ii-iojpiJiK2BMOYxNQI5yyFUeOSsidyXMUxnzVcG8VZ1_5q_m_Ps_lvyv-3sMZb6yynjPVxpP-ArjJl9unOfLjBNwgC81dvAlxga-yFjJZxlj-EyjI59hVOWzjV_4fCMVYlS-znhgbjOOmweM1eZpY4J5zehuPjXqmZ-N4qZk8WZKFmpmYd9ZDvaJ5WHvWSH2hpVgr1kCe8WqoKyFegO0N2UfWAv2mbVmX1kbRsy2TAUDhNmKOWYL5jebsaDZmIWZDVlSsz5LAanNeiy92YBFmo0wV2OWDXJBftSLIK4U-sohpopZkzU1E1l3syIbYSawWWYpttYszg6YRdhFswB7YuZl38xczMezs3Q8M8vOY1gJnpHV4GlYa56C9eUhbBZ32C7O2A1O2Hf-0UglXhn5xBOjjrhr9BY3jHHiqrFYXDa2i0vGaXHRuI_yM_isK0YGiLKuGnGQxbpmZIdckAcKoK0IFLMuGyWsS0Zp64JR1jpnlLPOGBWsU0ZF66RRyTpmVLYOGVWsfbDLSLS2wSZYD6vRNsMob_1uJFhdML6RUcqqAPkgxihphYMLBvJ_00tYb-GpXty6qxezruhFrTN6EeuwXsjaqee11us5rRV6FmuhHm3N0dNYM_Qwa5puW5P152KifkqM19ehnCAm6V3FDL2mmKvnEyv0NGK1Hi426D6xRWdip_6d79Pf88P6C35Cf8DP6Df4Ff0Mv6Mf4k_07fyNvpp_1Rdw3ZjCHWMkDzP68yRGH57c6M1TG714eoiEWLRlMvryLMYA_rMxguczJvEixhxeyljKyxvreaKxk9c0DvP6xp-8iXGFtzTu8vbGc97FeMd7Gd_5AMMQwwxHjDeCYqIRKiYbYWKakUTMMJKK2TDPSCYWwGJYhvoK9K1CzGrErzE8cMEGDjraKXzjq43PfJXxkf_9ulmFuf4p3_N_XrvV_vu8dv-DX-PVlEl0i38O3eZfTnf4N9Nd_v10j_803ee_Tg_6n9DD_g_0mD-lesZfRL3mb6He949WX_o3qp_8V1Tdw49IL0JL5kVpyb1YLYWXSUvpZdFSedm01F4OLY2XS0vn5dHSewW0jF4RLcorrsV6JbXMXhktm1dWywX5oLBXWivrldKqeSW0Bl4xrZVXVOviFdb6eQW1YRg70cunzUeetV5ubbeXUzuJ3Ne8n7QnmOsj5mSBeM0OxGk-CAnEaEkD0VrKQJSWLhCpRQYitNhAei1nILWWP5BCKxYI00oGPK1MQICilQ28VUsHLqvFA7vVwoGFav7AMPWXQHs1ZyBRzR7Io_4USAOaGhe4T6MDR2hEYBnNGBhJ0wfaQUXITtMFskImmjYQC1E0TSCCpg6kp6kCaWjKQCqaIpCCJgsko0kCSWlYIJyGBMJoIBBCfYEglYEAtYADC3jUQKkBAihB_zcvSL94Kel1LwPd5cXQ2V5m2s_LRht4P9PCXm6azvuFaqDAN_8v9LM_D_0Ab-G1Py99Cc_8-ekdf1F62V-KnvJXpEf8Nehef0O609-abvV3xf3vDr2gLwyAITAcxsCkf01RR3pT1EneRHWWN1Zd6A1Xl3uD1LVeb3Wj10Xd4rWBxlAb9SrqOi9BXeGVUBd7RdTZXkF1ildAHQ1DvMJqX6-42tUrq3bwKqmtvJpqc6-h2thrBZ2gl9rMG6i29Iap7TFPZ2-C2hvzDvL-mX-k95_959cftVdRHzQt-p0WGv1ai4h-oeWKfqKVir6n1Yy-obWKPqf1jD6j9Y0-pQ2IPqENiT6qDY8-pI2K3q-Ni96tTYzeoU2J3qzNjF6jzYleps2Lnq_Nj54Jk7S50WO0WdHDtWnRQ7RJ0QMQ3wfjemjDortog6M7av2j22m9o1tr3aIbai2ja2i1oitoCdHFtfzR-bQs0Tm0tNFxWiA6A9aWUnsXlUR7GBXULkX5taNRjrYtytaWR1najCihjYgytfZRulY5imo5o76ryaK-qN8jP6m3I9-rB2FJ5Dt1XOQbtVfkK7Vp5HO1YuQTNU_kQzVj5F3VF3lb_RRxS30bcVN9EXFDfRRxXb0bcU29HnFVvQhnIq6oJyIuqesiLqpzIs6ro1Afgth-ES_UARHfcZ1amxKRVpsakV6bFpFBmx4Roc2IiIIYbWZErDYrIl6bHfGzNj-igLYgooS2MKI8rqtpcyPqob8pxrXRxkf8qo2K6KoNjeil_RbRX-sVMVjrEjFc6xAxRmsVMVFrEjFJaxwxRWsUMVVrGDEdZmoNImbDXJgHC9C2EP2LEbcE8Uu1ZhHLtOYRy7WWESuQY5XWOWKN1idinTYkYoM2NmIT1roZ69mqrYzYpm2K2KkdjtitXYrYqz2J2K99iTioycjDWsrIo1qmyBNagchTWpXIM1rzyPNa78jL2rjIa9riyJva9sg72unI-9r9yIfa68hHmhL1WHOinmjJICrqqZYDikQ90ypAfWgf9VzrD2OjXmhzo_7S1ka90vZGvdP-jHqvnYfLeA6vw224H_VRewzPo_5-Pv_2z-vgPPmf8s-vlcrqaH7f7QFt-F23Pr_lVueX3Yr8T7c8P-Am8M0o58IMtE1yK_GxbhU-3E3kg91qvJ9bg_d0a_Mubh3-q1uPt3Mb8tZuE97Sbc5buK15c7c9b-Z2QtkN9V7QDwagPpg3dYfyRu4wXh9qucN5KXcEz-mO5BkhCBRtL5zf-TVnED_m9OWrnd58otOL98B1fac_L-YM5rHOCO454_gHOYG_lpP4czmVP5Iz-F05h9-Q8_kVuZifl8v5n3I1PynX86NyCz8kd_B9ci_fLQ_xHfI43ypP8Y3yIl8jb_IV8gFfIl_yRfIDny-JmC85eGKhTCWWyhixROaEwqiXE_NkDTFTNhZTZDsxTnYWo2VPMUL2F0PlEDFIjhS_yXGir5wieslZ
orucJ7rKxaKbXIHrNWjbgL7NYoDchvitYiTMkJvEMrlebJErxQHEnpYzxVU5QTxAvhfI-0b2EO_lr-KjbCU-yUbis6yNsgrqZcU7WRz9BcVf8hfxXGYXT2Qm8VBGiXsyvbgtU4gbMrm4LpOiTAJhECJuygB44pb0_XAH7sED6ReP4An6nsFzxL2UoeI1xr5Hrk8ytfgm0wnFiRCaEy1MJ15YThbhOj8Jz8kuQiAJJHeyiVRoS-dkFhmdWBHtRIlMTgbxk5NG5HRSiDxOUlHACRVFnYAo6XiiNJRx_CIBykNFqIy2RPRXdYKimhMCYaK6kwSSQQpIhbbUkFFUwRyVsY5KTg6Uv6BeAO1FRE2nhKjvlBaNnLKiiVNeNHcqiVZOFdHWqSY6ODVER6e26OLUEz2c-qK301D0gwEwGPVhTl0x0qklxjrVxUQnUUzF2JnIMQe5FjilxBKnuFjuFBWrMc8aWOsUFutgPWz81ya0b0bMZsRucUqKrRi3zSkjtjsJUA7KQ1X01ca4hmKV01wsddogfyfM00PMcH4T05xBMFRMd4ajPhJrGC1mO2PFPGcc4saJxbAM9ZXOGKxjDNYwGnOPRs5RyD1K7ILdqO-Ffeg_gNhDGHPYGS-OOhPEMWciTBLHnckwBabCNLRNhxmImSsOOovFHmcl8q3HnrZir7vFCucA5j4q5jrncD53xXjnlRjnEGuS41jTnaTWQieDtdqJsrY58dYRJ866CA-cCOuNk9ZS3HDLch0rxCVWUveLSO6-FyncV_BcpHQfwV1c34ArIpl7ViRxT4hQ96Dw3N3CdbcIy10rmLtMqO4CQdy54pszS3zFer9g7V-wl8_Y1xfs8yv2S9zRgoIOzB0jhDtWSHec8LnjRcCdIEIgzJ2IOSaJpO5krGUK5p0qUrnTRBp3ukgL6SA9ZICMaI_4VyTiohD_t2iMjUaOGOSKQc4Y5I_BPDHuMMT2R47uyNke-2mO-eph7qrYSznsJQFrKoOyFJQQtlsMimCNhdFfCOssKPwQgCCEQjjak6I_OeJSQCqMSe0Wx1pLYJ5SWGtprLMs5k3AGquIeLeWyOo2EjncliK3-6vI6_YQ-d0BoqA7QhTGOotg7cXcGaKEO0uUceeI8pAItdzZopE7U7TGvjtijz2wr344x0Hu7-J3jB-JPKPdjmKs20qMcxuLCW5tMdFNFJMx7xSsZ6qbX0xzs4oZboSY7SYT81yfWOzqYoX7ma93X_Jt7gO-372Mz5vT_JJ7hN909_A77hZ8Hq2EeTD6X_98Dl_6H-NzmP5_-E_K1VDzkzkyB5kss5CRMoYMlJGku8xA2smMpBFUl9GkrIwlRWQcySMzkZ9kZhIDaRGfBPwyKzHhm52NvLVzkCd2LnLHzkuu2EXIWbsUOWFXIoftRHLQrk722bXIHrsu2Wk3INvtxmSL3ZRstFuQdXZLshbWwCpYActgCSxC_0JY8ENzMt9uBk2hCZmHHPPsRlCDzMY8M-2yZLpdmkyxS5AJMNouSYajPgDtve3ypItdkbTHWlohvoldhzSwG5LayFndHkSK2fNJdnsPSWffJAH7G9HslMo7K5_yyKqrXLc6KBesAcp5a6JyzlqE6y3KZeuoctO6oty3nirPrbfKa-ub8sFi9Jvlo6qdlJp2OurYsTRgZ6fhdgGawi5D09lVaaTdgMbZbWhWuxv92R5A89ijaUF7Ii1iT6PF7dm0lD2PlrUX0Qr2EppoL6O17KW0AbS0l9MO9krazV5L-9ob6GB7Kx1h76Tj7D10qr2PzrYP0AX2IbrMPkhXwwZ7P91q76W77B10v72JHsGYExj7p72GXoCr9jp6C2337S30qb2d_mXvou8Q_xl5iDxEdXmUCnmcuvIPGpQXaYS8SnPLm7SMvE7ryGu0vbxAf5On6AR5kC6ERfIA7KeL5T66RO6FPbCbLv1hF-xEfQdsh22I-9tWjPnbejpFrqTD5RLaR86jHeQM2lhOptXkWFpaDqf55O80lxxMs8uBNIvsT-NkHxole9KMshtNKzvTlLITTSY70KSyLQ2XrWiYbE5DZRNohOuGaGuIvgY0uayP2Po0FaSBdJABMiIuXjajOTA2H3IUlb_SsshbRXantWUvrKU3bYKyGTTHvC2htexB26C_HdbQQXbFeXSBztAJOqL9b79CB9oW62kk69LqMpEmyLK0sCyM_eTGnFmwhgisLwMNkWmpJ1PjvFNSWyanXCbDPUhGFfhqJ6ef7BS4PynpK3hup6KPUT5A2107Ce5jKL1he_S67dJrtoV7y-gVW4XvymX7C3xSLtkf4B28gVfwEp7DUzigXLVnKjfsLsotu7xyz45SHtlUeW5fIW_sDeSrvYQQOYNocgxe6wOJLbsTn2xDQmQDvAdUJSllIlQmqWUlkkZWJOlkBZIBImR5EoUyGmLQHov-eFmFZEJ8ZlmNZJE1oBbJKmtDXagPDdHWGJoipjm0hNbQBtpBB-gInaEL4rr9kBVrygbZ4WfIhbZfIK_sSvLJX0kxjC-LfJVlI1ITczXA3M2xlnZYWxeZQHrKMqSfLEkGyeJkuCxKxsjCZKIsSKbLv98f_zcp6TDbocNxriNxfqPsW8oY-09lnL1XGW-vUyba85XJ9lBlmt1WmWlXVubYuZT5diplsa0py-zHZKX9B97jTsIJsto-jve6Y3ivO0qW20fIUvswWWwfwnvdPxagPh_mwVz0z0Hc7B9O4n3uTzLNvoD3uStkon2DjLfvkLH2A7zfPSWjbFcZaGdVetqJSke7m9LKnqE0tvcodex7SlWb430lQMvhuSlnR9IEOyvkxftNCZQVoTY0hVbo74DYjrSK3YlWQ1kH9UZ2a9rabknb2S1oR7sZ7YLYHnZj2ttuSPvjfW2gXY8OsevS3-06OKdaOKcaeI-qTkfifW-UXYWOtitDWSiGegHIBVkhBjEZICXi_3fD_w-G_Z_887Fc6z_rD05_tDZTyvClgTJ8XaA03x4oxQ8ESvKTgeL8QqAIvxkoyB8F8vJXgV_420Bu_jGQk38J_MxJMDtXg9k4C_7ERTALd4LxPEkwmqcPRvBMwQw8dzAdLxpMyytArWB63gxtraA9rjujrzva-wTT8AHBVHxIMAUfAaOCSfmYYDgfFwzl44MBPjHo55OCDp8ctFEyoPDNnBj8aE4IvjHHB1-aY4NPzDHB--ao4EXz9-ARc2Bwm9k3uMLsEZxpdg6ONtsF-5ktg7-aTYJVzJrBnGb5YFKzaPALyxO8xrIGd7Ho4GyWNtiPJQ_2ZsmCPaEbSxrsDL-yJMF20JqFB1uysGB9FhKswXzBSswOJjA9WIp9D5Rg7wPF2PNAcXYXbsENuIr2S3AezgRKslNwMlCOrQtUZlMC1VmfQF3WKNCIlQq0YJkDbVlIoBP77HVmr71u7JnXkz30-rF73kB2xxsOY2E66svZY28He-GdZG-86-yj94J9874zNeAzzUBqUwZymiGBcmaKQFMzfaCPGRuYaGYLrDTzBA6YRQLXzDKBe2ZC4JlZIfDOrBz4ZiYGDF494PBagVBeN5CSNwjE8aaBHLx1ID_vgPveHc9AfzwLI_FcTAn883wsDWQ03wZSQig45psAM_8KEPN54CN7FHiFM3jGrgQesD8Dd9mRwC22O3CbbQrcYSvRtjDwhM1AzMTAZzYyoJm_Y_zAQDikMwcEYs3BgRxoy2-OCRQxJwRKmlMDZc1ZgfLm_EAlc2mgirk6UM3cBDsDNcyjgarmWbRdDySY9wIlzKeBfObLQDasKeO__nnVFPr__6pRNKUGTxVag2cIrc4jIRbiQ6vxLPATZIefoVhoIk8IrcwTQ8vx6qGleM3QwrxaaB7Us_JyoTG8VCheD6HJecHQEJ4n1MEYxrOGEh4X-sGMCr1oBkK3mp9Dppt3QvqZR0Iam6tCSpvjQrKYXULCzeohtlkmhJj5Qt6wzCEPWLqQKyw05CQTIbvZ1-Ba9io4n90LTmCXgoPZ8WBXtjvYgq0L1mIL8ZxOCRZgw4O_sEHB7KxfMBPrGYxiXYLp2K_BFKxNMIw1D3qsUdBidYKcVQ8arFKQsbJQHG2Fgi7LGwxlOYPJWPZgGvZT
MCPLEoxhmYNZWKbgz5AHCqFeh-UIdsdraiLGrGUlgydZueAjVjWom_WCqfH6y2p2CBYxuwYTzd7BZuaAYHdzaHAEXrOz8BpeY04NbjanB3eaM4MHzNnBY-bc4J_mfLyeFwavm4uD98yleJ2vDH4y1wdVvjUo-L6gx4_hPeJcMBm_ifeNp8HU_CveU5yQjDxVSDTPHBLHC4Zk4RVDsvGGITl5x5Bf-ICQ_HxcSCE-L6QYXxdSku8LKcvPhJTnd0Iq8dchVfjHkEROQqtyA_fSxj32IAz3PXnoP_c_Veg_z1TCf98fSEo2pafoEt5FdArvIDqGtxIdwpuKduENRNvwWqJ1eFXRMryCaBFeTDQJzyPqh2cVtcKjRJXw1CIhPFwUDfeJvOFc_BT-kScLf8hp-Hn-OOwA_zNsPd8SNp_PCRvHh4T9xtuGteblwqryzGEFuT8skr8O9fHzoe_MraFXzZmhu83fQteanUMXmM1CJ5k1Q4eaZUN7mgVC25hZQ-uZGUIrmuGhBUwWGme-D0lq3g8xzfMhb9mBkNtsQ8gfbEHIDjY-ZC0bFrKI9Q-ZzrqGjGFtQwaxJiE9WK2Q9qxiSBNWIqQYiwrJgOdVY0-Cd4wTwT3G6uAsY2ywl9EpWMOoFqxuVA1WNRKDiUblYBWjUrCSUQHKBSsaCVAmWMEojbIkFEd70WBlozDiCiG-AMYVCLY28gb7G_mDk3C9DDE7jbLBU8h526gffG20C34xugY11jdosyHBIBsdTM4mB9Oz2cFYtiSYja0J1mQXgv3Zt-ASlj7kFCsd8o61D0lhTg4pYu4MaWneC-li_hUywPwSMsY0Q2eaXuhyMwVerxGhh83MoRfM3DjLBLyuG4Zm411DK_BRoW35gtDhfEfoYpzzPv4y9CLXwx7zZGFfeJYwW5QKSyYahEWIHmHZxISwfGJNWDFxKCxBXA-rKt6E1RMivIVIHd5JZA_vI0qHDxP1wkeIBuEjRePwUaIptAgfLVqhbIu29uHD8dz8judnKAwWncMHwm_QD3rD38_X3_5H_E8APDQuWg-Ny3ANbsIduA-P4Cm8gA_WfYPYdw3Tvmm49lUj1D5vJLP_MNLYB4z09nYj0l5rxNiLjUz2TOMne7zxsz3M-MXuZxSwuxhF7PZGcbuFUcpuaCTYtYwKdqJRxS5nVLdLGLXtQkY9u4BRHxra-Y1Gdj6jiZ3XaAYtoBW0hrZob4_-XxHX0S5odMa4LnYRo6td1OhmVzR62vWM3nZro4_dHQbDeLTNMbrbKxG7GtZg3DqMX290sDca7aCNvQm5NxktoQU0Q1tTe4PRGDGNsJ8GGFMfY-vZS42a9iKsd76RaM8zKkNFewH2sdAoj74EzFEGuUshR0mcRXF7t1HU3m8Uto8YBe0TOIMzRj77Elw38tt3jEL2A_Q_QfxzjH2Bs3hpVIMa9l84j1eY7xXO4jXO4bXRHFrab7D3N9jvG6OX_dboD0NgJIyHKWjfYL8zTtsfjKf2Z8OU3410UmX5pclqSIt1lpINkC4bKz02WwbZShnGtsuk7KhMzi7KVOyBTM2ewRv4jLripGSmk4w5ThIWdEJYUifAkjt-ltJxWRpHsnSOxTI4nGV0GItwdFCAoO2bkc75aqSBlJAMwtEWin7TUZFbY8_hFpzF-g5KhW3BWpfLz8Yo-dLoLO8ZdeR5o6Q8aGSXa430coYRkAMNXfYwvtntjA92Y-O1XcN4ZicYD-3Cxm07p3HNjjMu2JHGWTsd9p_SOGknMY7ZQeOw7TMO2Jax12bGTls3dtiasc1Wjc02xVkpxlpYBStQXwr4VWUsQNw8xM-xuTETY6fb0phqu8ZkO6kxHHpDezuA50PiWVBw_9_pJe3HenH7rl7Mvo7yEpxB20m9tH1ET7AP6BXsPXqivVOvbm_Xa9tb9Pr2Jr2JvUFvYa_T29hr9F_tVXoXe4Xe3V6m97AX673sBTBP723PRjlD72lPR99UvZs9BXGT9U72JL2jPVHvAO3sCXpblK3R1gz9De1pmGOGXs2eqVe05-hlkacE8hVG_p8wVzp7vR7E3Bq8sdbqd61V-llrib7fWqBvs-bqa6yZ-iJrmj7DmqSPs8brQ60xeh9rhN4JOsKv0AHaQztrpN72h1F6G2u03toaq7eyxuktrQkwSW9hTdabW1NhOsyEWTAH7fNgAWIWIX4xLMXYFcixCrnWIvcGzLEJc23FnNv1ztYuvYt1TO9lXdT7Wff0gdYrfZD1XR9i2cZgK6kxyIow-lu5jN5WaaOnVdvobrWF_kY3azwsxPVmOAAnjF7WeaOvdcUYaN00hll3jPF4T5thPTCWwirYANtgDxyE4_AnXPwPPfy_-Oe9v85_7nu_0lE5r_4uz6sTYZ68oK6C7XAYzqLtFjyDN_KM-lGeVr_JE6riHFZ1Z5_KnJ2qcDaplrNOtZ1VsAzXi9A2XzWduarhzFZVZ5b6Xc5Q38lpyDNFvSMnqZflBPW0HKcekmPUnXK0ul4OVyfLIWoPOUCtK_uqhWVPNaPsqgrZSX1mt1dP2-3Uo7APdtht1Y2wCpbAXLuNOs1urY61W6lD7JZqH7uF2slurraym6kN7KZqdbuJWs5urJayG6nFoKDdUM1jN1B_tuurP0E8RNn1VGnXVl9ZNdTzVqK6zaqozrIS1AFWSbWZVVQtaxVSc1sF1Agrrxq0flEVK5f6XORQr4hs6mGRRd0gMqmLRJw6RUSrw0Sk2lNkUNuIdGo9kVqtKFKoRUQSNZMIqsmEqxpCqK-4rl7jinqEf6Hr-Xs6m7-ho_lL2pc_o-34Y1qPP6Tl-X1agN-lmfltmorfoj5-gyr8Kn1lXqR3zHP0rHmKHjSP003mYbrY3E-nmrvoCHMb7WNupB3MNbSRuZxWNRfRkuZcmsecTXOYc2hmXMeYC2ikuZimN1fSNOZ6mgpjUmF8KvMY6n_SdMgfYV5H3B2axXxAfzYf0_zmG5pofqWtTV0daNrqdNNT15th6gkzuXrPTKV-M9Or6XmUWopnUtvx7OpEnkfdxgv_N-ruMtqKY-0X_ZrdVfVUdc_qKT1Za0EIwdbC3d3d3Z3g7h7c3d3d3YM7hEAgwRIsQHC3QAL3Pxdkj_ees0_evc_dZ5xxP_xGd1c99VR1dXXPbjZhmzdUaZxvZTOtVdusYDUyO1otzclWB3Ob1d28ZPU1_7AGmV_Zw8zC9liztz3V3GzPMx_Zy81Y70azvne3Oc17xPzee8aU-gczWp83U-ofzZxYi6WwNmvpi2ZL6KkvY_1e-uzif3Hhs58--3Q_Nfw_ez8ZhqeHZ6fYS3vEbjogdtJRsZ1Oiq10Rmyh83AJroptdAPlt8UOuid20UPEPhV76IXYR6_FfnonDhKnE2TTeQrSVXLpLoXoBfnpA3lJSZMC8ncRXz4VieUdkVL-LDLIH0QOeUzkl3tEcblZlJMbREW5TlSWq0U1uULUkEtFbblI1JXzRQM5VzSWs0VTOUs0kzNFC2xb4bgtytvLBaKjXCI6oU0XtO0m14secqPohZx95RbRX24Vg7E_HPkny7VivlwlVsvlYrtcLA6h7Rk5R_yMnHflFPFGThSkxokoNUakUKNEDjVSlFAjRE1sW0Bn6AvDUDYRZsMyNVxsgN3wrRom9sBeNVTsg_1qSJwDcQbBABx_A32hN_REXA_Ed0e7jmKzaiVWqKZirqonJqsaYoSqJPqpMqKLKo7-82Mc2UUplU7kUclEehUtkihbRKo_uVc95Ezd5h51jf8hL_M38kf-TJ7lD-Rpfkue4L_IY_xHeYSflgf5Ubmf75V7-Xb5Ld8gd_EVcgdfKLfzmXIbHys380FyA-8hV_N2chn_Ws7ndeV0XkWO42XlaF5ajuIloTj2i8gxvBDKC8gJPK-cwnMjNivapUOeWPTzFfqOj7EE5W1uy2ecyQjxnnziKSUSdyiNuEy5xGkqhvVTUWyk2mIh1RNzqaGYRU3ENGomJlMrMZ7aijHUUYykLmIodRODqacYRH3EQPoG2wEwGGVDUTdcDKfRYgJNEDNoqlhAs8UKWijW0wqs4_VYqzvRz7dYo-F1HvZ_6iu7rTrntFEXndbqF6eVugl3
nJbqvtNCPXaaq2dOM_XK-Vq9cZqo351G6r3TQP3p1FMfnToqwldTeXzVleGrpkxfFaiE_QooK4e6sogprT44pRBfXL1ziiJHIfXSKYCc-dQjJw_6yKl-c7Kr286X6oRjqzXO73K880h2cK7Lis5FmcH5XjrOcflAH5N34ZY-Kq_Dz3BRH5E_wln4Th-Se_VhuQnly_RJOVufkRP0RTlc35Df6Eeyh_5ddtBctdQB1UgnUrV1alVF51BldVFVTFdSBXRjlUN3URn1EJVKT1NJ9Qr1hd6lQvo7pfU1xfUDFaHfqD-9pvXe64MvIIX1wZvFitAFLKGLWUqXsWxdyXJ0TSug61uubmpF6lZWfN3BSqi7Wl_pXlZS3c-K1QOsNHqwlVEPtbLp4VZuPdIqqEdZxaEMVNIjrBp6mFUXMY10f6uZ7mO11N2sdrq91Um3tLrpxlZPXcfqo6tY_XRZq78uag3AGAbo3JDdGqgzQVpIAUmtQToRuKCswfqDGqpfqhH6vhqlr6tx-oKahHOcpjeqBXqeWq9Hq726nzqnO6o7uqX6UzdS8Zz6KgOudz6nriqNa14TvsZ-J5T1x1oY4zRWM7E2FmKNrMBa2YB1sx3rZy_W0RGsqe-c8PoK-7R-u_3f-cr2nPdMZLjX2EgaxwbQGNaDRrG2NII1oWGsBg1mZWggKwB5aQDLBdmpP8sCmSA9pEFZSkiBmFjEJ6ehLBnaJkWOJMiVhEbDRJRPR8xclooWs7S0kmWg9SwzbUW-Xch7ghWkS6w43WVl6S2rSMSrUhSvTil5DcqJbV4oCEWhJK9GZaACYqpAdV6ZGvEK1IaXoe68BA3kRWk0L0jTeX5axPPSWp6HNsAmnpu28Jy0nWennTwr7eaZaQ_PSPt5BjrA09MhOAxH4RicgFPwHerDTsfJCJnoe7T9Hjm-59lwnA31eekkL4w2pdC2Ah3BOA_xusjbhPbxlrSXt0Zf7dBnR_TdGWPoSlt5d9rMe9JGWM77YKz9aQ4fQjP5KJrGJ9JUjucfX0BT-ArYCLvhMHwPF2kyvwkP4RVN4u9pIvfg-U14jnvxTA_IETyeHILn9jc8oWzLY2QDnklW5vlkaV5GFuK1ZT7eWubifWVOPgGmwEyZg8-T2flimY0vl1n5GpkZvysZ-VaZmh-UMfyMTMKvykT8ofyCv5PxuVRRPFJF8uQQq0I8lXJ5GhXg6ZWPZ1RenklZPIuSIHhWZWIbAX-yzOo9y6TesgzqNUuvXrK06gFLqm6zaHWVafUzM9Ql9lpeZvflFXZVXmdn5U12St5mR-VvbL-8z3bLh2ybfMw2ymdstXzOlsmXbKF8xebI12w6tpNxPA7lo-RTNkw-YIPlOdZV7meN5HpWXi5kOeRklkQOZ0r2Zc-oI7tEHdiP1I79QG3ZaWrDTlJrdpRasYPUku2jFmw37ITtON6G8i2wCXEbEL8e7dZRe-jI1lJn6IL9btADdb2gD-IGss24L7bQSLYV99gWGo_jCSifiPiJbDksg6WwBBbCfJgN0yl8f4Z9_r9r-M8-J4z_zN-tKWkcF32D50X_4HUxMPhADAm-FsOCHhoZ9NLoYBSNCyajCcFUNCmYjqYGM9OMYHaaE8xNC4L5aGmwIK0KFqb1wRL0bbAMnQhWoAvBinQrWJmewYdgJbLd8hTfLUVZ3SJUwc1PrdycNNTNQgvcdLTbTUkX3KT03E1MH90EpEIhckNeShBilDT0TqQIPRXpQrdFxtANkTn0M1yEc3BaZAodh0Oo2ycyhGaLlKGeInGomogfyiyCIUdYofvcDB3lf7iL-Ct3OH_ituX33cr8tpudX3e_4FfcCP6Te5uddY-zU-5udtxdx464C9lBdyrb445gO92-bIvbga1zv2Yr3HpsiVuTzXMrs5lueTbZLcPGuqXYMLcE-wa6Q0doA82gIdSGalDBLclKuWVZGrci025V9jhYi50J1mMbg43YpGAz1jXYitUItmaVg21Y-WBbVirYjhUNtmcFgx1ZnmAnlj3YmWUOdmGpg91ZsmAvljDYj0UGBzF_cDizgmMZD05mnuB09jEwi_0RmMveBRawt4HF7FVgGXsZWMmeB9ayp4GN7ElgG3sU2MUeBvaxB4HD7H7gOJyGc3ARrqL8FurvIe4J4l-i3Tu0_8heBGL5n4FyXAS7cl9wNo8OHuRJg_d42qBf5AhmF8WC-UTJYFFRJlhGlA9WFpWCNUW1YANRM9hM1Am2FQ2gfrAOlMJxDlErGIP6kKgYNNDmGS8evM4LBvfz7MEFPENwAE8RbMwTBwvzBMGk3A0aXAdvMhG8inO9BOfhDKPgSSaDRzEHB5g3uIf5gltYvOAazM8SzNM8liY4g2XB3OQNjmfFgmNYxeBoVis4kjXCvLUKDmWdgkNY7-BgNghzOSo4kE0ODmCLgv3ZpuA37ADm-GywL7uO-X4S7ME-BLvh2nVh0W5nltTtxNJBDrcjK4xtWagBjaAVYjq63VkPtzfr5_Zng92hbLg7ho12p2C9rMG6OYz18wtb4L5iy1zN17gxfJObj-9wq_G9bmN-wG3PD7t9-FF3BD_hTuXfuYv5GXcD_8Hdw390L2DNPuU3XCV-c5OKh24e8dytJt667cQHd5gwQyMFC40WPDQOJgoRmgLTBYVmwRwhQ8uFCm1E2beIOyI-umfE7-4F5LgmHri_ipvubfGL-5u45N4T590H4oz7SJxyH4uj7lNxwH0m9rivxQr3vZjkeqifK6ila1MV10_53UhK6X5BrvsVmW4iehFMhPs_Pv0UjEfH8QzZHWS0LvhWLA6-EHODj8SM4F0xOXhTjA9eEaOCP4qhwe_x3Ak_g_7y6WlZ5j_3tDQ8sZ6irJ3Kw1qqbKyxSs_qqJSsqkrGyqpErKiKZnmVy7Iqg32lXphK_Wq-lOfNX-QR86jcaa6Ta8xpcrHZVy40u8t5Zkc522wtp5vN5BSzoZxg1pZjzGpypFlBDjPLyiFmKTnILC77m0VkP7Og7GPmkz3N3LK7mUO2N1PL1mYS2cKMxjYg25kWyjliI-Q48z1NNt_RTPN3mme-oSXma1plvqL1sNV8SbvNF7TffE6Hzad0wnxC35kP6ax5j86bt-mCeYMumb_QFfMS_WKep6vmGbpunqSb5lH61TxAt8w9dMfcQb-Zm-muuR5W0T1zKd03F9ADcw5Mp0fmZHpsTqAn5jh6ao6m5-ZIemkOp9fmUHprDqb35iD6YA4gA6-aAhQbSF42iPxsKLlsOMVjoyg-G0cJ2UT6ik2hpGwGxbI5lAo_h2nZYkqPn8qs-NnMzXZQQXaAiuOnuiw7T5XYL1Sd3aE67Al9zbjsyBLIPiyDHMGKyGmsulzKWsqtrLc8hleCk2ysPMUmyu_YFGynw2x5nM2TR9kCeZAtktvYcrkarxXz2QY5hW1Fjl2yH9snO7HDsjk7Ieuz07I6OyfLsQuyJF5PirLb8FgWYW9kaWaq0syvSrFEqiRLo0qwnKo4Kw5VVDHWUIXXz18-LdD8_98WqOdlRAfPhFBHz-hQJ8_QUGdPf-gV6uLpGurqaR_q5mkV6uFpGurpaRTq46kf6uepE-rvqRka5KkeGuqpEhrhqRQa7akQGuspF5rgKRua5CkTmuopHZrhKRWaDfM8JUML4YSnQOiZJ0sovpEiVNBIEGpu6NAY46O72XjmXjFuufeMa-5b45IrzHNuyPzOTWoecTOY-9x85g63jLnJrWuuctuYi9w-5ix3jDnJnWOOcteYg9w9Zm_3tNnZ_cls514z27q_ma3dJ2Yb9y1EsPauZJ1cP-vmRrFebkI2yE2Ch2BSNtVNxuZjf6WbiG1yo9kONx7b7Qbxg-tj-1wvO4B2h1yOH2KDHXM_mCfcG-Zl96B5z11ivnWHmiLUwgyFSplJQqnN9CHbzBW6Y5QI7TeqhWYbjUM9jA6hKka_UHpjdMgyZoVue5aHLnrWYg42hb71bA-t8-wOLfDsw1wdDA3xHAl1hy7QyXM41B5lbT37Q609e0OtENfSswO2YX8jytaE2nhWwGLEzAu188xC_NRQ-Pr9Kz6tl9h_bb14Jkf8wUc5Wox2EorxTloxycktZjglxDyn
qljuNBQbnFZij9NG7HfaiUNOB3HU6SROOl3Eaaer-MHpLn50eohLTk_xM1x3eolbcNfpLR7CE6ePeOH0FW-cIcLxDRbJfINETl8fUcbXVdT3tRDtfHXFN76yYqwvt5jnSy6W-3xio-8t3-S7CSf5Kt8WvtA3n4_zTeVDfeN4H98w3sk3gLfw9eb1fN15ZV8nXtzXnuf2teIpfK15PF8bbqLsudOd33T68x-ckfygM4Vvdqbxjc50vsGZwdc7s_haZzZf48zlq515fJWzgK90VvNFzjY-zznIZzqn-VTnMp_o3ObjnWd8jBOen7D_1H34XnywfhfXrXfiiPWHWGVF0CSLUW9LUVPLoXKWSzmshKStWPpVZaQdKjeNU0Xoa1WW8qhqFFD16I5sRGdlM9olW9NS2YHGy27UW_ahZnIgVZIjKK8cRTnlaMoix1IGOZ5Sy4kUKydTEjmVvpTTKb6cRQG5gGy5jLhcR4bcSh9pLxyDH3B8Hn4iJi-SkJdJyZ8R-ws5EIAg6rPKk1RNHqRucidNlxtoB3JdlnPpPfpJqEZTdjWEKqp-1Er1oMGqE81VbWm7akE_qMb0SDWgCKsOBa0aFGNVpZxWJSpjlaf6VhnqaJWkwVZxmgBzrWK02ipKO-AInLeK0A14YhWmt2DYhci2C1I8SGQXoJR2fspk56M8dl4qaOeiYnZ2KmVnonJ2Wqpop6DKdhKqan9B1exICFAVW6NMUQWbU1nboJL2R1HM_iAKQgH7T5EP8th_iFyQw34vskEWyASpIDFEQwAs4BBhh69v2P-Nf1OimXFftzAinOZGCFI6TY3cTiOjnFPXaOBUNzo4FYwBTiljnFPUmOsUMFY7eYxdTnbjuJPZuOikN35zUhmv4LWTwnjjxBpvnRjjdyeZ8c5JAl8Z751E8OVnCVH2BeoTxHnrxEebaLQNi0KeKOOlE2m8gOdOvDjPnJDx1PEaVx0yTjkeY4fz0bPM-cMz2fnTM8D54GnnGEYdh2O8ZBR0lJEFYiG-Iw0vyj5q03imDeMB3IKrcAFlZzQzTmhuHNTC2A1bNRnrtDSWa2Us1Hg2a9uYor3GWBimtdEf2x7QAXUtEdMIbWojRxUdYZTVf3iK6jeefPqZJ7t-4Mmkb3nS6p89qfR5T6w-CXthMyyHOTABhnpS6N7Q3pNSN4P6aFPDk1FXQo4ynry6pKeYLuYpB9Whri7uaQTNdQlPW9R10qU8PRDXV5f1DNLlPMN0Bc9oXdEzQVf2TNFVPTN0Nc9c5Fuoa3qW6Vqeldiu1dU9G3QVz2b0sQ1tdiDHLuTcqQt4tutcnq06i2eLTuvZpGMRl9izTsf3rNEu2vo8K7TXs1Qrz2JNngWaIzf3zNTMMxUmaoH-BcYiMC7uaaFNT30d4amq_4word9GFNSvInJBFkin30Sk0O8ikuqPEYnQNgHyRumAJ56O53F1Ak9AJ_L4dTKPo1N4NMbi1Zk8ti7sURg36aYerrt6GObO0NM8EZjPj94dnj-9e-EwnIQzKPsJdVc8pr7uEbgWln6OPj56YnAdM-sERgGd0iinsxl1dGFcywpGd13N6KtrGUN0fWO0bmhM1k2M2bqpsUQ3M9bCVtgDR-A7OA9X4Drc0eH7J-zTvZv6X793PYsjxpjN8M7S3B1ttoCW0ModhfeUUXhHGYV3lpEw3GyP94qO7iC8ywwwu7rfmN3dvmYPt5fZy-2Bd5xSeOeJb67Ae9Jed7txzh1m3HGrGa_dZIYIPfW4ocfw0BMK3Ye7nnihO3AbfvVEhm7AL56o0CVsf0T9D55g6IzHFzrt8Ya-88jQ9x4euuB56l7z_Oze9Rxzn3o2uW8981yPMcpVRjd8-TZ24xl13PhGdfdLoxL6LOemNEq7GYySbjajuJsPKkNz6AMTYCnsMkq4ZxBz2yjl_o54bZZ1k5jl3WxmJZxPFbeeWd3tYNZyB5t1cO513GFmPcxDfXeE2RBz0ghz0wRz9bX7af6auf-p39mutMjblabBGG8XGgx9oSu0R1lLaAr1vd2ptrcHVfP2pkrevlTeO4DKeAdTSe8IKu6dQEW8M6igdyHl866kPN6NlNO7k7J7D1AW7wnK5D0Fp-F7yuw9i7JzlNV7nrJ5f0LMBcRepNzeS2h7CTkuU2HvFSoGJaGM92f09TNV9f5CdbxXqZH3GrXwXqd23psY423q7b1LA7yPMfbnNNP7mpZ639Jm73va7_2DTns_0BVvhLzr9ciH8AT7L-CN9yO99_5JHxFj6Pck9O9k6Tfk06_J1S8oSj-jhPoJJdaPKLm-Tyn1Hcqob1FOfYMKQSmopG9SLZQ11r9RK32POugH1BXxvdCuP9oPQZ5R-hWNR96p6GOh_oNW6j9pI_a3o789-jkd0A_pCHKd0EfpnN5BF_RKuqwX0k96Jp3VU-ignkBb9GiaBdP1KJqiR9IkGK9H0Bg9nEbCMBiih1AzPZBK6v6UWvcjrXvTU29P-gnXbJf30_Vd5P1P_oXslpTVaUhZnNqU2alKmZyKlMEpS-mc0pTSKUnJneKUyClKkU5h8jkFiZz8FOHkpd91Hnqmc9F9nZNu6qx0TGekNTotTdSpqIeOoXo6KRXRiTDfX5CjE-C6xMc1iqY38ATuwnVvFF2Es7DPG0nrvfFovtel8d4gfeMNYM36qIFXUwWvjTVlU4zXIj-8ty26A2dtm3Zju_SzJTheDItgISywvTQf5sFs20cz7CBNxXvQFDs-TbK_pIl4N5pox2A_FcrS0zQ7M2KyITYX2uRFnvy0DO9Yq-0itMsuTifs0nTJLkt37Qr0xq5IwluZ4kGMtxLuh0qUH0pDDWiC8g7Qx1uFRsAUb1Va4K1Ga701aKe3Jh311qJz3tp0zVuHHnrr0mN4As-89egFvII33vr0O7yHxLoRFddfU2vdCmumPdZSV7qk-9AHPZiSOYMpBaR2BuG69cf164fr2AvXsxuubQdoD-2g7WdtoDW0gpaf_R_5Q6Gr1sTIm_CbNSnyoTU58hm8sqZEvoOP1tRIZk-LTGjPjUxjL4zMZS-LLGyviyxrb4usYh-OrGOfi2xmP4hsa7-L7GyrqB52dFRfO2XUADtH1CC7ZNRQuya0iBpmt4du0CdquD0oaoQ9MmqkPT5qlD0tarQ9N2qsvQw2wK6oMfYhlH-HuJ_Q9lrUQPtuVC_7z6h2thPd2E4cXdXOEF3czhedzS4dndyuER2wG0Ur--toj90i-nerdfRTq030Xatt9DVsL-D4tNUy-pTVIvqk1Tz6uNUs-pj1dfQRq2n0Yatx9CGrETSIPmjVh7rYrwO1UFcDMdWjj1pVEV85znGrUvQJOGlVjHPKqhD9HZyG21bx6LdWrmjbThudwE4Yndq2o3PYb6OK2LejKthn4Qychu-iytsno8rZx6PK2seiythHokrjfMNKQUkoAcWhGBS1DyPH4ahCiMuP-Lxolwvtc9inorIiX2b7-6gMyJ3W_iEqFcRCchwnQXli9JXIPgFHYX_Ul_ZO2BSV0F4DS2Fe1Bf2DGwnQn_st4f6UfHtclFRdt6okJ0mKmgniPLhunrtt5HSvoe1cCnyg3Ui8q21K_KptSbyrjUv8qo1ITK8hsI-LdBl_3_5T6qnGk2oKWtKDVgzqsOaU3XWkiqzVlSOtaFSrC0VZe2oIGtPBbDND_kgL8rzQG7E5IrTClpQTuTIiVw5WRPKwRpBQ-w3gNpoV50Ks0pUgpWjsqwkVWJF0VcBqs1yo-_c1JDlhByQDbKgLBNkoPosPaSLU4-lpbpQh6VBuzRUC2pCDcSUZxmpGNrlRfssyJUKOROzfBSFPhxWiAQrTB_MIvTGLExPzUJ01yxAN8y8dNnMQefMbPS9mZm-M9PTSTMNnTBTQHLsJ6ZTZiLUJUBMJF00XfrZ9KGdl26bku6bnB6bHnpuRtAL84N4af4hXpnv4C28hpfwAuXP4al4bj4Rz8zH4qn5SDw2H4qHcB_umQ_ELbgGl-EnOAun4CjqDyJ-J_JsRN4V6GuRSTTb9NN0Mz5NNpNCDKSA1DTFTEdTzYyQhabhvKabOWmmWZDmmaVoiVmZVpl1aIPZhLaZbehbsysdNPvRMXMQ
znU4nTbH0FlzIs51Gv1ozoFF9JO5AtuwlbCKzpurYQ1i1tAP5to4Z811dAa-h9Pwnbke87YOOddhHsNW0RFzGR0wF9Jecy7tMmei_6m0GX2tN8fSanMkrTCHYXyDaaE5gOZiTLPM3hh_D5qEMY4zuwDeFmGU2Y1GmN1pGOqGmD1pkNkLBtNA5OlvzqB-GHNfjK2PuZ16mweol3mKepo_wlWU3UH9I8S-RPt3yPcRc2bK2aaQi0wlV5heuc70yS1mUO4yQ3K_GSWPmgnkd_C9-YU8C-fgR7gAF1F-Ga4g7qoZD4LymunHVoMtfzYl6gRiDMR_wPz9jnl7hfl6hnl6hDm6h7m5hfm_SUfNa_AL9i-j7CLqLmA-f8L8_oT5vki_mlfoGeo_Ik6zG_QF-xVr_Dburd-oOJRkd6gMlGe3cG_9SlXYTdxf13F_XMW9cgX3zQXcP-dwH52BU3AMZYdwL-3HfbQHsTvRZhtVYJtxf65HvjW4n1ZSIbYc9-4S3N-LKBtbQJnYXErHZlNKNpOSs-m4x6ZQQviCTYKJlICNh7EwGkaibAQMh2FxErKh9CUbQongK0gMSSAZG0yxkArSQgaUZYZsiM-BdvmRqyhylkbuiuijBvqqh36bsGnU6rPW0IZNpbbQDnXtoQObHKcjxtcRbTqxCTD-s3EwFkYgZhDa9EPbHsjTmVriOdccz7Sv8SxrwsLPyLBPD_c0__rD3fAsjfiCN_Cm5s29uXgHb0new1uDD_A24yO9XfhE7yA-yzuRL_Yu5eu8O_ku72l-1HuD_-B9xa96lbjn_VK88mYUHp1PSF1K-HR1Eakbi0S6nYjRvUVaPUxk1ZNEHj1XFNbLRBm9XlTR20Q9vVc014dEJ31C9NXfiZH6ezFBnxEz9FkxH9vlOF6H8q36pNijj4nD-og4ivgT-oA4hbbf6d3itN4J28T3eguON8Mm1G2Mc1JvgPWwDm3WiuN6stige4pZur4YoguJ9jpG1NZSFNcPeCb9PU-oD_KQ3sa9ehVnej5_753MX3hH8PvevvyGtxO_6G3KT3mr873eEnyjNy9f5M3Ip3hT8MHer3hn7xe8vjc8h2GfLkDl__yvq6eopwefprrxyaorH6868zGqIx-h2vOhqi0fpFrz_qol76ua897qa95TNebdVUPeTdXjXVUd3lnV5J1Udd5RVebtVDneRpXirVRR3kIV5M1UXt5U5eSNVHZeX2XitVQGXlml42WhGBSAnCo9z4Ty1Coj_0pl4SGVgyu0-yAL8ZeyBL8vy_Ebsgq_IGvwH2Rdfko25EdlU35AtuTfyrZ8u-zIN8mufK3szlfJHnw5LIVFOF6A8nmyM58j2_PZsjWfJVvwmWg7XTbmU2UDPlnW5-ORcwyMgMGyHh-Asr6o6yUb8e6I7SKb805o20G24-1lJ-gGvXDcj3eUA3hnOYR3lcMQOxxtRvI-cjTvJ8cgzzg-SI7nQ-REPlxO4qPkFPQ1jU-RMzCOWXy-nI1xzsWY5_MNcgHfKhfzI3IFPy_X8F_lFv5U7uZ_yCNcqjPcVdd4QnUL8_MbT67u81TqAU8PWbCfS93FPN7iRdUlXk2dxpwfxPXZxoep1Xy6WsBXqKl8hxrJT6ih_IwayH9U_fhl1ZNfxXW-iet7G9f1Lq7nPdWA38c1vY9rek_Vghoor85_U1X5HVUFcZX5LbipKvHrcFVV5D9jewUuofyiqsbPod33qi4_iXxHFK6RasH3YP3sUO34FtWBb1Cd-Fr0u0p14cuw1hZhzc1T3fksFV5_YZ_WePH_0H_9H_I84l31a95Ff8SWRDftEz10lOilvxL9dAoxUKcXw3R-PB_KiTm6rlihW-G50EMc1EPEWT1RXMez5YleKF7pxeK9Xio8zlJBzhLhOItEyFkgvnDmiCTOTBHrTBWpnYkigzNGZHKGi6zOIJHN6SuyO92hDY4bicxONZHRKY2YAiKdkxXxKUVK50u0_QISiBgnWiSHpE6USAyJsJ_QiS8SoC7aSSginUTCdRKLgJNU-JxkQjsxwnJihXRSCO6kEqaTWkQ4acSfOi3Gmla81ekw7nTiuc4g7mN7U6cRl3HO53UyPNu-xHMrCs8-vziEZ9UBHYHt7_yIfs5P4Ll1Wt_h5_VNfklf5zf0NX4L7uqr_CE8hRfwBt7DR_A4v3ATuHOFC-cyXOLkXIAfsX8ezqHuHGfOD3AWsWe54ZxBuzM8wvmef9Cnkes7_laf4q_1SeQ_gX6O80fwQB_j1_QRjOcwP64P8W_xPN2oD_Cleh-fpffy8TAK-8NQNhAx3yC-N3L11Gd5d32Bd9OX4Ge4BjexDm7DXXgAjz77tO6S_vfrzjM4opsV6W8ONa14_pJWyJ_LCvpTW37_F5bXry3p_6BM_3tl-N-qj77X6g_fS_XW90K9hKfw0PdK3fO9Uzd9H9UVH7PO-2zre1_AOu6Ltg77Elv7famsPb5M1m5fLmunr5C13Vfa2uqrbG321bE2-ppY631trHW-HtYa32BrlW-8tcI3x1ruW2Et9W2xlvgOWIt9p62FvkvWAt8N7N9H3VPEv7a2-N5ae33vrGPYnvO9sq75Hlv3fXetV75r1gffT5bwn8T491kB_ybL9a_GeS2GOTjHKTAGhuKc-0G3zz7NWfp_7171bI5IzRfYafgEOzXvDx2w3xAq2ul5QTsTz2jn4EnsnPwrOxf_0s7NE9p5eAI7L49v5-dRdgEeaRfkIbsQj2cXwX5RHm0XR10JxJTiX9ilEV-GJ7LL8aR2eR5rV-Rp7Mo8g12FZ7Wr8Zx2dZ7PrskL2fV4ZbsJb2y34J3sdnyQ3ZlPsnvyRfY3fJM9lB-0R_Oz9jh-zZ7IH9mT-HuQ3gk80juWJ_cO55m9w3g271CewzuE5_YO5vmgIN5nCnsH8mLeAbyktx8v7-3NK3t78Brerrw2fufredvht7wVb4j3nwbeRtivh7KavI63Kq_lrYi4cryqtxSviPeAst5ivJS3CC_uLYScBXkBbwGex5uP58T7QVZvHp7Rm41_5c3MtTc9xpaW38P8XcBcHoZNdnh-w_53r0-k1QRruKH_jqrnP61q-beqKv65qpx_mCrq76Dy-murjP6aKoO_ukrnr6rS-CurVP6KKoW_gkruL6eS-suqryARJIQvID7Ko_zlVTxwERf0V1IBtPOjvc9fTTn-Gkr7aymvvw7Ug6bK8rdRyt9ZSX9vRf6BivtHKuafgHtrhvL4F-DeWg7r1QffNhXh_xb32yHEnECbs8h5AX1dRb931Jf-xyqx_5VKhnOK8Qsrhd9npfRHWqn8iaw0_hgrnT-tlcGf1croz2Nl8Re2svlLWTn8Zayc_nJWbn8FK6-_kpXfX8Uq6K9qFfFXs4r5q1sl_TWsMtiWx3Flf2Wrmr-iVdNf1qqNtvX8xaCAVd-f22qAvA386a2G_pRWI39SSGg19ofnN-zf_SsR140x_JYxlt81xvNHxgT-zJjIXxmT-TtjCv9gTOOGOYPb5hweNBfxBOYKnsRcx1OYW3k681uexTzMc5rf8fzmT7yIeY2XNO_ycuYzXsV8x2uapqhnekVjM55oYkZiGwXxRSPzC0goGpqJRAMzsahvJoGkiE0q6prJRB2oDbWgJtSACogrbn4p8pkJRFbkSWOGRFLTL-KbWgRMJTymRzw3XuM8HvILxnV-wjjH9xhH-CZjO19urODLjOXYLoXFsJCvMObzlcY8vsqYw1fDRmMm325MR5up_DDO-6Qxif-AubhkjOPh-Qn73_mfyb6h96w_WfwbiuL9KIb3poy8B-Xlnak4b0eVeHOqzetSK16JevHiNILnpuk8HS3lX9FG7qc9_E9xJM4f8B7ewe_wFt6Iw_w1vIKX4hB_IQ7y5-JAnGdiP-yDvYhbzj-ICZyhDx99zROg31RUgOei9LwiJeG16Etej6J5I3J5Y3J4E1LYmjj-wBrQG1afXsELeI7jp_CYNaSHrBHdh7usMf3GmtId9jXdYs3oV3zg3WQt6QZrTddZG2gHHaATyjqjritiuiG2B92GO6wX8vSmR6wPPWN96SU-GN_AW3jHwvMX9u-u6UuisnNJ1HMuiq-hLXSG
XvANDEbdcOeymONcEOucH8UB53tx3jku7jj7xBtnm5C-1SLatwpWivhxVogEvuWwDJbCElgMi-LE9y2EBYhfIKJ88-NE-mYJ7psuXjpTxC1nsjgHB_A-t8GZLubj_W4c3vX6OctFO2cNxrlRlEO_-Zw9eIc7JL50TuE97DthY1zSOYv3sHN4D_sR74kX4DLex34RhnMVrqHuOt4db-Cd7Qba3BB-cCES5YkRkwqxmZ2fRW7niiiMtiVx7uWdT_NT-fMf_Sf77-fV8AyNuGROiz1tjoo9aPaL3W52il1jNotdaNaOnW6Wjx1jFo4daGaP7W9mie1nZozta6aN7W2mjO1lxkCS2J7ml5AA-wbK78f0Nn-I6WPujOlrLozpZ46M-cbsFNPfrA21YgaYNWMGmjWgeswgs2rMYLNKzFCzMlSKGYbtcByHjUDdCLNazMg41WNGoc14s1XMFLNfzExzQsw8c0nMYnN7zArzVMxa81rMJvNFzDbTjN1lBmP3mklxHpljj2LcJ81Ksd-bjWLPmR1jz5vdoFfsj-Y3sT-Zg2MvmCNgTOxFcyJMi7302b_zYpdSTKUUYjrMpFgxG-ZRjFhAycViSiaWUVKxghKIHeQTR4iL8_SWX6UH_C79zJ8SXl5pN_9Au2AHbIMt_E_axP_AI-I9refvaB3_ndYibg1_Da_gBa3mz-AJPIIHcB_uwV3U__bZHbS7DbeQ-zwd4IfoJN9E5_hC9D2BfsVj6z4eU8_xeHiBx8RrXgNjq0bveRX6k1emCFGJTGCiMilRA-NvSPFEC5xLJ0os-uD8huKcx1H4_MP-3Zv4d1Em-FaUDb4W5YMvRYXgc1Ep-FRUCT4WVYMPRfXgfVEjeFfUDN4RtYK34Ve4IWoHr2H7C1yB7xC7B23Xi9LBBaJ4cJIoFBws8ga7iRzB5iJznGYiU_BrkTHYVGSI00Skh3SQFlKjLBWkgBjEJUN8UkgcbAFdRXRwoAgExwsrOEcYwVXifWC7eBk4Ih4Fzos7gR_F7cAFbC_BFfhF_Ba4Ju4Grot7cD9wS7wK_CY-Bh6g_WMRL_gMOV-KNDjv7MH3GOt7URiKQFEoFnyHc3gnSkKpYHh-wj7Na4L_9bx6mkZsjajh2xJRy7c5oq5vU0RD34aIr33rIlr51kR08K2M6OpbFtHbtzhigG9uxGDf9IihvgkwEgbjuB_Ke6G-c0R7X9uIxr7mEdV8TSNK-hpF5Ia0voYRiXxNIvwo8_qaRSjUc1_LCMPXOuKj0zbiD6d9xFunY8Qrp1PEc6dbxDOnZ8QTp2_EY2cADIEROB4d8dSZgbiFaLcqwvatj4jGeJP7tkZk9W2PKOoLjz_s37nv_qRKgQ9UNvCRSgYiZFEoFPDI_AFD5gmYMleAyewBLrMGSGYOKJkhYMt0AS3TBHwydSAgUwZCEClTBOJjmxASyVSBJKhLjphYxKaQ6QPpkSOLLBDIJUsG8slKgUKyTqCI_DpQXLYPlJA9AyVlf2yHwZhAMTkJdTMCBeU8xC4J5JQrA9nkmkBmuR55NgXSyM3IuRX5twYSQyK5Bf1uCiSQGwLRch3GsgZjWhVw5QqMbxksDjjIZ8uxGP_ggEB_TLbD-TXFudYOhM8_7N-97-pSX7s-NITG1M9uCs2gBbSC1vSN3YMG2YNppD2eJtgzaYa9mBbYa2iVvZW22Hton32QjtpH6LR9nH60T9LP9in6FR5g_wXK3tnHyOM9TNx7gCzvHnK8Oyjg3Uwh7zqK9K6gaO9yWAZLYQkshkWwkKLiLID5iJ1H8bxzYQ7aziHXOztOEPt_2NPpnj2ZfrJH0WF7AG22u9ASuzlNtavTCBj-2TAYCkNgMAyCgXYNGmDXjNPfroXzrQ11cO5h4fkJ-995IYzgs1QEnw1zlYfPh0XK4EtgOayENbAO1qNuA-I2qo9ss_rAtqg_2Vb1B9sW5z28g99R9hbeoP51nM3qCVut7rLF6iabra6wyeo8G61Os8HqKOuj9rMuag_roHazNmona6G2syZqG2ugtrLaajOrDpXUJlYB23JqCyuN8pKIKaZ2sCJqFyukvmUF0D6_2gv74SAcRtlRVlAdhxOI-Y4VVWdYcXWOlVI_sbLqIvJdQd6rrKq6waqpB6yWeoE-37GmOLfWyuSdoLdifDDOdxzKxsMEmAiTYApMRd109Wn-Zn3-A72ofz73hqd6RHdJupOMp9vIZLq5zKQbywK6riyna8g6upJsqcvK7rq07K1Lyr66mPxGF5L9dH7ILfvoHLKXziq76cyyi84kO-kMsoNOJ9vqtLK1To22qWQznVI21bGyoY6R9XQyWQuqQWWdXJZHWRmdQpZAu3w6p8yiC8pU6CuxriKjdX0Z0K2krXtIqcNjDPt0Ml_8rxeS4WkWkVEV82dXJfx5VWl_YVXWX1KVx2dvJXzmVsHnbTV_I1XD317V8fdRDfBJ28Q_TTX3L1Gt_ZtUe_8-1Rmf3N3xCdvDf0718v-k-vgvqn7-S6q__7Ia5L-ihmA7DMcjUD4Kn7mjETPWf16NR_wE_w9qov-MmuT_Tk32H1dT_IfVNP8BNd2_R83w74RtaqZ_M7YLEDdOjfT3VQPxmd3dX1e1xWd6I38-VdUfHv9f_t0n0gjjrh5h3IArcB5Ow1HYDzv1SGMTbIQNepSxXo821umxxlo9zlijxxur9URj1Wer9SSYjPIpqA-bitipaDPD2KHnGAf0fOOkXmSc00uNn_UK47ZeZTzWa403er0R4aw3JAScNUa0s8pI7Cw1UjgLjPTOTCMrZHNmwHSYZmR3psIUmPzZJJRPhAkwHvHjYKyR5bPMzhgjlTMaOUcZUc5IQzsjDOYMN97rYcZzuPsPw_-LEf-Df3dec_NjVnZ-zsrMr1rp-V0rNX9hxfIPVlKu7EQ8ZCfgiez4_CtIbEdDFE9iR_KkdjwIfeZCME4SO4CYMD_a-NHWz7-0He63fZyh_I3l8gdWJL9mJUCfifhRKxnfbaXkG9D3Uisrn2Xl5hOsQnyoVZL3scrzjlY13hyaWdWhBtSEWlAb6nxWF-ohrj5vAS2tBrwVtP6sDWK7I8cgqxIfa5XlM60SfIlVGH3mR9-5cP7_TO7_wX_7tNnLDstd7Kzcyq7Kjey-XMtey5XMVEuYTy1gCdUcllLNZqnULJgB01hqNQUmwQQcj4exLIUazWLUSJZMDWdJ1DD2lRqCtoNYAjWQRas-zFE9GVPd2XvZg72QvdgD-Q27JYewX-RYdlFOZj_KmewHOZ-dkUvZabmGnZSb2HG5gx2V4fH95dPJJPr7ReLpEuGKCiooKkEVqAY1VEDUgtpQV_lFPeUR7dVLPkDd4ZPVJb5UneI71D5-Sm3i19RS_gyeqyWwmL9Qi2AhLID5cV6qeaiby5-qOfwxPFKz-QO4p2bxu9j-ppbxH5DrW7UHP48n-RR1Ma6vduoVr6OEKB2HQIpSSoEFNnhBo9wBnygTxy_KYtzl4gRFeRU-v7B_dT5-oVLmZSppXqAS5nkqbp6lYub3VNQ8RUXM41TIPEoFzUNUwDxA-cx9lNvcSznMPZQVMkMGlKVDfSrzGMWgTRLzDH2JPPHNixTP_JmC5g3ymTdJm7fhLjyAx_CMHPMl6l6R33xHIfMDRZuGTGgKmdi0ZHJTy5RmQKYz48lMZqTMAtnMKJkD25woy22GZB4zKPOafpnPVLKAacqC5h9U2HyNcT_FOdzDufyK8wqfX9i_84o9gV2IncTOxk5hx2Onsf2xM9iO2Nlsfexctix2AZsbu5hNgUmxS9jE2KVsQuxyNj52BRsXu5KNjV3NxsSuYaNi12G7AWWbUL8FsdvQZjubFruTzYBZsbvYvNjdbBEshZWwFmUbYWvsDvS3je1D26Ox69lp5DuP3FfQ183Yhexu7Dz2BGN5GjuHPYudBTPY89jpMJW9iJ0MEz-bEOd57HjEjEf8OLQbxx7DI3gA9-A31N2Gm3AN8T_Hhs8_7NOcuf_znBme4hEDaHbqfrQqdTfakbo9HUndjM6mrku_pK5Ed1OXoBep89KH1HkoIk0O8qTJCpkgHaRBWUr6mDol_Ql_wLvUKegtvMb-S3gOz1Knoqep
s9Kt1PnpUuqSdDp1FTqYuj5tT92S1qbuSotTD0T_Az77V74V-_JkVh8ea_XmKa1ePLXVk6e1evB0VneewerKM1pdeCarI89steNZrVY8m9Wc57Ca8JxWQ54LT-PceELnwRM3L564ea1yUAplxVFflGfHkzcLZMRTPh22aSAlxFhFeFJIjJgvEZvQKs3jWRV4EHkcPME1cnutZthvw31WZ-5iHCGrG4_EmKIxvi8wzi8x3q8w7qRWePxh_-1TewmP1Wt5Wr2NZ9J7eQ59jOfVZ3hhfYmX1Dd4OX2fV4nzgFeFavohrw41oCbUivOA19b3eF19l9fTv_H6-jZvoG_xhvom3IAf4DjK96F-J9ptQr51vIxexYvo5TybXsazQCbIoJfydJAWUkNKHR7fX_52ha3Hm_5OtlAdYivx9r0Rb9078bZ9UN1hp_A18CO-Dq7ibfs6vhpu4evhN7gPj3D8GOVPUf9MvYLn8AQeouwe_MaeqFuI-RWxl9lt9QO7gjf8H_DWfwxfAnvwZbAJXwvLVbj_v_y3sx5-AUypiviTqEL-BKqAP6Ty-B2Vw69UZr-p0vk_ylj_B5nc_4dM4n8vv_K_kwn9v8v4EOV_K0PYBsGHco16y_-nlIgX_gjF_IYy_AyE8iCfx-8FB8cBZfpdxf2RSoBEvz7_lyoKY0jkT65i_SlUen9qlc2fTuX7Jy-qf3-7dLaqO53iVHPwyuJ0sKo67aGdVSVOW6uy08oq57SwSjrNrMKQD3LiOLPT0krntLFSIC452id1ullfOb2sRE4_K6EzAIbAUJQNs5I4wxEzwop1RlqpIC2kh0yQBXU5EZcX8QWdQVYxp79VCjnKOX2sSshXDao7PaEHdIdu0BW6QOfP_pVzzct6Un7WlQqxDlSUtaESrAWVYk2pLGtAFVgdqsyqUxWo-lk1qA41odZntVkNqgN1Wc049Vgtqs9qQ504DVkjaA5tqAHriPpuaNObarBvkHsQ-hhMFdkQKs-GUjkow4ZhDMMwlmFUHMdFoQjqCyO2EBtIBVl_KsD6Uj7kCI8_7NO5Bv_nc_UUjfiZN_fe5M28v_EW3oe8pfcpb-N9ydt7X_PO3je8O7a9oa_3Fe-H8v7eF3yA9zkfhLjB3id8iPcR3OXDvL_CVT7UexnlP_GB3vOIP8t7eX_g3aCL9xzvhLIOqGvnvYA-LvFW3ivoM9x_2L9yPdrRT3Z76PBZR7pgd4LO0AW60kW7J12xe9M1uy_9aveju_Y39BDbZ_Da7kPv4D3q_4A_7V70AfEf7R5xIrzdse0GXVDeCTogph1i26JNa7RtTb_bregVPLdb0mO4D7_Br3YL9NmCfoYrOL4cpxVdQpuLdhtoi_GFxx_2t0-3-bSXzaQ9bDLtZmNpJxtB23BpN2E5rMMlXYnLuYj1oIUwH-bCbJTNhBmsF01DzFTWh6ZgCUxBm8lsAAyCwTAUhqF8LE1nE2kOm4o8M2gZm01r2Bz0MY92sPm0j4XHEPa3A91iJOQ7jUR8r5GEHzKS8-NGCn7aSMXPGWn5RSMD_8XIzH81svO7Rh7-0CjAnxhF-HOjBJSGcjguz-8bFfltbG_g-BejDL9slOQ_GcWQozD_3ijITxj5-BEjFz9gZON7jEx8F3LvQD9bjaQ83P9f_pXVs8mYEthoTIVpn02HGTATZgU2xJkdWA_rjDlx1sIaY25gNayC5ThejPoFiJ2DdjPRfiryTEK-ccg_FsYYkwKjjYmBUcZ4GBcYaYwJjDBGB4YbI7E_AmXDETMMsUMD440hgQnG4MBEY1BgMrbTYQ7KF6B-CWJXGKPQ91iMaUIgPP6wv7ubq7PtqgbbpmqyraoW26zq4CerLtug6rP1qgFbqxqx1aoxW6OasHXqa5Q1Q10L_IS2RFwrxLdCu1bI0RI_qS3Zt6jbq5qzA4g7hPgjaHcM7U8g1wlVjx1H_qPo5zD626-qIz7cf9jfjbECX6LK88WqLF-kyvCFqjSfr0ryeaoEn6uK8zkwG2bgeBrKpyBmkirHJ6qKUAWq47gGvsBqoq4WYmrx6ao2nwmzVR3kqItctZGzJl-AuAWqGvqoir4qQyX0G-4_7G8X90qzlrPOrO1sMus422G3WdfZZ9ZzDpkNnGNmI-ek-bVzKk4zaA4tPmuJulbQOs4Js41z3Gwb55jZzjkKR-Aw7IPdqN-O-C3IsdFs6qxH7jXoZxX6X_nZ3w60rehhdBR9jS5ioNFNDDV6iNFGLzEBphm9xWxsF8Iio6dYAktRvwxxy42uYgXarDI6i9WwyugkVsIK5Fr-2TKjA-I7oF0HMc9oL2bCZBhrtBMjYBD0M8L9_-XTQCP_-V3oqRpRAo-W4lCU9rMiUJgOsEKfFaSDcQqgPj8ef_nw-MuDx19u2s5y0RbYxHLSBlgP63C8BnWrEbOK5cVjMR8tR7tlaL88TkFagbxhK9FP2Cr0uRrWov8NsIkVo62wHWPaBd-y8PjC_m71Hjea40nXAlryY0YraB3nqNEG2uJp9clhOGS04wexPQD7P9uHuL1otwft9yDXHqMZjr9GeVPENUGbJmjbBDmaxjmKurBjiPvU9yf_7aJoJboYLURH42vR1mgqWhqNxddGI9EI6kJNqIGy6lDNaBKnKuKqxPlaVI7TDJrjuMVnLRHzSTXkrwX1jNaiMTQz2ojW0B4Locs_WRT_fDKTU10nKdVzksBX8CXVdxJCAohPDZwoiMZ-NOKiqQ7KakFN1FeHas4XVCVOQqqMtpWdRPAVVXISQ5I4lZ1kEIOYWKoK1Z0UVAPbWiir7YT7D_tv3-JXiYxilcggVot0Yo1IA6nEWpFCrBOxkFxsEMkgqdgkkojNsFUkFttgB-yC3eIr8S2236LuW8R9i_hPkkMMxEIKxIWlRJtUkFrshB3oL2ybSCu2oP9NsFGkF-thbdyYMoiVceP75G9XxkBWX33D6qo-rJbqyWqo7qya6sIqq46somrPyqk2rIxqzUpBCfwQFMO2KMoKq7asEOoLIq6g6gSdoQt0RXlYN8R0Z0Xi9ETbXqy06o18fVgl1Y9VRZ81VX9WR4X7_8vfDrSA2YPnM7vyPGYnnstsz3OYbXg2syXPajbjmc0mPKPZkGcw60NdqA21UFaTZzJr8CyQDbJDDpSF5UR9LsSF5TbrQF3kbgBNeF7kzGe2grY8v9mRFzC78HD_f_m7Jfwnf6D_5Pf1B_gIEeKe9nxmiLvaxJZ9xsV9eKBFnIeaxKM4QjyFZ6h7gbgXaPcS7V8g3wvkfvbZU3gCj-ERPNSf-v7k0xi9n8ZofJrFlBGzRLvgAlgu2gfXig7BzaJjcIfoHNwrugUPiZ7_-JfSDsK3ok9wG2wQvYKrRI_gEtE1OF90CoZz_OXvZqKoSh8q9llxKAElPyv1DxlCpVXGzzJBZsgCWeOUUtkRnwNtcyJHTuTKGSqK4yIoL4y4TzLjOBNk_CxDKNz3Xz6N0fl_j9GTNWKpcMywJbAYFsHCzxbE0XHmCy9YoEB-RqgjtBFoK5CDI5cwl6FsGeKWCdv8K__fzVEVUZOqQjWoDjWg5me1_qEW1IY6UBfqfVYfGiC2Adp9Uh2qQdX_ogriqiC-CtpWQY4qyFUFOcN9_-Wfr5bwv6_YGXqKhsH-MEQ0Do4STYMTRLPgVNHyH6tgCowTbYMjRJvgINE62Bd13RHTSTSJ-_cZP_07jQ2C_-jF-Ec36GUCa6fCJrGOagrrqqaxnmoG66tmsQFqDhui5rHhaj4bDWPUXDZCzUbZTNSFY8KxU1g3tO2k_srzqZfAfz2XTyeUG58oTa1tRnNrh9Ha2mm0t3Ybna09Rndrn9HbOmD0sw4ZA-McgH2wB76FXbADtsGWf-gHveH_ae88wKOo1j6-O3POO2UnYecMIFyFtQI2lF6lCFIFpIcSQHovgRB6DUhIo4beSQhJ6B3pCAgqUpUmgvTeRYrw_c9m5Zp70St-1--53_d8eZ7fMzPnLefMO3N2Z2cn-48A3UEX0AG0AS1M2ZckfTievx9-xZ0L87AGTaGaNJlqgTo0ieqC-jSRQkBDmkCNaRw1APVBXUqAzwSqDZ9a_rj0-HSe2oFipFouI816rC-w
HukLrZ_1RdYDfbF1X19i3QM_6Uutu2j7CbZ7ehpsafCR_mmW21hgyfhfeGoHUt2zjGt2UFnX3KD3XYlB5VxJQeVd84I-cM0PwuVyUEVXKtrSYE-FXwpIBklgrj_u1yqhTz8vftm_aVSVZlBFmkXlaA6VoUQqSfOoKCVTwSfvc_OxLtukTfrMovL-GBmbsU6ZMs5DxV3Y9aa-OOgNfVHQ6_oCkBaUR08Jyq3PD8qlJ4OkoNf0RD9yPbefefCRJMNfMh-kgFTkSQMLwEJ_zjf8uZcEyT4kT63lefVTuqCuo4vqerqkbqDL6ia6om6mq-oWuqZupevqNrRth30b_D4DW8AmsMEfd15dSzKH5KkdyN8W_IB1MSqwrkZFTJVKrLtRmfUwqmC6VWURxoesF9p6w94LfhEgHHQH3fxx__wbhU8pYxNa7AulRWCBrzGl-RpRiq8hzQfJvgaU5AuhRCwT_esN_cyDjyQZ_vMDpCA-FaT584TSwkDOxb4mtMTXxL9c7EsfBMMZo7h116_vFP_9bvE_nk-_3KJdyCYbaWyikcISjGQ2zkhiY4y5bJQxm8X5X2Pka41cl23SJn2kr4yRsRlv9f4yhsNqKv2adKsqreS_hzMHH2pmPvkwETDIbyQ3sy2_-mYyYGirvMDbKzl52yc3M37rZTOedTRiWXsjmrU1olhr4xPW0hjGmhtDWTNjcODKKhLrw9EmbdJH-soYGZvxZTPQfVZtFsuuTWdymcEgXx13KMP8r5IZDPJ_KbPzxv7_rcxgkI949NG5_5GPDAb52wZHzXj_bx1kMJxSdqlnlM9VucxgKM5rqEV4LVUun_6OJWfCWXUNnVZX0Q_qCjqhLqPj6hI6pi6io-qCJ0dHrn-HNmmTPtJXxsjY9Jm01k-G7uX_636stfb__27Ggz-Elcn9azKEyY_syWp9_0d4twt__-K-lGCWT7Bg4AUCZAZZwXMgu89mz_ss9opPZ2_6VFbA90gt4bunlvPdVqv6rqq1fefVhr5jajvfAbWL7ys13LcNbFB7-FaonX1palvfNLWpb6raxDdFDQWNQIhvsloPyzqgFmy1fPPVSr6VamnfVrWQb4_6lu879WXfRTW7767q9XGmAfJpWOrAZDrGY_iCmenzMo8vffyWL31f_-GVaDRLzTaaLcg2ii0Ei7PFsyVgWbY4thyszBbLVmcbyVaAZWBptmj4xLJF8JH-C7Klx6eT3kGgyq-xbZlfZlsy58Iy3fAbHyRu81DXPd7E9Yg3c6nU3KVTS1cQtXF5qYMrM3V2PUc9QHiAniAC9HJlpd6gj58s1NdPZurncoCg_i47gBeYsBFiFOR4xLu57vNOrru8Hfpu6bqBfuUYJOkDfet3Tod_-i12d7IrhT71zqft3nm0xzuXDntn0gnvFDrnHU9XvHF0yzuc7noH0ANvOP3s7USPva1AKD3y1kVbNbrn_QA-79N1b2m67C1JF7zF6Iy3MJ30FqJj3gJ0yJufDnjfoZ3ed2kj1pfDluotQbO95WiKtyqNQ554bxOK9rajkd7uFOXtTzHeT9A2isZ7J8FnBs31zqZ53jmU4k2kBd4kWoyxLvcm00qMe41Xjl8ylD7zRtLnWH7hHUJfewfRPoz7gLcPfeONwDh6YN860xH0c8TbEuvN6Fvsx0FvQ_iFwL8-7QLbwVZsb_I2ovWwr4Xfam8L9NWGVng7ot9uWPYEfWgV8q9BP-vR5yZ__5L0o5DnN25T_fMRmOjqSu_Y_UEUFbTHUXF7KpW351A1O4ka2MnU2p5LYdgOt2dTb3sm9bNn0EB7Gg21p9BwexJF2RMo1h5NCfYImmoPpNl2T5pjd6REuzmWITTLrk5T7A9ovF2KYuyiFGkXpr52AepmF6I2WA-1S1BtuzRVgU95uwqVsmtiDCFUyG5GBew29K4txyfpTPXsMKqL_PXsPhRi96OG6K-xPZia2kOpOWhtR1IHewh1sQdRd-xTBPz6wL8f4gbYnTDu9qA11pujrSlsjamX3RD7FoJ9DKHOdn1qbzdAnobIF4q8zaiR3Qp1aEf1_f1L0iv8bM-K5jFPed40T3vygnfNM578oKB51lMYFDXPeYqDEuZ5T0nwnnnBU8q86Cnt55KnjHnZT2nzKrgO201wG353wF3E_ITYe8jzAPkeegqYP3vymY_Q12P06bLymG4rF7hj6NY2w7ESjJxWG-Ntq5hR0rKM6tb3-sfWMj3CStP7WIl6f2u6PtiaoEdao_QRVpQebQ3R46y--mgrXB9nddETrHb6BKslaAoa6-OtBmhvAHsDPcZqpEdZofowq5k-1GquD7Ja6wPh39_qqPe1punNrN16ZVyV57fyGz6rlWFZk41Hnt3GdQ_H_psgE-rhgGyozwvgRdTrVSDrJ0mvfe4_VnvFneBKMb42k4z95hzjW3OGcdScYnxvTjBOmWONc2a8cckcaVwzI43bZj_jnhluPDI7G4qnjaF5mhmWp4Fhe2oZWT1ljVc87xjvenIa73mCjKqeh3qI55LexnNU7-n5Uh_u2alHebbpMZ4terxngz7Gs1Yf51mpT_As1Sd7FupTwTTPApCG9VSQAuaDZH2Kn3nwm6dP8iTpEwNM8CTqCWA81sfBNxo5hiJfH88qvbtnvd7Bs1Vv6dmlh3r26vU9Z_SKnvt6UU-wkcfzipHdU9QwPdWMh2YL46rZ2zhpDjSOm8OMY2a0cdgcjTpMNA6a01GTRGOvmYr6pARIL-4_XoWsNTaZG4wN5hZjnbnNWGvuNFabXxkrzb3GcvOAsdQ8ZCw2DxtLzIPGMn-btEkf6StjZOxaY6Mp80gyvNFF6Cv0PvoyvZe-Un_SfYYrw18GmGZ8ZS40vjAXGzvNpcYOc7mxzVxpbDVXG5ufpF9tbEHbZ7Bt9_tI30WIWYBYmSf1yU4--7-8NqJ1rCmtZ61AB9Ad9KENbAiIpo1sLG1iU8Ec2spSaDtbTLvYStrN1tJBtpGOsi30A_uMzoJLbBtdA7ewfpdtpftsM_0Mn0dsHT2Gv4uvIjdfDpaSwheBNFL5_ADJYB5IAolgLuxzwGwwEvnC6A5rhNzl6Uf2Nt1jWZHvMdf5BS74GZ6Zn-BZ-TGejR_if-P7-Qv8a56T7-Iv8u38Zb6Bv8ZX8Vx8EUjG-iz-Cp8M21ieg8cgJhqMRHwU8kQh3wjuBcHAwrYHvvdZGr_INvKjbD_fw87z7ewx34QxfMreRf0KomZFQUlQFlQAH6K9NmgUIP34hDz7zzu4_5DSizvEnZvvopz8C3KwNPhO1HwHaoYPpf5jtIEOsTW0h62gHTiGG1kqrWJJtIjNonk4vtPZBEpgY2i8n1E0jsWDWBANRtBYNhwMA5HYHgqGwG8IYgbTBDaIJgaYzAbSVDYA-frTDDCL9aM5rC8lgnlgBdjKetM-1otOsAi6ysLpIetBHh5G2Xk3ept3obK8E9Xl7akdb0P9eUsaxZvRXN6IVvF6tBas53VpE69DW8F2sBN8AXajfQ_s-3gI7ecN6SBvTN_wJnSIf0yHeQvQmo4g52HeDnRAeyf6lneGT1f4htEB3p328p70Ne9NX_J-tIsPpB18CG3jw2gLH4E-o2kJn0ozcb7G8xXUj6_DGD-jOnwHlULNcwd4jadSDpCVp1Aw0OD_mCXTT6j3Dcyji2y6nwtsGp1H7dPBtSGbDCaBiWACSPBzno0H48BYxKRzD8fI4HGoWTS9zqOoGB9OlXkkNeCDMaaB1Al0Az1AL9APDAKRfBCNCBAFRsI_GsRgP2P9DKU45JHEY7_jkTee47oR-x-PfuIxF-NALI9BTCxi45FjFPKNpk_4GBrOx6GP8dSbT6HOfCY1x1yuh3ldBXUohZrkx5yX9ZH8meuNHpQJZ4sXr1I2EMDBK0NmkMVPN8rKOtNzrD1lZ23oedaCXmDNKCdrTD7WgF5kdekl9h7lZq_RWyyI8rM7vAj7jpdk2_j7mOEV2Tj-IRvDq7F4EAOiwHC0DQWDeVU2gFdm_Xgl1pdXYL15eRaBuJ68DAvn77EevDjrzouCIqAQtgugPR_s77BePC_832J9wBD-OhvJc6OfV9kU_hKbw30sledgy_jz7FOene3i
WdlhnhmvMoLd5V5GFIRXGgtjNvFKo7MSoByoAmqBBmSwj0Fb2LsG6EYeP2GIC0N8dwr2k16_TOzPvlt42BCms8GMATd4pA5mD8BP4I46iN0Cp9V-7Bu1D_tc7c3WgjQwDdvxaB-sDmQDwQDQTx3A-oBean_WE_SAvbval4WBbvDvCrogtrPaC0QE6Al6gDDYusKnM-gE_w6Ia4_4dixW_ZjNUxuzzWp9dlStw35UazEvq8XeBBVYXVYRVAKVQRVQldVjH_qpz6qB6iyEfcQaspqsESJCWW3WhNVhTeH5MWgBz5agNdbbgvagI-yd4dcF_l2RIwz5w9n7LIK9x3qzoqwvK8D6s7fZAJaHDWKvom4vghyoZXaQBQgQDDwB0o_Pv37g2-bXeRZ-jT8PXuRXeW6Ql1_hhUBJfpmXA-XBB36u8AqwV_RzjVdCbCV-A9wEt8BtcAe2H8FdPxX4T7w4VykvN-hlnomycJt0LugBC8Zrt4dOMoW-Z246jvfD79gjfow9BA_wPnkP3AV3wG203YL9Bj_OrvPv2VV-kl3hP7DL_DQ4D65g-ya4C36GXcUYDYxR7p_kj9ySucje5VdZAX6DFea3WXF-h5VCvvcB9oJVBTXAR9iuCWrxH_3Uhl8d-Evq8lvgJrgBroNraL_qpzbGWJtfRvxFVo1fYJX5OeQ9y8rxM6w0P8VKYn-KgaKgCCgMCqFdUhAUwL7m93OG5UNcPsSncx7jvgAuBnj65WqEksvspPjMVspzZqiSyQxRuFlLeWDUUK4bVZUzRmXlsJ86ygmjsXLeaKncMNop943OCjPD4B-u_M2UOX7h6b08r0w1XlVmGW8p84yCygKjuLLCKKOsM8or24xKyu4nvZRRDhhFsZ1P-dx4U9lkvKasMV5SFhs5ECdz_EJ6L7-6D51--VvYlf7lS5vAlzFdAl_ORAS-rBno__JmIZbzlT7mHCXcnAGfqUp7cxLiJiiNzQSljp_JSj1zuhJizlYamklon680MRcozcwlSvPAFzwtzN8u6ADlDTNSyWtGKQXMWKWYOVopbY5VKpjjlQ-f9BCv1DRHYjtSqWgOVsqa_ZUSZl-lkNkLcU8taIbL_F8KkV2ZbDynTDSyKAmGo4wzhDLG8CqjjGAl3rCUWBCD9Th_m7Rlhk9W-GZDjIzNWNDApwwZaCgj_cH_YDitG8oJ3VJOBT5-1HnGl_o_dtFZyR2llbKjQSyIB6O00vYYME4rYyeAiVpZe5pWzp6tVbCTtcp2mvahvVj7yF6m1bVXaQ3s1VpTe73W1d6sDbG3a2PtXVqivVtbae_TPre_0Q7bR7RL4Aq4bh_WbtmHtB_tb7V79kHtgb1fe2Tv1R7bWzUSy7UgkaRlFhO1F0SU9oroq70hOmr5RKhWRDTQiom64COtqKiqFRYVtYKiHGyltbyiFPze0_KIklouUUJ7VRRHbHHtJVFM84miWg7wgiiI3PnQV17tmv2GdsLOre21X9W22C9py-2cGG8ObRaYBiaB8Wgbbfu0OPtFbaT9sjbCfkvrZxfRwuz3tbZ2dexvQ62e3UarbvdATYagVkNQt6EgEgwDw8EnYASIChCH2HitvT1a62CP1Tqivp1Q3872BK0LatwNhNlTtYH2DC0GtZ5kJ2pJ9nxtGeq9yV6kfWUv0Y7YS7Xj4Aesn0XbBXuhdtlOxT4lazfhf9uehdpO136yJ2v3kfcB-vgZx_ORHaO5UFM3akqim6aLNpohPsZ6Q01BXe_ZNbUbdjXkraodtStrB-1K2m67Ao7fB9pmu5z2KfZ7uV1WW2CX0ZLBHDAD25NhS4DPGPjH2R9q0XYtbbjdAOdBU62_3UrrbXfUwu0w7Ftv7OtArZ09CDUYAiLBcDACjAQxIC5A-tn-9O_xS7lCgku5Gga_52oUXNIVGlzC1QQ0Cy7uah5czNUiuKirVXARLAtju5Dr4-CCsBWAT3745nM1Bg1BA1AfbfVgqwOfWvCtiZgaiK2OHDWQ6yPkrIXctdFPHfRXF_3WD07vPyTw_cKrTxnjP9_GHOGapMaJSeoEkaDOEGPUJBGjponh6lIxQF0pItQ1ojNoBUKxXVddJqqrC0QlNVmUV2eKsuokUUYdBUaIcuogUVHtJaqpYaK22lE0UtuJFmor0RGEg_5qWzFM7SCi1W7op6cYrw5Av8NFev9x6GeE6KJGia5qtOimxogwtHVX48Fo0UMdg-VYMA7t42FPgO8ExExE_kmigzpZtFOngMmiLdrawNYafq3g3xKxLZGjJcbZEvlaI28bNRZ-MaI9-uqgjhSd0K_sX5Jevfx_4oP0Z66cSrQVrMRYj91x1nV3vHXSPdra5x5rbXGPs5a5E6y57olWlHuK1cU93arjnmUVc8-1fO5ki7lTrYuuhdbXriXWbvCVa7H1pWuR9YVrgbXLlWbtdKVYn7uSrR2upACJYC7a5oDZsM-C30w_u13TrX2uKda3rknWUVeC9b1rnHXKNcY65xplXXbFW5ncw6z87n5WPXcPq7e7ozXN3cra7G5inXHXtwylpuUoNawcII9S3coP3lOqWZWwrAVCQRvQEfYw-PZQ6lrhSgiWTbDd0uqkdLI6KF2t9koPq60SYbVW-lqtlAFWC2WI1VwZZjVTRlhNlZFWE9SpMerUUIm1GihxVn0l3qqrjLLqgGqgArbLgGIgP3gTPq-BnPD_OzG_IjoDv_uVytPfe9zJrlz6HScnyAqC9duOpt9wXPpV5552wbmpnXauaEedc9o-57S20zmpbXJ-0FY5p7SFaEtyLmnT4JPgPNDiHKaPRPwwJxt4WY903tI_cQqjrbQ-2imvj3cq65OdavoM5yN9rlNbT3Hq6oudEH0V2OA01Hc59fUDaDvuVNfPOJX0y04p_bpTEGPKFSAH4l_Rpziv69Odd_RZsCU6xfT5Tkl9EfpY4ZTR1zll9U1YfgZ2IP4L2HbDZ49TRN_vFNAPOm_rh53c4CX9iPM3_ZCTWf_GyaTvc0z4EWJUfQtY5ygYl6ovwT6loR7zYJ8NvxmOF30LfZrj6FOdLOA5kB1jeh7I8UkyXDKspY3aetqqraVNWrrh-L_353bdivoX_z1bD-6OqnzsST7-JB-Dko9Dycei5ONR8jGp8YHHpuTDdPKhOvlwnXzITj5sJx-62xp4CE_Kl0oZUylnKmVNpbyplDmVcqdS9lTKn0oZVCmHKmVRpTyqlEmVcqlSNlXKp0oZVSmnKmVVpbyqlFmVcqtSdlXKr0oZ1iv0hV-WVcqzSplWKdd6ik765VuljKuUc5WyrlLeVcq8SrlXKfsq5V-lDKyUg5WysFIeVsrESrlYKRsr5WOljKyUk5Wysgad9cvMSrlZKTsr5WelDK2Uo5WytFKeVsrUSrlaKVsr5WuljK2Us5WytlLeVsrcSrlbKXsr5W-lDK6Uw5WyuFIeV8rkSrncdNnc-n4Z3XQ53SJ-eV0psyvldqXsrpTflTK8Uo5XyvJKeV4p0yvleqVsr5TvlTK-Us5XyvpKeV8p8yvlfqXsr5T_lTLAUg5YygJLeWApEyzlgqVssJQPljLCUk5YygofCMgMS7lhKTss5YelDLGUI5ayxFKeWMoUS7liKVss5YuljLGUM5ayxlLeWMocN_I_UpfOHvYA-X4WV5jLecgUx-LceYHrztvc45TiwU4Nbjt1uHBCQCh3UNvMTmvQgWdxuoJw0B9EwhbNvc4YbjkTueZM5W5nJn8g5vBbIpFfBqfFXH5MzOYHxQy-W0zmO8V4vlXE8k1iGF8n-vM1oidfITrxpaIVXyRC-QJRl6eIajxZlOZzRT4-S7zCp4ssfIrQ-ERxj40Xl9gY8R2LF4dYHGoTK75GvXexkWI7ixKb2SdiPRsm1qD-K9gQsZQNFItYf9S3j0hlESKFdRfzWRfQAbTEdija68P-kVjMqohlODYrWWnxKSsuNrJCYivLLz5necVX7C2xj72OPvOg79ziFDgHLoFr4Cbaf4T9PnjE3hBu_qZ4mxcSDXA8hvEqYjGvI47xpkLHnC5IPURTGiDa0WDM9aGiL-ZqJEWJWIoRCRQvZtAYkUzjxQrM2Y00U-yiJLGfFopjtFKcpk3iMu0U
N-mg-JGOinv0g3hIF8TPdEM8pp_AY_GINOchZXLu0ivOTSqMeVoFczTUOU3dMDcjnSM00TlIqWCRs5-WOvtopbOX1jpf03pnN212vqTPnF2Y39sxtzfSt85qzOtF9IOThHk4jc47Y-mCMxLLKDCCzjmfgOFgGIgEQ8EQ-LZFXDXE56e9znP0pfMQ8_QE5ug2vt5J4SucUZif4Xye05DPdErzSc6rfKxj8FjnKhvu7GcDneUswknEvExgHZzRrLkTw0KcOFbJGcWKOuPY85jLjjMR83EK05wZTHXmssc4nj_jOD4Qq8FasA5sAJvBVrADfAH2BGjO7-B8uy0q8ZuiBL8u8vJr4iV-RWTml3C-XcTxPC9usXPiMjjLzorv2RnMxdM4F06LL9kpsY2dRO6T6OME-jsuVrHvcA4dwxiOiDR2COfYtyKJfSPmsv1iNtsjZrKvMOd3gm1gM1iPttWwrYDPEjGPLcQ-pOF8TEGO-cg1XywHK8BKsAqsBmvA2gB7EHOGLcVYVwkv_1S8hrlVnG8TNTDXWmLOteFfi_Z8j-jI94oufL_oxg-I7vwbEc4PiQh-RPTiR0VvzNE-_Dg4AX4Ap8FZcA5cgP0S_C7D_yrirokeqFUYv4FcN5HzluiMGnYE7UFb1LQ1aAmaB_i9h5n_c57n-O0x_uc8EfFsv1XzR775ufD_3_zQs9b1WW9-JP2P3fy4_4w3P-b-xTc_fmdO_cd8fP_9fzf8d394ev4v-_Ak96P5Xy_45Y50_7uvH0fj-nHCn7x-DP8Lrh9XP_P1Y83_xvVjnv-V148H_o9cP07-b1w__tmf9f__687_oevO_wLfLGxh';

	Snw.Art.Drawings.P2 = 'eNqsmw18j-X--O_7vu77vp6v676_-277Nk9LM4svlpSHFovFaNWOFkK1tLS0tMPIkZMlaUceFgtpadWSUMRisVi1tKOFJBRJEmJYLHlK_8-cc37nVFLn9_vv9Xq7PtfD_bk-19Pn-lyDZTT8_NQ0ykQWsv7x86_05z_of4ovXP-_-fm3SvQ_6v8hIOvn5qB_9Y8urOCP9IXQH26Pfm6T9Qc7bejhAl-hX8_sP1qhn5X8TPOv1PyWNb9r4u98iC4yYb-w-WcL8c_6f_35hy1DF-wU_VpGF9mC_8X40W9V_qzC_EUG_abCfyzcRTpAv1zKi9qI_tW7-buTdmEN6L-a-J_v7v85Exfs4B9b-Q8dOPQ7c_1bplx40OYfGT36r7Yz-vVxQBeuRL9q9C_Mf9vyc5PQxRbiFw7hH1OK_kdE5s-MRP9xmtB_6kW_OsoI_ZaH-sfC_kM9-v2t-nuThy40ov_Ui9DFtuK__Tn6xcqav30yzH_fAegCpqJ_Nvml3_hne_O_vqL-cxl-pdj8uUe8mE81_4ir-tnX5oUmy_xv3Nwf7uqP-oeLrc1vlJv_vND-I0q42CG_cCX61eybFxzsRffs_yI6MS9Y8Gsnji4WA5nWRe5v9Id6vFgB-kWh-V9skP92AtDPjsNvu-lfRBm_3vsIXfQgmBe21_zVDX5hR_dLB25eLJhB6P-6S9AfikXMPzpQ85cRxYXvYfPinvii0egvfKP5X21AhC5YcyF39Yf91UW2N_qfQvOPOh30O-cA_buB-a8tZF44nvtVX7-839EvLoB_XxkXjSz-D-8l9F-Ggxe_kszfCu8vMMfoD62eedH33O92dyFX_m-t6BfvzQsux69n-__DKf_tcPh_88XPrjnzZ4_cC32Ffn35N-xb82cXzz-Pm3nBcZq_HU794Un5Zbh60a34M3-N_meZzQuE1-bFDrX5GxnzN_cP-t_HAAhdeMv-5mD___3K498j-d3H0n-3Cf_vJv7Obf2LBf-_DR_9O4T_Pafym9P0h0ZsXvCRav7mZfyHfy_y7yfhf0y_iX4_1PtjFqP_PLwXOEvo18f0ApfbH4pezT-65RG6wNlEvxE7X2w10K9_YYZ-cy-jXywe-sNB1v-HyPgXJpm_sRPN39krv3qk_v6JRb_6FcDFdsxvLKH5h44E-u1I6p-r0zexyJgammY8HZpgPBN6HHjEeC40xigJDTAWhToZr4WCxqshYpSGDKhDgGFMByaEbOOxkGvkh3obnUNDjLjQRIOEXjK-jc4xz0YtM1-Iqjd7RG21tga3W1uAzcHPrU3BHdbG4F6rPHjAegHSyVA-MjjR2hiRb1VGjLOWRDxizYsYb82OmGhNj3jSejyi0Ho0Yp6VF1GM3g2UoSWBajQnsB2ND3yDhgSOoa6BvXaMd9rerwPOW_p95xG132mtTjt1Ms01ZYa7TWS6S8SDboHId4eIcncHr3D_zt9y3-LL3EX8ZXceP-kIfsg5x_Y69Wy3c5B96exme5wt7KCzlg11D9Fsdz_NcXfTUe5OWuBupWvcU7TaNdiH7gm6yT1I97nVtN4towk4k16O_0Rj8fVU4i70AzeCLncNutQ9R153TwD1ZJlbR1a6R0iFW0sqgTgcoMk4RPviKJqJOc3F9aQWx5Dj2CX1-Bg-gndim1QCbwOrsUVW4R_xKnwWr8aHoe5VrMkkfDnJxF3J1TiNMJxBbKDe_RM56d5Azro9CcLXEIE7EB-3J9E4EdrFkVQcTYbj4_hv-ANcjIvwStwOf4jXu9vx3e4X-KyzE09CX-AwOoI_tM7iEVaIhKwOpNIcTHLMieQScwWpNjaQhcZBUmik0QyjhLYzTtJoI8wCxmAWaYxkMcZkFmfMY2GjjHUz3mG9jI9YH-MzlmrsYz0Mi19hNOEtjf48ypjJlbGMC-NjSPcBcQIbtwjTGCgMYzbwGsi7BTcMGTCayGZGV9nauFMmGvnyCuMl2cp4T8Ya-6E8QcUZN6iwMVR1NiaqnsaLaqBxQE03iH7diNObjLD-wkjWrtlbY7OvFmamjjZzdLw5Snc0a_Vjlu1tscLeTDTA22Vne5c747yRzmxvtfOp19095413Y_0Fbnt_tZvq17h5_gF3gX_W_cjnOBhIxB0CqfjWQDbOCUzB4wJleFJgN7AX5weO4vGBepwXOIJzA4fwg4EDOCtQhfsGXsZJgb_h5oEHMQkMwAf9VLzeT8IL_Ktwtt8Kt_GjcL13xl3rbXfzvRL3Xug_3RvktveauZd4ux3bK3Hq9Z3OMT3AqdP9nMP6FucApLv17UCms0Wvddbqh93V-g23Qn8OHAEMXKkvwVU6jDfornifHoyP6WxMvIfwSq8eH_daklb-nWSav52U-R7d5KfRA_6T1AvkMC-Qx0TgCUYChcAM5gZmMjtQxAzgrD-TnfRnsB_8Qrbb78i2-_FsvR_Fqv1YoDVb5yezSj-blfnTWam_nBX6W9kY_zgb5GPexY_gQT-Ke36QC9_nxBfc9gngcur_xIT_I4vzT7D2_kHW2_-I9fNfZQP9fHan35Nl-Izd4G-mV_vP0cv8ByjyO9GvPJuu8XaQOd5SkublkgRvIInx-hPh3UaYNxgYCfJo0th7lcR7u0gbL4J29O6kSd4o2t2bTG_25tEB3mJ6m7ea3upV0zRvK9QdpFd4Bgt7jLXyollzL5mFvLuY5_2ZEa-AYW8e495yFvSqgb-zKO9DoIZVeyf5US9RNPbvEXH-cHG5P0a096eKHv6Hoo9PZaqfKpP8STLsr5Rx_nsy0reV50epY16q2usNUlu9O9QHXqZa7vVX-d5V6k9ehGru7ZXf63K5WU-WS_Qg-ZSOk3n6iLhLLxW36KniJj1Z9AFSdYFI0YXATGCWyNCVYoDeAOwAeb9I08dFBy1kI32Z3KP6yBp1m3xf3SnfU_fKSjUc0jFQNl320MNVTz1WpejHVZKeqhJ1oZJ6jjqjnld16hW1Tb2t3lHb1UtQMgVqRqiQHqCa6s6qsd4lPV0lI_QqGanfkDF6gbxUl8rL9TzZXj8jk3WhvF1PkQ_rqXIOyAv1LLkS6jbrEvmFLpZ79XR5TI-W5_SXorW3SXTwqkSyVyHSvVViADDIe16Y_nNC-iUi6L8gmvkvi3j_DdHBrxJd_c9FT79OZPgx8kE_WU73s-RyP0--6z8hN_lz5Q5_s8oNdNKzA330s4EMPS8wTL8c-It-PVCgywOF-r3AHL0pMFfvBnjE0zolYqKuA6xggQ4EC3Vs8FndNlihrw9-pG8K7tYZwQO6f7AWSPceCI7wRgfHeWOCT3r5wae9ScE53rTgc97sYLH3QhD8STDbi4ts7hVELtM4Kk8nRw3RN0fdrjOiOuuHozw9J2qPWhK1VFVGzVHVUU-qT6Imqa-jtqtul-xRmZecUAWXnFUvXPKjWn3JKfXpJccVjxG6Y0wjnR1Tpq9sAjY1qdYDmmzR2U1-0nOaxHkfNunpGU3_4g1oOtkb23SO91zTOD8j9lp_SWxfn196l3_vpTl-1aVr_HvjfvRfaeEFNrVoGvi6xVWB0y1SApHxgwNp8dmBJ-IfCFTF5wYOxI8OkJb5gctbHgv0TsiMePXycRF2q3cjGrfeFJHZ-tOICa0_iXgJ5OrW1RF7W78d4YYXR7QIl0T0CM-KGBKeHJEfHhtRHL4v4s3w3REV4XDE7vCxwJlwWYC1GRHw2mQFZJuMAGnTJXAyvN4vDq_1C8Pl_oRwmZ8XrvDbh9f4ceG_-1-1rvGXtq7y81uX-Y0uX-bXJyzxNyTk-Ne1vMV_P_5K_4b4xr4VT_wtLU56C1ps83q2eMP7Jq7AmxR3u5cQ18wrvixeJ156VK2NdVRZ0x_lgqYFMqbpKGk2HSBrmiTKYU36izMxI_j7oSSeGIrjddERfHP0j2xl9Am2OLqOlUQfZjOja9njwMjob1hW9KcsLfojlhL9NkuKLmFXRmewS6OTaH1UW_p9VAI9ERVHT0c1pXZ0ExqMHkrLY3LpZzGP0FMxBdRrNIUmANc1mkwHNnqULmyUT_c0Gkfva5xPv2s8l17brJBWNptGDwMxsYU0DyiOnUU_ip1Lz8WW0IRLV9HGzatpefN4
9lqLTqx7_I1sW_w4dq7lRNY1YQZ7KGEJO5JQwZpfvpllXX6Sbb98Fn-tdTn_vnUV98Jb-aXhH3n3sCduDrcSg8MDxIjwvWJUeLQYGZ4i7g-XivvCmyBtJceEO8iHwz3l-HA6MAbyL8qR4RqZEz4uB4WVSg-XqqTwQXVNOFFfH-6ge4WTgGSdGu6rrwkP0J3C2bpDOE9fHf6rvjb8mO4TnqffCZfoH4BGbebqa9tM1Xe2idGoraWbtV2vbm27SD3QtkDlt81UT7ZNV9PbJqrn2w6R37f9WLRq9zqf3K4Jf7vdD6y63Q72frtNrLLdB2xpu7XshXar2MR2M9gLbUexVm2HM9k2h33XJod91SaXbW0zjlW0KWClbaayqW2mszyQO7WZyIJtHmVHwxNYZTifvRkexUrC6ezBcBeWHL6aJYbjWEnrEOvWGrMvW52lS1rV0kdbfUDjW62hEa0W0m2X59G2l3eiBQnfk29ajiaL468hbrxLbmyxHb8Utwz_cFkJLrlsJu59WT5-uflf8S3N87HR_AlcemkhTr20GB-OLcE1sYvxzNgV-M7Y1TgcW4FPNluF32-2EMc1K8SvNs3HE5r2w02aXoFXNPHwTU3y3aWNxrpPAQWNxrj5wCPAX4GxjR5w72o0zL2x0T1uJyC20X1ufcwo94OYMW55zEPuqzF57tyYWPexS04650JpzuSobk50VLLDo7o7RlSqczAyxdkW2cmpjox3KiJ3289FbrGfjVxvF0e-Y78Y-Za9KPINuzyy1N4UOdf-LPJJe1tkB3txZCzUNQai7dLIgP1KpLYXRgq7LJJDO2KfjDTs2KjvUErUdjQi6jn0btQUtDPqftQ4ejDqHn0LGhB9M8qObo5-ig6hiNBZq1PoiNU7tNe6NfSZdVvoI6tfqMJKCxVbyaEpVufQJKtDaILVOpRvhUITLRfK6qOLrK-jF1vF0W9YE6PLrezoSuuG6PetttHvWF50mpUZnWTlRe8z24V2mkmhj83rQ1Vmami5mRJaYHYNzQOmmteF8s20ULZ5byjTzAvdYBaGrjBLQy3MxaGguTT0vbEyVG2UhyqMN0NLjaWhhcbLoQXw_llgzAamhkqNgtBzwCxjSqjhDZWpF1hD9VLrHr3MytJlwApriC63MkHOhLI79RJgsXUHtLtDv2w1tA9r4STqAvsqfQfqqDNQku6LbtDpKEv3R8P0bWisHozy9QA0Aeom6D-B3AcdVxtMog-bMVpZCToRdL1kpetM6xoda7XVhtVY7zXr1SKzRo0wS1Unc4wyzF5qo9FOrTYWyCyjRA42imU_4EbjBdnbmC-vNxbLFGOdvM44KbtBLH29cZ3qYwxQGcYwNRji6RyjG8TOj-gXzT36E-ugPmSd1u0Q8UaigFeOgt5mFOXtQIneB3ZHr95O8do4Q7xCp8Crc1Z4N7o13ij3gDfXJX6F29r_zG3j73QT_T3Afoipa90w0BK4FGjsH3JPe5-7O70qt9Qrcqd449zR3kA30-vs9vVCbjzEviHvbsf3Uh3pxTmW95Fdq5va3-p16FtdhQ7od4EKtFeXoN36WbRTz0Gf6VloA-RrdClar8vRh_pDyBv2ev2C_b6OgZfjDOcVTd2perybr99zJ-h17iS93p2iN7hzQC7R77vzdY27AGLpVzTBpToSz9ONcZFuigt0CI_RGudoG_fTh9xe8E03vcgN61NOC13ixOkcp6Xu5cQDrXVTJ6y107DmHsxbw9x53luoQX5PXI_WilS0WqSht8SNqFzchMrEzehV4CUoK4a66aIbmiCuQaNEErpX9ET3QFmG6Iu6i4GorbgDxYg7EYV0C--P1vE_oQreE5XzjmgFbwnyc1Ylz7U2cW3t5UvN43yMaYi-phZxZpw4YcSLI0ZrsQXSzfAG22TEAkIcNX7k2vyRe-YZHmWeBj7mk813-ftmGTetpTxkPcgFup8HURZvhAbzZqgvj0WpvAm6jkejblDejSvARr34OiudF1iDeR9rKE-w8s7bETT3cWEe4BwggGse5Dbwk3GA1xnb-UljKz9rVPOQOY8PM4t4nlnIc81pPMecwrPNJ3kWyL2hLMmcyduZM3hr8ymeAGWXmvmQPsLD5hje1czlg4G7zCSebLXjU6wWfLsVy-NQY56LmvAhdjxfbifwVcAa4F0AOwm8u5PIH3A68hedFL7JuYtf4T7GC90pfL67lO92K_hJt5LbuJJH4Jf5abeY17kFfJs7jle5mbzITeV3uVfxsBviWxzMJzj1LM6pZVvsPewRoAXwEfqW5SGDP23ZfLSleJqVzTcaOfxtYzRfYIzns40n-ZPGAp5nlPNhxoc8y0gUfYzOopfRTXQ3UsUVRroIG7eJFkamiDfuArLOE2fkiITz5InWxmTRxSgUScZc0dWYD3wuehhCphlJcqCRI3OMfXKRcVqWG7FqC5x3aj6uepkvqTFmmXrWrFbvmtvVcfOAutQ6rm62flQPWxb4MKEDiOkeiIJfsnQe-klNRGfVk-i0moHq1Wx0QM1DX6nn0U5VjD5Vc9AmNRPVqKmoWj2BlqvPrNfVBmuxWm-VqmqrCHhKfWBNVVXW39Ra6wm1ymqkXjJtlWMekB3N9dI2F8hPjGmyzBgnXzZy5XNGlpxjDJKzjduAASAPkHONgbLEeF92MI_JJ82g2me2VE2sRJVipahSq6daDrwH8iaru9piJattVju1w0pQX1kt1V6riTpuhRQ8IVVTxFQrZKgr0QnZCR2QSWg78JHsjKpke1Qp41CZ_NYqk7utpXKZtUA-bo2T58xR8oCZKzeY2XKeebfMMe-Q3c1ucjXM8Qqjs1xmdAI6yNeMy8H-OPki8IrRXC4GlhmXyZXQRpipMsu8Wa42-8o4K112sFJlsnWd7GVdLftYV8g0q51MtxLkbdZ20RR9Ki5Dn4gEVA1-oEr0AFLO-4-2crF1pVxoJYFtXeUKK1muBn6yegAp0kDJMg0lyf6og7wTtZJ3o6YyC0XIIei46I-OgB85CH7mAOg6ILqiBLncaiWXWg06F8gzTobs5HaSaW68vNUNyoGuKQe5R8QAt1rc6L4pUt0XRXe3QHR2h4o2bj_R0u0pYt0EEeH-wH90avgeZx5_3xkNZymLT3cG8IeddJ7lpPEbnGT-hJ3Eb7K78CCkO8FXzAbfMQX8RQFK50-CT5mB7oGyB_gclMdnoof4ZDQF_EoRT0DFPBVIR_P4raiUZ6HFcJ7f4g-haj4WXSPGoD7AQPEQ-MnRKBvIF2PRFJEP_nQy-NbpaKcoQrYsRG3ko6irfAilyWHoVjkIDZapKEs2QnlymDVePmhNlKOtyXKi9arMRYvlWPSGzEflcgLsiXy0RY6BPTIG1cL356BeqCyUqBJRkuqDklU6SlX90S1qILpV3YYGgDxYZaChqh3KViGg3spV31sj1UkL7mg0VnkoXzVHE9RV6DFoN05lo_vUaNRHjUWN1XjkqMfR93I62ivnQL8L0HtyNdjxEbAZrZJ70BpgndyNquWXYNNH6Ev5AezhanRK1oBd24FtKKg2gq5qFFblqIcqBZuKUa56Dj2sStBktQAVqtfRDLUMKENT1NuoQL2DJqr3zn_7Dx3bwYYjaL8k9meyub1FJtkbZX_7Y5kH8hR7l1xin5RltqNW2gFVbndQy-3r1Gt2mnrR7q9m24NUgZ2pxtp3qKHAEHuwGgT0B1Kgrr19u4qF-pB9n_LtEaqRna-usqeoW-xClWlPV9n2MLXP7qvinSvVECdOPeIw9azzjtzrrJCHnYZ9ms2vNBbytkYd72BM4g8YD4P_HMEfMYbxSUYWn2kM4q8bSRybXeBOu5pfYibyWLMRv8oUPN38kWWbx9nj5lfsbbOGMWs9a2b9nXWwatgN1i7W1DrIjpkuL4b2I03FV5uEf2LWsnTrSzbN2so2Wh8xgj5gN6E1bCOqYNtRGduDlrK91qvsG6uUHbRK2HfAaetZNhE9w_6GZrHpaAabiaaxIjSezUBjIJ_HnkR3sB5oMEtGA9g1KIN1Qn0g35P1AdJQL9Cfwu5DyWwMas8moBg2BXFWiH6gz6JvaSnaSd9AH9NKVEM3og_obuB7tI7adhUV
QNAuB5ZRZS-lrr2YnkPF9BM0k76CnqQ3oCnUQtPpF1YRfcuaQ4usEjrCWkJbWeVUWxXUsKro9-YWusvcST82D9BqcyTrbC5m3xhrWbnxHnseKDKq2WRjPcs3NrExxm42zPiO3W5IfqMR5t2NnryT0bA-a-hZdxWtd1-mR9yn6W53LH3HHUMr3Vy61s0BhtH17v20xl1KU_C79B68hebjs3QlbsW-wt1ZPR7MDDKKCTKHRZDPWIhUsXbkddaVlLDrSRHrScawFDIY8smsI4lnYSJYLKmmdfhVuhVPBz159BmcSUfhG-gt-BraCrt0nltOHnReJ_2c58k1TgnJceaTOc6b5KiznqS4e8ksl1GCO9IxuDd9GQ-j-_B8ejOppKPI5_RZ8iwbT99mr9BNbB09yGrpaRZggndmIZ7FLucVrAlfzaJ5GQvyxewAu4WtYN_Tv7Ji2pWl0lP0JBlObyVJNERC9HN8nDyHt5B-uJxE4RfIh-5k8og7jnRyc0itk0UWOIPJLc5AEu0MIJPswaQeZZK1KI8E0UhyzBpBvrNySZ31IDlq3QcMBTmLnLAyyRlrMHFQErTvRFLszqS105sYbhI56HQgnzgEymAz2wY5gs7hOcBwZJAeiJBaS5EyqzEZZ7Um11pdiGelkj3mXeQVM4_8xSwkyWYRucZ8lrQ2FxNiVpJDxsdkk1FLVhg2nWc0pU8a19JRxgCabWTTTGMcHWCU0j4GYVcaSUAy62BczzoafVgX42aWZPRk6cZ1LMNQbITxHX3c2EWLjKV0lTGRfm1k0EgzTNNMh8L5JFXmLlJjfkE2AlvM3WSvuZ_sNg-SXWYt2WmeIBtMn75otqT55vX0VnM81WYxPWpU0o3GXvqGwdkcI54VGAlAGPZrWzbFuIJNM9qz6ZAWGolsJlBkbKLMXA_9fkAvA1qbNbSD6bBDxqWs2pjE8oypLNcoYiONubDXi9l4Yw572Shk643H2GHjQabNNHaNmcCyTINNMbfTpeZC-oX5GJXWENrDSqV_tdrRKitEGRK0LbJpX3SKFKOjZIJ9lKy0j5Fa-yRp7gRosZNAdzvd6aVuJh3iZtOR7kj6mJtPn3Kn02L3L3QQnJue7mB6iduLfuF0oAug_Z-dRjTJCVK4Mmi17dGngGhgD4qkS1AMfQy1pH1QIm2KutN9VhadaA2l-dZ9dJz1Z5pnjaaPWmNoATDNGk63Wzm0zrqXNkb30etRDv0zyqNzUAE9gGaBL5lPO9k_0cZOBEtxwizbuYE97gxiM5xc9pzzOFvoFLFVzjz2kfMS2-u8xjq5i1lf90WW7c5gY9yxbKJbTMvdBXSTu5h-5m6mH7kj2HL3BfYitHveLWMlbgV72a1kr7v7WAyuZ33xafYAPsOexGfZ6yC_hb9jO_BuVoe3spO4mp3C89kPOJftwxlsO76OfYhj2HxM2Ax8ho7GDX6nOc80486TZV7Gh5qx_H6zKR9uwlsAeAAYBtxrNoH6pvxuqB9iNnwzhJWY2WyemcOKzQfZS2YuewVYaIJ_tm5mA6wUVg6ssZJZtdWVbbCS2CarC_vE6sg-tTqwrVYipG0g3xrKL4f6OFYCcibUxcJ3e2CvVJmDWal5B3vxfF9zxHy0SCxBy0UZWiHK0ZvifbRKbIJYbz-qET-ijYLafxdRdpVoYq8Vl9rlorn9JrBUNLMnipPoAVFo3yfm2UNFqZ0pXrVvFivtDqLCtsXb9mF462zhr9tv85fsxXy6PZ8_bpfwh-1nea49l98LabpdxLvaI7hn53Js5_Gf0Gb-NjrEFyNTlKLG4lnUXsxFWZA22HmE_4DO8lrExDeokdiDwpB2Et-iZHEU3STOogFC2YNFHNDOvl1cBSSB3APoYw8UA-x0kWd3FQVgX6EdL4psImbZR8CuPfxv9uc8367hw-xqfrP9d34VyAn2Jt7U3smp3dBvH7YGpQMD2Do0nH2OJrITqIhF2MWsgz2P9Yd0tf0Mq7KLWI09lW2yH2Of2GPYRjuXVdv3swrgDfsBNt8ex8bb49kYeyIbBtwLZNkTgPHsbqi7C765y85jQ-C7LDuHZdvZLMfOYrn2bewJuw-bazdha-2vqGd_QU-h3XQvqqWb0Fm6FjG2EvmsHEWwSuSxDcBGYDMKsE-gbAvc31tQLOS7sHdRD1ZxfjxT2E_2DGY50xhxpjLmTGHcmQjyMCgfxk6CHSfAnh_shna92Z3ONSzNCTHlILbevos1c0ay1s4T7Eo4e12dYnYTnL-7nGfZaGc2e9gpZOOdv7EJoG-C8wAb6wxkw50GHdnCYcliB20vaqghptAtvDddzBEt4KtJJh9EbuQJJJmfwnH8aRzid-AAb4e_ZpudPWyFs5e96RwAvmVlTne-1u3F97s38Jb4Vp6FM3kJHsF34gk8SObyvuQjXkU6iUfoYLGEZolyWgB9lohj9E2B2DHRnnnyFmbIQaxO3MZ2i1vYTpHONos0tlH0YZUiha0SyWy5uJaVig5srIhi2cJmDbYX8a-cZ_g-Zw233F6iJ7xD-rv3wvtkmLjNzT__LwDGAZPdv4m57mNiKZRtdB8Vh92pIgHPEB3xM6IbflF0xaXiWrxUJOLlQDmwRrTH74oOeJcYjOvFJGzLZTgodwNfA_txQB7CnjyMpTyKLeCcOALtvgVdK3GOmIbvFZNxW_j2LG-Ga_hX7gI-153I091cbrgP8pPOcF4HfOs8CG-kXL7LGcV3OGP5dmc8MIl_7jSMq5uKhxi6jX296manQCzcVWXZV6uRdis13r5MPWbHqEk2ASyQz8pH7O9lrl0vbwNuglg8xTZUoq1VE7uxCsI3EfYVkHaEGLtB7xJdjZfrD_EKXYMrgHUgV0FZla7Clfpt_JYuw2_qpfh-nYrv09fhYborztHX4OG6Mx6hO-HRwETdDRfo7vglPQj_xTuEK7zm5Ix3O7nKLyY5_m4ywTdohT8cGANMoKv8v9Gl_jP0Nf9VWubX0WV-kL3q38Dm-Pms0C9ik_1i9oT_PBvvz2Pj_GfYGL-QjfUnsof9sewhP46BTjrUf4_282fTRP9Kmux3p6l-Gk33B9CB_hA6zL-HZvgdaYU3gSz2HiTTvJtIgncGx3mncSzQGIiBfMj7ETBIyCMkzmtE4r2mQDxp4SWQy7zWJNZrQxp7baG-LdmmfbJKI1Ksa_F4vR3fq9fidL0Ad9GT8CkVgXeoje47arK7WHV3i9Upp0htdQrUfc4TqqMzWWFnhtpmz1ML7C0w97XqCKpTh9BZ9S0y9bfI1gcR0eA_dR0Suh5pbdlCpzlcZzhE93dcfZtj60GOqQc759Qg55Tq55xUtzhHVB7oGmEfVA_aB1SOvRf4Cvhc5drboXwL9Pex-gxS5mxRHZzP1f3OPlXjGHqwS_VkV-sX3NZa4c66Pe6jM2B9J-BcPQU_rOfg6XoxnqvLccP-KJMz7RXAW7Lo_Ptut6y2v5C77U_lCbtacqdKKmeN9J1VQLn0nDIpnOWSOcskdlbKWhvep_abstxeLJ8Hiu3X5Vx7qZxtLwN9DbqxXOdQWekIWeE0l687XeSLTqp8zukni507ZYkzRM6HtMIZLD9wbpUbnTS5zblafum0lV87zeRuJwaIhryQ2x0itziu3ATUOA16M9V4J0fNc3JVuTMC1mS4OuTcr5CbqWLcXqqXe5ka656TJW69XOzWyXL3kKxya-UW94jc634vj0P5CfeYPA1lNj4gLfyNNPAeec6tkZvdSvm6-7ac766V89x35Wy3Ws5wd8jH3dPyz26EGugmqG5uJ3WZ211x909q-3lbYlWFc5la7bRWbzlt1Cqng3rPuQrWJKxOOE1UI1eoju5Jme7ukveA_tFuHPRRJ9a6e4BN4LfWi4Xu--J5d50ocqvFNLcGfNomMcndKia6u8Wj7n6R79YCQk5wE-TDbooc7g6Wg92Gfmeou90Z6j53pnrQnaCCeLxqhseoOJyj4vFtkA4AspSHs9VpN1fdBvRzR6i-7mh1gztOpbiPqiS3QUeCWgiUuK1UsdtWzXGvVEVuBzUTxjrTTQKS1Sw3Rc2F-Z3nDlCX4ctVxflvzni2qvOC6luvqdrptVYbvPZqjXel
WuyF1XSvsZoEdaneDqm8eXKHHizf053lGzogi_QnwtSp_At1hL2h5rJxqg8bolqwbspgXL1HT8pX6FaZQzfKO-h6eSPNkmGSJVsBCUAc0ByIJffKpmS4bETygCLZgRTLLqRUJpEFwGLZmSyFsmWyDXlDBskYGYn_Ik-6m-U-_LU8g_fJs_ig_BEfgbQO8sfkSVwv64Hv8E75Fv5IzsNVcjxeJrvjUtgrRfID92nYS8_JFe58WeEuluvd1-QGt5E6iBOVIO2VR65WAdJZRZAkIBnyKVCeqgjprWxgO05Ri3GSmoCDysQBVedGql1uP_UAzlM1eKLi5EPVlu5R4-lZtZEGtM0u0Zp10klsrn6PFesP2GKvi6jwbhYbvUxxwMsRR70HRb2XJ37y8oXjF4gIv1hc6q8Wl_s7Rdj_STT8OxTbPykb1umkTMMn5Q1AH3xapuKzshfQE_8kr8eWuh5HqpFgVx721WjsqYewAgTITI3CFMobvl-nNgA1uEqtw-VqJV6q3sCvqSV4AfC8WopnqdfxU-o1XKjmA8_huSoWL1EfuDtVc9xAvUrHZ1UWNvQYYBrILwHz8Wm1AFgEfvd1XAfzVKdgTVQ8-UGlkh_VcML0TBKvd5JWeg9pp_eTDvoguRZI0QdIGpABDDjPIZKpj5Oh-izJ1R7N1UEgRHN0EzpQx9F03ZKm6gTaXcfTJH0pvVo3pgfVi2SXyidb1WCyRXUiDWMMeFVUezsp9Q5T2_uBGt4Z-pP-gZ7RdfQ7_Rmt01voUb2JHtbr6F49h36qh9NK3ZO-opvR63Qh2DiaxOnBJEankEjdknhaAEdxUL8JlOEouH9j9CLcWC_EsXDnJEDaCvxzht4J93A93L2UzNYRZIGOIZX6crJFJ5E9OoPU6lxgBDms88gR6OOoHkPO6dWEeueI53WnAe8JGuGVQVpBG8ZQIw6BL6l1N0NcdFrE4dOiFT4lwvikaAO0g7gmER8D6sQV-AiktcAH4iT4ohPuh_Bdw_fR8hO3sdzktpEfusmw51NkjTtA7navA1_aBXxpByAs68GvHXNDstb1wM9qqPfkTjdCbjv__RUyFl8lG-FbZSIeKDvhLDkYj5M1wAY8Vm6Cc7kZjwFyQc6RG_Ew-RHOkK_j7nIK7iCH4bbyVqAHDsuu-HIZxm1kHG7Q2VQ-j-PlbHwTxG83yz3APnyjrMV9gB4QxyXLb6FNyfl2H4gXabWYDywEXgOW0r-LFcBqul5UAuvoW6KKlol36HLIvyCW00JRSnPEJJotHqX3inyaJrIgnu5GW4ow3c2LyW4-BygCCoFpZC9_khzkBaSOP0HqIQ2JGaQxECueInFiOmkhpgKTQZ5ATvC7yX4-mGzn_cl6nkZW8I5kCW9NFvDGpJT7gEfm8Z9wMT-KS_hX-CX-JV7Et-FVfDOOE1W4i1iH08UGXCk8slvEEFs2Jo1lM9IOfOS1shNJlTeBX_yQTJT15HF5lhRIm86Q7enD8hnwp1voQLmfpsmTNEn-RMPyLG0sj1Iud9LPYMxbxUt0E8xXw5zVi15EyquJB0TIjiQK_GqMvAboQUKyD_R7J1kvniPVYh6pAt4DeY2YCRRCPp_UiDwCsTY5INJJg64FcLYXqFPACbxQHcOL1BG8TJ3Gy9U5QJBl4DuXqRiy8DxwBsAvLjjvD06ReuB7dZqcUGfAF6TRVjodyADuoAl6CI3TQ2msfpBeovOorx-iTI-ijv4zrVNJcM6b0wPKASxaq86SOtDToPMv_CZ8P--Ac3gMEI1Hco0f4gKP5Rw_AulEyDMxC5iLiXgeu6IU2-IVXMsX4k18Hl7BZ-J5_K-4gGfjBl13izg2Bt4yb4q7WJV4gNWIsWy9KIC3zlw2W3zCJov9bJw4xB4UdWyg2Msai7XAGraXz2WLeR4bw29gqbwRE_xTuoVNoatZNi1l3eg0dgkdxw6R_mwO-RN7EpgIPEwy2GhyJxtORrD7yTjgcZZDpgNzoOwjyO9nWaSODSY2TyWEJxPKryVNOIE34AqSz0_CPruG1vBx9FP-N1rLF9B6vpye4uWUiPU0ILbSsKijfeFd1jCuVLad9GQ7SArbSZKBJKAz-5wE2TLyHX2ClNNWQAIQR1bTS0kFbUoqaTNSBXxIm5OjtBMRLIPEsCEkjo0iV7Nikso2kN7sY9Kgu0Kk8cUij3cV00SiqBZhsVHEiR2iudgngiIkbdFWLuaG_CvfL_7E14sE_qqw-CSxkLUWJaypeJ5FAFKUMiKWMkN8zo7yk-wTHsVX8JZ8Fu_E83gyv5H35i14H36W9eabWBeexrrzPiDfxG7lg9gqvphV8uXsHb4K0krIf8BGg5aR0B7eeDyHc_5nLvg4rng-l3wL_5zt5FvZfr6FneKfMCG2gSW7WTpYNlRI_rDw-HTB-UviDFsqjsO-qIM373H2LuTXCco_ELH8PdGRN4z9HfoaLaUWS6XRvAdtwTvT1jyWtuMYUoNezn8gMGLi8VkEcxs3Ymdcn51yPXbCpey4a7Bj7gla7x6lA3A_molvpsNwHzoOX08fxSl0Gu5OpwMzgFdxMl0JnMPtYZUSaBKJpgMIoSNJLZlKNpHnyTJSRv5GqsidZDO5kuwkLvmabMO1BO5msgufJIdxBh1G8uhMUkubURf25yUsk8ayXBrHJtF4tpS2OM9bIK8B3qWt2C6ayOpoR3aKJrGTNJV9AFTQ3tCuD3uNprFFtC97hWYA_YABbAHwKs1ha-kxtpDZML-EH2SMm5zyRtzm7WFVevL9bCAfxj7ld7B9fCD7gQ-Gtc9mMcLhy0WArxFxfJNI4l-Ja_le4AjIR0QXflRcDSTyQ6I5lFNYsTNUiyP0HP-GHoJT0JWX0nigMZ9PPf4aPctcNpIxNgzIZDbLYOW0gg2njD8KJ3QiXcSm0llsFs1nr9NrGEQP7CP6I91N99Mj9FPqQAmBOeAwF4qVAUupgJYYxmzCOM_SBbSOvgqt59Ov6Ty6lxYC0-geOhl0PEF30Yl0B51Et4O8hRbQzfRJWgVtG_bLN2wyzMHf-CHgCHuS17Gp_Ds2HSjkx9hMoAjk2dBmMd_O3ubV7EO-DOZrKdvKF8DZeJlt5qVsE1AD8oe8QV9j_RL40iKaqAvoVXoixEoTaB_9KL0R5D9BWYaeSm_VMyF9habpVTRZr4e2W8APb6EtgSa6mjbWVeCH1wDLaIO-q1WY3aRuZEPVA-x-NYrlqUL2oCpl2aqM9VHbIfbfw4gSvF424vuAbUC1pHyu3MwelWUsT5awXPkMGyFnspFyKntYFrDH5GOsUI5nm-S97IDMZHVyEKuXA9hxmc6Oyd7siOzF9srrWQ3Iw2Qqy4J8hryO3SiTWG95NUuViSC3YvdLxfLlYfq8nEtflEV0qZxI41U0a7B5lqpkL6v17E21l7XUtmito0VYtxLxOknE6hQR0r2F1n0E1teLH1QHAfeM2K0csVkd5WWqkhepIj5CZfO71S08QyXx7upy3lrF8A6qK09Rd_A4XSba6XXiSr1VJOq9Ik4fE8dVY_mpai8r1LXyBXWDzFfp8lrVVyaoNNlM9ZZRqock6ippqEvlCenKDfJGsVp-zxfIecBcvlBO50tlIS-TT_G35ExeIYv4OvkCPyA_5sfkDn5W7uWOOsw52AjvEB4Daayq5fFqP_Alv0x9yhurj7ir1sB6LOKfyIn8TTmIPyMT-RwZBhJ4sWzOX5TN-HxggYzl62UXXiu7ge5ruVBXnh_jJLWOFcL8NczhTrjjdotl7GvxGtsHHvuIeJXVg_yDKGPnxIcsKGu4AHaJnefbNpXF7DI5myXIp1g7OY1dCXSShayrLGLXyTksTS5mN8uVLF2-y_pKl6fLPjxVTuWd5CbeWL54_vsa8QT_SDzOt4iJfDuwA-SdogBO_GbgEN8sUsRqMU-UiBNikrhJjheDZZ7IkkPFvTJD3COTxB2ygxgkE0WGbCXSgBQgLBvupp6iTPQTz4m7xUTxgSjkDX2dFGnipOghTotkcUZ0E-fEtcIALYbsCnQDksVPorv4Efo9K3pBuz6i4Zvh0hBj5Fc8X77LC4HFMlWslAXiffmB2CYdWSu7y3o5CBguD8lH
5FZZKCvlC3KFXCAXA3PlK3KifE6OkkWyi8ySLWU_2Vz2lk3ktZAmyAb923QtvFOO0y36FH1fB1mZDrN5-jr2hM5g-XoAe0j3Yw_qdJatewO92FCdAvRg9-hkoD2UxbNc3YiN0T60l2yy5mymJmwOvFOL9Wlaoj-iBTqHToI4bALEZhN1Kn0c3kQFugd9Ul9Hp-lkOkt3p3N0Cl2sR9A3dT5dpafRcv0sXQF-pFwvp2_r1bRGf0g_AR-yRW-lW_UXdJveC-ynDfaP1BtpHry7Rukv4V1XR7O0yTK0x24BbgJ6a8V6acF6asZSwLYUCN1SwL5UaHuL3kX76200U39Mh-oaOhzIBf6sN5zXu1o_xF7TU1mp_ht7SRewRfpB1lB2Qu9iyDvBhBfgludxw9P8rFZ8DbzJK3Ql8DbwFvAmqwE26ZVsp17L9ulqdlR_wr7T29gPoKNBTxRZ44TIRidM-rtXk2fdLiQXX00KcAcyBSeSQpxAZuF4II7MxLGQbwrljclk3IhMwjFkAvbIaEzISGySPHwGP4z34hdxGd6Ba3AB_NkZf49nuzapd1yS7jT01Z-E3dvINe69ZJw7lqx3i0gUXkYycSXoqyKLcQVpRBaRTDKDzCETyBKSCzd-CjlEwuQMCUI8cBIH6Dc4ku7EQfopyJswo5uxRbfhUyQA3zQnY0k3chW5hRzBg0gNvp2U4rvIeEgH4D4EuRmkuduPtHIb7Gj4--k-5zHPyw2cxSmkCbGBFtAfxKckh_yAp5C9eClZjzeSJRBtFGJCl-H3IPqYQBra7yDX8gh6A4fXPA_TATyRZkH6EESyIfEN6SV2kAFiI7lDvE7uFuNIf9GYXC3WYC3uxns5w8v4BncKb-kS7rnfMeLuB3Yx14W4za1mMe4iNtk9RIvcw7TS_emf_y9QsM1uiBm4K_sTzmPv4gp2Du9hScTiL5HWvMGeA-7X_Dv3C37W3cmjoJ9u-DTPwUHxKG4unsFhUY2TxWn8J2GTDBEHdoXJfSKR5Ir2ZCykE0UbMl30dEd6Hd0Cr9ap8V53bD_f6eCnO_f6jZyX_Ao7FCiwBwfutp8KzEOLIorRwog56JWIp9H8iOvsL_xUu8bvb5f5K-y93rv2u94X9niPOE28Ts7bOtfJ1GXOXlXnZKlaZ4hKcLfIdHeo3Oh6Yrdby79295-3_27aXw6i7WU7mida0htEHG0uEuhJmNs9vD3dxIdTzifQOD6DduPz6GC-kM4AZvLF9BngWV5Jt_ON9DTfRX1xFF4NLushYlh_kcTuFxNZsVjAVsLL52uB-HGIeMETciLTOZP9uCeH8FiZxa-Ud4IHHwSePJ1nyhSeA21yZRIfLa_mY2Ulq4XbwFPj2KUqk7VSKSxBdWJxKoHFqFgWVC5EDwaj6jRVgKfO0Ah1lgZVkIXVEO7pETxaP8Yv0UU8pMtB3s6b6pO8lQ6JTjpGdNGNxTW6ieiqm4oUHSt6AzeB3FdfIm7VQdFfM-As76lrebLeAVTzFD2F36LL2ST9NCvQeewxfRvLA685WHdi1-oOrL2-EiKGOPa1CrF9YEetYuwy7bKwNtgV-iRtrw_Tdno3vFw_gVfrKnixTqaHVCZdo7rSJ1Vb-mcVS28BblaNaSqQAnSBfHsVT1urRJqgrga6UpgLGla96RUqnSap26D9PfQelU1zVD6doibQ6WoyLVTT6VRVSCerp-gkYALID6mp0McUaJcD0c5QmKuBlIEOC_QZKoHaitAohWhj9ROJgxdzO6AT2PC0akKfAeaB_ALwkvLpfCUAQkvVFjJGVZFs9Sbpr6aTJmoc-UnmkSPAbjmCfCJHk0r5MHlDPkFK5BxSKF8h46VBNwiLrhcu_UAIWiU8-o6IhnwMlCfTAbIXzZZp9M8ynf5F9qUPy4H0EXk7_avMBPluOkZm0VHyHjoC0kGyYR837NUHzsP48PNwfozuFoodFWF2RhB-reS8m9S8J5AqFb9BCn6TJLD3bN5XmvwWeZLdIushWjwM6T5gO0QaBSxJ3sXayy6suayj50QNPSgW043icbpIjKKzRDZ9BHhY3AdnKIf-WQynuWIEMBoYQ0eISrpSbIcxNdiymxSIfXDuD5A54Lfmi2IyAObkeZlDFsp7yBLZj6yRN5ENMo1skTeSL2UGOS6HkxYwn13VFNJPFZGhag4ZrWaTSTDPs9QxPEYfwI_pnXiK3oCLdCWeqyfh1_R290e93rW891zkVbqmV-Ge0-XuKb3SrYe0Tq9yD-okXKYycIGajBPU9WSByCAzxVDwS-PII2IWGS8-AbnB3oY1a7CxAGiQq3Azbyk-oY_g1dog8_V8skItI6-qt8lLaj0pVZ-TRWox7O_XgaXwOiijYd0WIogebCJEHUX6BbZdv8G-hpv0gN7KDupvIK2HVPPvdAI_p0fydt4jvJOXz6_z_spv8PrzcV4fPt1L4XOAF7zufLnXk6_z0vk2L5Pv9f7Ma72J_LA3HdJCYBY_6L3Jd3qbeLW3k6_yvuKLvD18rreLF3g1fKi3ng_2_s4HeB_yW6BNmvcp7-19xlO9fNHamwI8Jdp4T4tEb47o4M0VnYHrgZ7eM-fpBW3GeBPFPO8RUeWNEZ6fJxL9bNHbzxQZfoYY6HcSmb4nsv0j_CH_C_6ov4lP8ct4qT-Pr_ALeJWfyzf597GIQHfWKBDDmgWO0djA32mzQAIt8RvT2f63JMt_k7T380id96-5_gc_nE9fwed0CcZeCfaAkFeKG3uv4njvCzzcO4DHe9_iad5B_Ky3Gy_xQs7a4Pe2jDxsx0bOc9oGh7si4ll3e2C6ezZw2vGCB51wcIdzU7DSmRJc4GwIljgHgrMcL9LDdwSy8Ha_Avfzt-BE3ybVHiOVnk8qvBiyxmtO1nn9CPGXkdv9AfSg_yA95U-jNLCIhgLrYTy7aWKglnYMnKRdAh5LCoRZp8DnLCZQxy4JnGaNAyaPDQieGAjw64G0gM_TId80QvLMiCDfGhHJWwWjeEXkJXxSVCz_Etgf1ZzXRcXzq6Iv492iG_OeQK_oIE-NVoDg10fXsXB0DWsUvZiJ6EnMiu7K6qPq6YGoD-lXUWHyZFQsmRwVBWkEmRJlk8KoH3BR1Je4NOoTvCBqPZ4fVYXnRb2DnwEKgdujPsfLI7_AcyNrcXLkD_h08BQ-HDyNDwTP4t3BTiQ_oj-ZGxhLwn7DPPQkMX4SaetfSXr4e3FGoABXRhThNRFz8cqIeXhJRAl-JSKRrPU7kDL_GrIA2hcDq_wE8nmgMekYUYrjop4DG-biZVFFeHXUZFwZ9QjQAi-KioHyANgmwV6BC4AeUR6-GghH3Y8fDQ7Dfw1m4zHBLJwbHIQfCmbg8cFOeEuwKW4dSfCEyLPuG5En3M8j691dwL7IQ2501AG3ZdRut3XUdjcxar0bH_Wii6Ny3J2RV7jlkSXOyMg5Tk7kDCcrcrKTEVng3ATcAPQGukY-AWRD3QBnYuQtTmHkzU5RZKozJzLZmRvZBWjrzIoUzhORdfbDkV_buZFf2rcDSZFVdnbkQrso8lX76cgF9ixgNjAncp5dGllkL4osAB62X4kcAG062-MjG9tDI037hshj6OrIA6hZ5FeIRO5CR4NbUUVwE3opWIWmBxehocHJKDn4CGofHIvaAi2Df0GXBsehRsFJiAfP2Wd81znqd3DW-PXON94Pzl7vpLPHO-3s9s46uzzkbvd8d6N3iVvjEfegt9O53K920v19zjX-Oael77sBf5mb7e1xO3kUR3nxGHlX4TO6CH8MZ3CjXoA369fwTjiXR4HjQP35M1rgZngF7k3eVDfda5BPwquGsK06xHbpFmyvTmTHdGd2Fl5Zwkthbb1kdo3XmfX0EtnNXgvW34tlcV4TFuHFMDjk7Ef4tl7_SL_T-2id_pweh5fLWb2OIm8FjfAW0JZeKW0DXOm9QDt7L9FkKLvJW0oHeavpPV41zfG20QdA112eYCM9l43xaukT3hb6pLeKTvRK6EhvOs30JtE0byK9DtKrvGk0BsrP6HL6ja6iO-FVtl03jGEQ3eI9Qjd4xZCW0X3eu9Tw19FYfw1N9hfSgX4hzfFz6Qi_L6Sd6e3-5TTV
j6NJQBgI-a0p8dvTE15X-q2XSr_wGvTdRn_w7qaHvfvpQW8k3euNA71P0P1gw2Ho5wyMS_sLaLxfSjv5z9Ke_lR6kz-Opvv30Bv8waA_g3b3U2kHP4W28XvSOOASP40Kv0FvOhnip4OPuoXc4TfIs9CZwFygGJ0NlCAjohRRQEZMQUMjhqPVEX2QDDZFg4MBdH-QoNygDfxo3R88Zg0KvmCtjSi23oiYZ5VGlFrPRLxuFUZMQz8GZoCuBr3jUHZwAsoJFqMngq-j-cFyVB1chQ4HVyIj8g0UiFyCgpGlKCryeaAY5GegbA5SkU8jHjkYTQsORJOCA9A4SEcG7wQ9d4G-e9G9wVGwxxt077TuinZRRRRGq6IIWgxpSZSDiqPOWkVRJ6wZUfVAnTUzqhby31qzo760lkV9ZFVHLbDqosZZgehXzVXRJWZV9BxzQ_QA85pQqtk_1MF8IGSbhaGfjKdCp42i0EngO2N2qBY4YDwd2vv_2rsXsCjq_X_gu6zsZb63nZndmXWXy5qX2N2ZwQunyEzxkllah9KM1IrKzJIULykZ5g3TEhWV1JLUipCMY6ZoqHgn5ZApGaWZKRmplaklFcdM_5_xdzh_M1FAKDV7nvfz_c53Zz4z853ZneHxeXoZZrpKDdMgL7j2G8a7vjY863Iab3G1MZpc8cbN8jjjRDnd-IA8y3g3tLfJqcZ2MHaTPM9okvON26S9xrlSuXGUZA5KkEKC7oFj3Of4KWgv5AvHz0F7zqQiaJfjRNAnjpNBOxyngrY7HKZljlDTIkcziGZ623GDKdfR2VTsmGrqCfP1qPNVU3-YxyedS00DnRtNg5wlpiHOfaYkZ5lpHPxOzIRsgv6Pzl2mcGm9qavUz_St1Nd0SOpicskxJkW-ydRObmmKlf2mwXIT04tyuGm2fCrogHw46IS8PyjItTvI7CoOsroKg2yudUEW10pYzgsyupYHVcgrgo7K-nUoNnwrlxi-lg8biuSecO6PGjvL_Y0d5MHGtmfOv5-xj3yXMVn2GzfJjY2fymHGb2TeeEqGP4NdJw1WmFfO9ZnB5tpqMLg-MJySiwwnIMflrYYjZ2qnG6Jc6YYWrvkGxZVtuN61xNDUtQyyCvprIPkGFfrNXXmGVvB5G9cCQzvXq4b2rpcNHV2zoE03xLhmwNh0Q1tob4bc6NJrRsM1vNkw1tUWEmMY5-pkSHF1MUxydTZMhv5UV3tDGoxPd7WBa97aMMXVwjDRFWWYcGa7QuM-udi4S_7UWCrvMpZB-538sfEHeZuxXC4y_ixvhrwP_QLjj5AyWP5S1rfJMq8Xss3rhLfMa4VF0M8xF0A2QwqFTHOxkGHeKcwz7xBeO7O8QdDXfz74TXjWZMLzJxOeQ1nO1OBVkA3OMdA-F5znHBu82JkSvMiprzfdcqfnE0s3T5nlVs8xS7RniyXC47aYPaKlgQdbTJ6fzL-5vzKXuzeZ97qXm3e4F5nXuV82v-Tua97X8D_BQ1wFwfnywODhUv_gLpAY6cngaCkhuIWUGKxIE4LdUnpwA2le8GHnouCPnSuC1zvzYf-bglc4dwQvdx4Mzne6zJ86u5h_dL5ujpLeNXeQ1pq7S4Xmx-AZ-7l02FwmHTUfkn42fyP9Bm2w5St4ju-VHJbPJcmyWwq37JJaWnZKwy2HpBmW41KOpYG8yoLk9yHbob_L8ov0veVD6Sd4FzBYV0oh1hVSN-s6qci6R_rMul8qs34nfW_9RfrRapZvsN3mjrY95u5g2-Bubytxt7F95W5uO-r22n5xz7FGeKZbA57x1haeZGuUZ6T1Rk-SNRratrAc4xllvdUzxnqbZ6q1m2cWJAPitDXxhNu8nhtsbk80pBOkqy3ccw-M97RpHvjthYyArPD0sz0Y-owtPize9mF4H9s33gdsFd5422lvoq1ho-G2Fo3G2B5rNMH2SqNNtorGeips85sKXEKzFtxN1_fkgiMSuIERKVxxRCLKCaSgfYEMxCvZSFHyUHulAN2rlKGnFQW_qUThHOUGvFy5EedD1sDyBzD-udIAK-oJ1FEtR3dDuqsHUArkBfUQmqYeRunqUTQbxueoFdCeguUgPF1NwquVkXiFkoKzlVS8QEnHGcpCPFvJh2zDc5VdOFPZg5dAu14ZjPPURLwGslEdggvVYXirOgJvU0fjYnUc3q52JClqL5KkJpLH1bGkh5pG2qrzSXc1mzyp5pBx6jxCtLkkREsnPm0SidJc5CnNToZpmIzQEHkO2hRYnqg5yCRNgkwgj2oLSB9tLYnTdpEe2jFym2akURqjHs1ORY1SrHHUogXRYK2MYG03pJhYtSJi1ArJf9QtZI-6mXyovk_WqgVkAWQy5Gm1kNyhlpBwtYyUKxY6X-HoHIXRNMVOpykeOl7x0WeV1nS4cjPEwOIVL7tPace6KN1YrNKT9VF6syeUPuwZaN9V4tgHSiw7qNzEZFVhiiqyjuondIxaSNPVzXSOWkBfUX-gE1UrS1ZdbJAaw7qpg5hHHcGuU5OYXx3OWsHYbDWKZcH2uWoQO6SW0xNqDm2nLaC3ad-SmXBOs7WNZI6WC0klc7VEMl-LI9naXSRH60IWa36yFuZsm2YhuzUDKdVO4K-14_g77TA-pn2Gf9UKsCnyKeyOTENxkcPQw5H9UL_I3uipyE5odGRz9EJkCEqNtKLJkce5SZFHuAmR33LjIg9woyLLuKTIr7hhkXu5fpF7uO6Rn3OdoB8deZBrDutERpZzgUiKmkR2RY7Iu_F2rS8u0pJwgfYs3qgl4w3aaLxem4hXaql4qTYFL9HScKY2CS_QnoekQEbhedoAPF-LxVnanXihdj2sU8EZIg9zxsj93GltN1ehlXCHtSwuoL3JuaDlNfi7RnuXs2gruWBtG9dA-xranzirFoywFoKIFoVsWjd0Wu2F_qMmoXI1DX2vLkBfqq-jz9X5qFidhf6tTkaFaj9UpDZBH6oS2qZa0Xb1JLddPcJtU_dxReoObqP6b-49tYBbqC7jwiAONY-zq-sh2zmnWsK51N1cQ7UUUgb9AzB2CD77lrOp33AN1EIuT1nETVHmcWOUsVwfJYGLUuI5q3If93ngJk4J-LhSv54Ibq-_GbfD7-Sm-x1cmv9j225fvu1V31LbKF-q7XREvG1sxBvWvGb3Ww819VlvbxpqDWkaYnU39VidTV1WS9ODlnZNSiyHGudb-jVeZolq_I4FNc6yLLku0zLuuixLj-uyLU2uW2ypaLTSktmoxPKSt8xyp_c7i8t72FIWvt-yOLzUkgmZHv6lZVL4V5aU8AOW0eFHLEnhxyDllmfCf7Ekh5-AMYN1UngD65Rwq3V6OGedGe44kxmQtHCndSq0qeGvW8aHvWye6JllTvKkmXt7ppjbeKaaQz0z4Lmz3Mw8hWan57TZ5xkDzyj9WZVMh5FUOpy8TJNJJn2e5NB0soG-T_bQ4-Q_1Etl1o26WCzkbupm99BQ9hANYf2pgw2iZjaErqcjaB5Nork0mS6n42g-nUQLaBrdQufQzXQBfP4WXUpX00y6labQwzSRVtBe9CTtCgmj5RTTI_Qk-Qr2VkIPk_W0kLShBaQlXUMiaD5kFbme5kGWQz-X-OkyokA06MfQ90h3upYMpjvIB7SEfEaLSRndQr6nK8lxmkpO0VHEwBIg8eRX2osco_eRvTSO7CZx5CPSixSReLKe9CX5JAHyDFlH5pEtZC3ZSLaRNWQPWUZ-IhmkAZ1CHDSFNIZqUTSJxMF86XPWhDyFm5BJ2Etexy6Sj62kBNoE3JA8gUNIPxxKHoXP4nEjaBuTx7G-voFEkt-wQozET_T-EbyQHMVZ5Bh-hZzAQ8kpnEAakCcIJv2JAEcVTpKIjzxPmpN00opkkY4kmHUmTnYHCWF3ES-cV4D1J63ZY-QO9hDpwx4gj7MHyRCWSJazIaQA2mL4fDfrTUrZr7iClUP24nJWivexA3gHO4Y3w9g6dhLnMAPJYKfwDOhPZSdwGnw2iy3Gn7N0_ANLxqdZIm5gj8XEHoORvTU2Q06wtvgzFoOLWCe8mnWGGl3wq-yf-EXWCyezJ_BQNgoPYql4IFuEB7A8_CTkYciD7Cnckw3A
97J--J-Qbqw_7sKexJ1ZAu4I--nARuP2LBe3YRtxNNt65l-lNbYbR7A92AvH3xDiZMXYyopwBS3Ch-j3eNmZucyGfjY-QhfC-Gvw-RzsgP274fjdbD86Rdeio3Qr2k-LUSn9Au2hh9FH1IDXUjvOpCF4In0KLyBD8MtkBJ5FUvAMMhlPJrPxs-QXHIv12i-hxmQB8pIcaHPR9aQY3Ui2oXaQjqQA3UVWoJ5kIepFXoE2HcWSNNSFpMI6qag5mYYCRN_-Hc5Pl3DX03chuVwTupy7juZxXrqSC6VrORddz0l0IyfSQg7TrRxHt3FWWsyZ6RHue2JDH5POKI10QakkDo0jD6DnSH-UTJLQSDIFjYb9joX9j4Nj0_8VdwzZB5-fhFbGE0lLPJ1E45dIDJxjJ5wJySEd8WLIEtIabyMCvgvmoQc8yntRjONpMB5AT6JE-iPkMBpED6EBdAfqRTeie-gqFEsXoNvp19yNdBekiIum-dwNdAX3Dzi3SPoOJIdTqH6uRVwcrBNHD0IeQfG0P3qYJqDH6FA0kA5DSXQgSqHd0GLaAa2lN6INVEHv0xCUD-ebATWTYG6G0sVc_Jk6GSiZvoGepm-joXAMQ-gmNIwWomdoCZpId6E0yCvQfwOucTadhFbTcSiPjkS5NAm9C1kMWQTJos_AOmPRnDP1tqL-cG8MYD-joYzDzzEHnsg8eCYLxfMh_2IheDlzwf0twPeEw2thvVWsDOWzT1ABK0QlrADtYxvRN9CWsw_QKVaMGth3Irt9F3Lai1GofRNqYs9FzezZ0PZAR9md6ACLQVtYNNRQ0Ur2CbeZFXMFbDO3iW3iNrD13DqWz-Wz1dwqtop7D7KMreFyYPxtVsRlsVJuPvuOy2ChKI3lwnHrx5-NkmAf4-xrUJp9PXrdvgqtsP8LbbZnoq32DFRsn4h22JPRh_ahqMCegPLsA9Ai-0CUbh-BUuzPoVH2FDTSPgsNt-t1vOhhXkE9-Sh0D38LiuW7QNsD9eL7oL78Q2gI5Bn-QTQKMoa_F82Ezxfw7VEWH42y-WaQUJTJS2guz6M03o5SeCcazOs1m6Gb-OaoFazXnL8dcjekN7qBfxJ14EegHvxo1I8fi0byo2C7RKjXB-XxndD7vB8V8QwV8L9yy_njXA5_jJvHH-Fm8D9y4_kT3FN8MBybA3U5U78d2iLFoHlSW9TKEYNaQpo7OkLikMOZgCY4h6NVzknoZ2c6Ouacg76BlMJ4M0dftFzsgzqJsahEaI_6CjGolXAvul1IJB84t5Lu0g7yMCRB2kqGS2vJc9ID5DWpDXlbUsgSKQKyC_9bWoY_lSbjA1JfXC7FYIvsxZL8M4qUD6J_yJ-jKPkj5JeLUEN5AZogpaMR0gtosJSGMiBvSjPQ29IipMlvotZyBuooJ6OucgLqJveFxEM_DnWWY9Et8p2opRyDSuAcP5T0c-2Dn-OfwE_zY3ACn4X78ltxf_4YTub9JIfPpE-KMczheJi1dExg3Rw57BHHJ2yoI86e7njCnuEYYs90DLO_60i0b3B0t1c4StksZy7b7FTYnZKNDZCO0yTpK5osrabPSxl0spRKU6Ux9EUpkaZIfemzUh86ULqR-qUjJNf5Omnv7Em2OQi53_E9buLYizlHMT4q5uB_iSl4oDgTXSdMQSHCi0gQJiIiTEJmYRo6yb-KjvH6OWSjacKbaLKQiV4QslCKkI3GQsYJi9B4IQeWc9FsyMuCvt5ecoNQSqIgLYX9pIXgYEuFFixf6MTWCfGsUEhknwhJ7CDktNCb7RbjWKl4NysT72AHxI7sK7EV-1g8RVPFSdQq_pNuhno3nql5EJ0UNqFcYQXKEHahjYIBnxDCcZjYGncSh5LWzrdJmtNBm0sO2kqS6A2Si0ZDbpZCaAepKe0tNaOPSU1oohQG8-aiIyVMh0pmOkj6lPikbSRMmkRWO2dh0dEL54oVyC2WI7uo73MRTWmYRac2zKTTG86hmQ2T6PqG11Gzew9p4c4lndzTSKy7Lenr_g4nur_Gg92lkN3Qz4d2ObT98WPue_Aj7k44zh2N73I3xze5Y9BWuTVaLd-M3oG8JndAs-TbUKrcA42XH0bJ8mA0Up6IkuS50If5lVegyfIaNFM-gjbJx9FmuQJtkU9BTPh92Yw3yla8RkZ4KSQH-nPlYDwQ8oCM8T2ygG-Fe_0W-Vbsl_2kGL4T_xeNbJeaQ2LIVqkbLPcku6WHyHfSkwTLQ0kTeThR5WTSSp5IWsvp5CY5k7SQy8hvUjn5QfqNHIa5-04KpUel6-gxKZIellrSb6W76Jdw3-2X4mmZ9Ah81o8ieTH9R8OltGvDJTQektBQn8888oa0mSyE7-vb0k6ySiqG4yggpdIKqJtFfpFeIxVSBrSzyE_SDHJcmkIOSuPIRmk8yZcmkDy4Vstg7B1pLtTIhlp6vWK69sz_G_NHyrkraA93d2YL6cOiQ55gc0KeZIUhySw1bAybGZbCZodNYhlhU9iYsGmsK6Q95BZIa0g0pHlYGrs3tIC9EHqMbQiNsUeFdbV3Cetu7x4WZ48Pe9Q-LGyAfUpYsj0vLNeeGO7gM70Kf9rbhu_d6A4-r1EKX9g4lXc0eYmPb7KTz2i6i1_QtIxf17Sc39vULPzaNEQIbaYK7Zu1Fh5v1l6Y1qyzkN-sh3Cy2RCh__XpwkfX5wk3RxQLqRG7hNyIUmFvxDHhcd8xIcn3nTDBVypM8RULab4XhTm-R4XXfA4h12cQ3vP9wC_zHeIX-sr4dN9O_qOISbxwfT9-YrO2_Mmmdn5Y07fsw5oMtZc37sa8jXrS4PAe9NewnvSHsN50d9h9dEtYN7oirICEhL1BfgpNIPNDe-El7jic6b4fv-rug2e7H8HT4T6e6k7Eqe6RkKnQL8fp7jgy0f0Ceda9gjzuLiN3uxlt6V5ElzdcTpc0XA_5N81tqF-XcdYY74vW9t4Z1s7eOdY7vYusj3rzrM96N1ine9-3Zno3WbOg_5Y337oYxt_x5kLehSy2_su7wLrQ-4p1vneyNdU7xjrcO9z6kHeYNQ4SC_3bvc9YO3lHQ319Hw2FngFViA0kCB0DJYIS2CNEBPYLjQKlggx9HsZwYKtgDWwSLIEcwRboD-NeoXnADRGEyACGbcywjUEIC5zkHYFTvDXQQDjl54Rf_I2Eg_4YYaf_fqHYP1PY4l8kFPg_hNYqbveHijv8EWKxXxPf9zcX34Hk-CPFt6DN9keJU_2txPHQT4J1-vk94n1-m9jFXy7c7C8VIv3bBZ__LaGRP0Vo7B8sNPP3EZrD_uL8v_F9_Mf53v7DfA__Ib6L_wDvgWDom_zf8hW-Y_xx30n-kC9LeNe3SFjiWyy841sqLPatgKyDFMJyA7HQR8UinwRtiLjeFya-B1kM_XSfIub6bhJ3-m4Vbf6uYqg_Vmzhf1rc5X9ObBAYJzYPjBF7B0aIEwLDxBkBVfyH4hAfUH4QRip7hIlKoZCqvCLMUJIgduEF5Ud-jHKAT1L28YOUXXxfZSd_n_IJfyv0b1BO8Hkwl0sDRiEnYBEWBqzCmzDPbwRcQkagqTA70FKYEWgnTAvkCqMDR4RRAZ-YEogSJwZiILfC_u8Qxwf-KY4OxIrJkBHQHxzoJiYEuohPBBTxwQATewaOCd0DO4QegZ5CfIAKiQEEsQqD4DoOgOsXD9e0DyzfH9DvjzHCXf7XhG7-DUIPf7HQy79PeMx_Qkj2_yaM9xvEaf4jwhz_IeFl_0ZIhpDhHyG85peF1X47xCqs9AcJK-DavOs_yef4f-UzoU33n-bTYHwyXLcUfyeod5cQ738YrqG-ryBSqFjJRoWSNYqDrFJCSZ7SjLynRJOVShsYa0sKlA6kRPGS21WBPKSewInqFzhZ3YifU9dBm49HqHl4MOQp9RT-UNHrpZNsZRZZqLwCyYD-ayRHySSLIUsgeco8sk2ZTb5RZpBgNY2IEC_kFvVF0k59HjKexKiDSEf1cdJe7QvjD5HWkJZqPGmsjiFrlRSooe8jR1weWCSuCfQX45SHxASlg_iGcouYrUSLOQoWNylfCCXKYuFLZZRwSBkmHFAShTLlKeErpZ_wudJX2Kk8
InykPCpsh_5WJUHYoowUCpRMYYNSJOQqR4WFUCNN8YnPKDHi_UqcGK30F0VljpgTyBLnBvR9Gw2n4b9FwjmOlPEivNMFec9L1T2NF6cpLuBb1hvuWc-2Z3Vcz_pjPS-ueP7ezqhz0_M8apvpDxjIlaF9Vk_srLzRL0x2GqsEO2uu5JjOFTtN53Vmqgt2Vt_rPP-1NV4CwVRnimfNzc6qyE7TH4wY47maWXXO51KhTmOVNlINZc76gzlNQbWCOas5E0bThUWfi__Omky_-6ZUD-c0nv8IjbV2OS_43TDVn9l5ERnvvCdqrA7LeUFRr2YsZ1CNXM6qWF3j-VjOGt-Mxqof5sZq_aqYLvId-G_FyhvHeOH3sKpEsSpAzuq8YFzkp_RP0jyNF6XCjLU3NC_CUNbQsDSd55WlCpjzErVMYy2Ez_-9PBiDqqdrGs-5kUzGc2xNk_G8amCVV-0iuKapBjeG6fwi6jm05u-eClVd2Zrhmpdg412yO1ltdfLCqF7t3zL-Ugz0rLOp5ttV9XXN2vGatdQ1zz4JY1VP1Au96pqqem2rvD5__EU01c7WPPsMz_9VOg-uaawdrVkTWfOCf9FUOXjO88L0x5_mi2ibQVX_dVPzO9JUW1jdWMVj1lg7ErNOOE5jlXeqsTpfBlPVL0OV7z9ZEboLo_swuhOjezG6EaOP6a6j7jfqjqPuOequo-47_p_zuP6M-1jpw9TEkznbF2nOvm1wpbky10yZmpky-vU-yVabzrZk9OVzXYi1deDK1Icpc82Tufw9mWuWzNVvyei_F_Xhxug1r7kxV74bc7l6L_q9VRvHRjdwQv9r4FyzYi5vK0a_PpVGxBJb6Z_mROTaDl4zaq4ZNdeMmjowavTvb23MFX2bSg_lz7JXKk2TK8Fe-avMFX2_V5O3UunHVNdc0derC3NFr3Glmiv6cV-t3op-XvXlreh1S2todHjZod85HQ-yYb-zOlLYG7_zOpZe81yuGs9Fv1cqnZT6MlgqrZT6MFguF3el0oCpC_9Er1Eb_0Tfpq58jh_t9muWSj1bKiHMccZTuVQHRd9-Kz1k2fI38FD087zSLRT9-C_VQdG3v1QHRd--PhwUvWZ1HRR9vdo4IJv_5n6KPmdnOyZ1YaLUxkHRt6kPB0WvWVcGSqWncq4h8shVYKNU_NdGqU8HRa_9d3VQ9PP-qyyNtbZcW55tY70YLJebvxLDfX9VGSz6PVPXDoper64dFL2e7qBcSQaKfrzXDJRLN1D0OayJgaKve6kGir79n2mg6PuqjYGib1PfBope_0o2UPRjry__RK97Pv9EH7tU_0Tf_s90T_R9XQ7uiX4MNfVN9PWxpcsfrJFka_j_90as7f8yA0U_tivdOtGP_xFb_N_eyXjEFnvNfLlKzBf9fq60RS4X5-Sv8DrS_yKv43xWR01dlA61dFH6oKFnbJTzWQsHGmh_mbfwZ1sLtfFQ9PnRTZQmwV846sNFOdsDaWAtqXcT5HL2QPT782KGypXqyHDWKdW2ZPQ5ONsE0fuVrsaVboOc7XnUlQ9SHx5IpTNytgmi9-vLBNHr1qcJotduY4r6nWlRG8_CZCqRqrJFfgmaUSe-yN_BFtGvRX14IJXOSH2YIHrN2pog-na1MUH0bWpqgujrV9cE0der2hOY_T9PII4srIYlcPSMJXAxR-BcQ-BCfkBN3ICq7IA4_Mb__IDOOLtWhkBt_IAx5xgCf40f8MUf_ICL2wGOK94OyIUUXPNuqu3dvGhVqzRvkq0drmD3puiqdG86kGe1WDL8qvFvamLg6M-ray5IzV0Qfc5q6oLo65_tguj9ay5I3bgg-jzWpwmi175UE0Tfvj4NjsvFGtHPsa4sEL1OXTogla7IlW6B6MdfVxaIXqc-LBC9ZqXZUZ8myN_FAtHP80o3QCodk-o6IPp69eGA6DX_bAdE3199uxhvXUbOSCFaUO_WyIP_tUbq2gHR611NdkZ9miZneybVtUz28bn_80wq-LJqmyb6NTnb6qhPD-TvZlr8fb2Td2rknej3xZ9pf-j7qmv7Q6_3Z9gf-j7-SvtD37fx_wEMu2Ly';

	Snw.Art.Drawings.P3 = Global._get( "___bw3_snw_p3" );
	trace(10);
	Snw.Art.Drawings.P4 = Snw.Art.Drawings.unpack(  Global._get( "___bw3_snw_p4" ) );
trace(20);
	Snw.Art.Procedural = {};

	/* Snw.Art.Procedural.Cone < DynamicLayerSourceProvider
	 *
	 * startTime
	 * duration
	 * radius
	 * depth
	 * steps
	 * color
	 */
	Snw.Art.Procedural.Cone = function( params )
	{
	  var canvas = Sprite();

	  var angle = Math.PI / params.steps + 0.05;
	  var sideLength = Math.sin( angle ) * params.radius;
	  var height = Math.sqrt( params.radius * params.radius + params.depth * params.depth );
	  var triangles = [];

	  for ( var i = params.steps; i --; )
	  {
		var shp = Shape();
		shp.graphics.beginGradientFill( "linear", [ 0x000000, 0xFFFFFF ], [ 1, 1 ], [ 0, 255 ], $.createGradientBox( sideLength * 2, height, Math.PI * 3 / 2, 0, -height ) );
		shp.graphics.lineTo( sideLength, -height );
		shp.graphics.lineTo( -sideLength, -height );
		shp.graphics.lineTo( 0, 0 );
		shp.graphics.endFill();
		shp.rotationX = Math.atan( params.depth / params.radius ) * 180 / Math.PI;
		shp.rotationZ = 360 * i / params.steps;
		canvas.addChild( shp );

		triangles.push( shp );
	  }

	  return
	  {
		startTime : params.startTime,
		duration : params.duration,
		canvas : canvas,
		
		update : function( time )
		{
		  // Apply colors
		  if ( params.color )
		  {
			// one function for all faces
			for ( var f = 0; f < params.steps; f ++ )
			{
			  var face = triangles[ 0 + f ];
			  face.transform.colorTransform = params.color.apply( this, [ f, time ] );
			}
		  }
		},
		
		clone : function()
		{
		  return Snw.Art.Procedural.Cone( Akari.Utilities.Factory.clone( params ) );
		}
	  };
	};

	/* Snw.Art.Procedural.Ring < DynamicLayerSourceProvider
	 *
	 * startTime
	 * duration
	 * color
	 * maxWidth
	 * maxRadius
	 */
	Snw.Art.Procedural.Ring = function( params )
	{
	  var canvas = Akari.Display.Shape();
	  
	  return
	  {
		startTime : params.startTime,
		duration : params.duration,
		canvas : canvas,
		
		update : function( time )
		{
		  if ( time < params.startTime || time >= params.startTime + params.duration )
		  {
			return;
		  }

		  canvas.graphics.clear();
		  
		  var radius = Interpolation.linear( ( time - params.startTime ) / params.duration, 0, params.maxRadius );
		  var width = Interpolation.linear( ( time - params.startTime ) / params.duration, params.maxWidth, 0 );
		  var innerRadius = radius - width;

		  canvas.graphics.beginFill( params.color );
		  canvas.graphics.drawCircle( 0, 0, radius );

		  if ( innerRadius > 0 )
		  {
			canvas.graphics.drawCircle( 0, 0, innerRadius );
		  }

		  canvas.graphics.endFill();
		},
		
		clone : function()
		{
		  return Snw.Art.Procedural.Ring( Akari.Utilities.Factory.clone( params ) );
		}
	  };
	};

	/* Snw.Art.Procedural.Deltoidalicositetrahedron < DynamicLayerSourceProvider
	 * A Deltoidal icositetrahedron (3D layer with color control)
	 * kiteId: Front 0 - 3 Left 4 - 7 Rear 8 - 11 Right 12 - 15 Top 16 - 19 Bottom 20 - 23
	 *
	 * size
	 * startTime
	 * duration
	 * color
	 */
	Snw.Art.Procedural.Deltoidalicositetrahedron = function()
	{
	  // pre-computed constants
	  var kiteP1X = 1.082392200292394;
	  var kiteP2X = 0.9597891380483351;
	  var kiteP2Y = 0.8281600175382431;
	  var kiteP3X = 0.15851266778110729;
	  var kiteP3Y = 1.0707224707676246;

	  var diherealAngle = 138.11795905551233;
	  var rotToYAxis = 20.91292126650203;
	  var v4Radius = 1.4142135623730950488;

	  // functions for stuff
	  var kite = function( size )
	  {
		var shp = Shape();

		shp.graphics.beginFill( 0xFFFFFF );
		//shp.graphics.lineStyle( 4, 0xFF0000 );
		shp.graphics.lineTo( kiteP1X * size, 0 );
		shp.graphics.lineTo( kiteP2X * size, kiteP2Y * size );
		shp.graphics.lineTo( kiteP3X * size, kiteP3Y * size );
		shp.graphics.lineTo( 0, 0 );
		shp.graphics.endFill();

		return shp;
	  };

	  var faceAt = function( faceId, x, y, z, rx, ry, rz, size, cont )
	  {
		var kite1 = kite( size );
		cont.register( kite1, { sortOffsetX : kite1.width / 2, sortOffsetY : kite1.height / 2, kiteId : faceId * 4 } );
		kite1.x = x;
		kite1.y = y;
		kite1.z = z;
		kite1.rotationZ = rz;
		kite1.rotationX = 90 - diherealAngle / 2;
		kite1.rotationY = ry - rotToYAxis;

		var kite2 = kite( size );
		cont.register( kite2, { sortOffsetX : kite2.width / 2, sortOffsetY : kite2.height / 2, kiteId : faceId * 4 + 1 } );
		kite2.x = x;
		kite2.y = y;
		kite2.z = z;
		kite2.rotationZ = rz;
		kite2.rotationX = kite1.rotationX + diherealAngle;
		kite2.rotationY = ry - rotToYAxis;

		var kite3 = kite( size );
		cont.register( kite3, { sortOffsetX : kite3.width / 2, sortOffsetY : kite3.height / 2, kiteId : faceId * 4 + 2 } );
		kite3.x = x;
		kite3.y = y;
		kite3.z = z;
		kite3.rotationZ = rz;
		kite3.rotationX = diherealAngle / 2 - 90;
		kite3.rotationY = ry - rotToYAxis - diherealAngle;

		var kite4 = kite( size );
		cont.register( kite4, { sortOffsetX : kite4.width / 2, sortOffsetY : kite4.height / 2, kiteId : faceId * 4 + 3 } );
		kite4.x = x;
		kite4.y = y;
		kite4.z = z;
		kite4.rotationZ = rz;
		kite4.rotationX = kite3.rotationX - diherealAngle;
		kite4.rotationY = ry - rotToYAxis - diherealAngle;
		
	  };

	  return function( params )
	  {
		var cont = Akari.Display.Three.ThreeContainer();

		faceAt( 0, 0, 0, - v4Radius * params.size, 0, 0, 0, params.size, cont );
		faceAt( 1, - v4Radius * params.size, 0, 0, 0, 90, 0, params.size, cont );
		faceAt( 2, 0, 0, v4Radius * params.size, 0, 180, 0, params.size, cont );
		faceAt( 3, v4Radius * params.size, 0, 0, 0, 270, 0, params.size, cont );
		faceAt( 4, 0, - v4Radius * params.size, 0, 0, 90, 90, params.size, cont );
		faceAt( 5, 0, v4Radius * params.size, 0, 0, 270, 90, params.size, cont );

		var color = params.color;

		return
		{
		  startTime : params.startTime,
		  duration : params.duration,
		  canvas : cont.canvas,
		  
		  update : function( time )
		  {
			// Sort faces
			cont.update( time );

			// Apply colors
			if ( color )
			{
			  // one function for all faces
			  for ( var f = 0; f < 24; f ++ )
			  {
				var face = cont.canvas.getChildAt( f );
				face.transform.colorTransform = $.createColorTransform.apply( null, color.apply( this, [ f, cont.getRelatedData( face ), time ] ) );
			  }
			}
		  },
		  
		  clone : function()
		  {
			return Snw.Art.Procedural.Deltoidalicositetrahedron( Akari.Utilities.Factory.clone( params ) );
		  }
		};
	  };
	}();




	Snw.Part1 = {};

	Snw.Part1.MasterComp = function()
	{
	  // rng
	  var rand = Akari.Utilities.Randomizer.createTwister( 114514 );

	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 0,
		duration : 13574,

		layers :
		[
		  // S.1
		  Layer(
		  {
			inPoint : 0,
			outPoint : 13174,

			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF })
		  }),
		  DynamicSourceLayer(
		  {
			inPoint : 0,
			outPoint : 13174,

			provider : Akari.Display.Three.ThreeComposition(
			{
			  width : 1280,
			  height : 720,

			  startTime : 0,
			  duration : 13174,

			  cameras :
			  [
				Akari.Display.Three.Camera(
				{
				  inPoint : 0,
				  outPoint : 13174,
				  position : function( t )
				  {
					return [ 0, Interpolation.linear( t / 13174, -360, -1440 ), -750 ];
				  },
				  target : function( t )
				  {
					return [ 0, Interpolation.linear( t / 13174, -360, -1440 ), 0 ];
				  }
				})
			  ],

			  layers :
			  [
				Layer(
				{
				  source : Snw.Art.Drawings.unpack( Snw.Art.Drawings.P1 ),
				  inPoint : 0,
				  outPoint : 13174,
				  properties :
				  {
					x : -93 * 4,
					y : -1440 - 204 * 4,
					z : 10,
					scaleX : 4,
					scaleY : 4
				  }
				}),
				DynamicSourceLayer(
				{
				  provider : Snw.Art.Procedural.Deltoidalicositetrahedron(
					{
					  startTime : 0,
					  duration : 13174,
					  size : 200,

					  color : function( f, data, t )
					  {
						// A pseudo-shading effect
						var lm = f / 24;

						return [
						  Interpolation.cubic.easeInOut( lm, 0.0, 0.7 ),
						  Interpolation.cubic.easeInOut( lm, 0.0, 0.8 ),
						  Interpolation.cubic.easeOut( lm, 0, 1 ),
						  Interpolation.cubic.easeIn( lm, 1, 0.1 )
						];
					  }
					}),

				  inPoint : 0,
				  outPoint : 13174,

				  properties :
				  {
					x : 0,
					y : -1440,
					rotationX : function( time )
					{
					  return Interpolation.linear( time / 13174, 0, 360 );
					},
					rotationY : function( time )
					{
					  return Interpolation.linear( time / 13174, 0, 720 );
					},

					"@scale" : Binder.Multi(
					{
					  names : [ "scaleX", "scaleY", "scaleZ" ],
					  func : function()
					  {
						var keys = KeyframesBind(
						{
						  keyframes :
						  [
							Keyframe({ time : 0, value : 0.50,  interpolation : Interpolation.linear }),
							Keyframe({ time : 7164, value : 0.50,  interpolation : Interpolation.linear }),
							Keyframe({ time : 7174, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 7564, value : 0.50, interpolation : Interpolation.linear }),
							Keyframe({ time : 7574, value : 0.72, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 7964, value : 0.52, interpolation : Interpolation.linear }),
							Keyframe({ time : 7974, value : 0.74, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 8364, value : 0.54, interpolation : Interpolation.linear }),
							Keyframe({ time : 8374, value : 0.76, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 8764, value : 0.56, interpolation : Interpolation.linear }),
							Keyframe({ time : 8774, value : 0.78, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 9164, value : 0.58, interpolation : Interpolation.linear }),
							Keyframe({ time : 9174, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 9564, value : 0.60, interpolation : Interpolation.linear }),
							Keyframe({ time : 9574, value : 0.82, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 9964, value : 0.62, interpolation : Interpolation.linear }),
							Keyframe({ time : 9974, value : 0.84, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 10364, value : 0.64, interpolation : Interpolation.linear }),
							Keyframe({ time : 10374, value : 0.86, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 10764, value : 0.66, interpolation : Interpolation.linear }),
							Keyframe({ time : 10774, value : 0.88, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 11164, value : 0.68, interpolation : Interpolation.linear }),
							Keyframe({ time : 11174, value : 0.90, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 11564, value : 0.70, interpolation : Interpolation.linear }),
							Keyframe({ time : 11574, value : 0.92, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 11964, value : 0.72, interpolation : Interpolation.linear }),
							Keyframe({ time : 11974, value : 0.94, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 12364, value : 0.74, interpolation : Interpolation.linear }),
							Keyframe({ time : 12374, value : 0.96, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 12764, value : 0.76, interpolation : Interpolation.linear }),
							Keyframe({ time : 12774, value : 0.98, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 13164, value : 0.78, interpolation : Interpolation.linear }),
							Keyframe({ time : 13174, value : 1.00, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : 13574, value : 0.50, interpolation : Interpolation.linear })
						  ]
						});

						return function( time )
						{
						  var scl = keys( time );

						  return [ scl, scl, scl ];
						};
					  }()
					})
				  }
				}),

				// Particles
				Factory.replicate( Layer, 120, function()
				{
				  var startPoints =
				  [
					[ -1000, 0, -1000 ],
					[ 1000, 0, -1000 ],
					[ 1000, 0, 1000 ],
					[ -1000, 0, 1000 ]
				  ];

				  var middlePoints =
				  [
					[ 500, -720, -500 ],
					[ 500, -720, 500 ],
					[ -500, -720, 500 ],
					[ -500, -720, -500 ]
				  ];

				  var endPoints =
				  [
					[ 200, -1440, 200 ],
					[ -200, -1440, 200 ],
					[ -200, -1440, -200 ],
					[ 200, -1440, -200 ]
				  ];

				  return function( id )
				  {
					var type = id % 4;

					var startTime = 774 + id * 100;
					var endTime = startTime + 3200;

					var curve = CurveTrace(
					{
					  curve : ( Bezier(
						[
						  Akari.Utilities.Vector.add( startPoints[ type ], Akari.Utilities.Vector.scale( rand.vector( 3 ), rand.uniform() * 200 ) ),
						  Akari.Utilities.Vector.add( middlePoints[ type ], Akari.Utilities.Vector.scale( rand.vector( 3 ), rand.uniform() * 500 ) ),
						  Akari.Utilities.Vector.add( endPoints[ type ], Akari.Utilities.Vector.scale( rand.vector( 3 ), rand.uniform() * 100 ) )
						]) ).toPolyline(),
					  animation : KeyframesBind(
					  {
						keyframes :
						[
						  Keyframe({ time : startTime, value : 0, interpolation : Interpolation.cubic.easeInOut }),
						  Keyframe({ time : endTime, value : 1 })
						]
					  })
					});

					var shape = Shape();
					shape.graphics.beginFill( Snw.Art.Palettes.Part1Particles.pickRandomHardware( rand ) );
					var shapeType = rand.integer( 0, 3 );

					if ( shapeType === 0 )
					{
					  shape.graphics.moveTo( -200, 100 );
					  shape.graphics.lineTo( 0, -100 );
					  shape.graphics.lineTo( 200, 100 );
					  shape.graphics.lineTo( -200, 100 );
					}
					else if ( shapeType === 1 )
					{
					  shape.graphics.moveTo( 0, -100 );
					  shape.graphics.lineTo( 100, 0 );
					  shape.graphics.lineTo( 0, 100 );
					  shape.graphics.lineTo( -100, 0 );
					  shape.graphics.lineTo( 0, -100 );
					}
					else if ( shapeType === 2 )
					{
					  shape.graphics.moveTo( -100, 0 );
					  shape.graphics.lineTo( -100, 200 );
					  shape.graphics.lineTo( 100, 0 );
					  shape.graphics.lineTo( 100, -200 );
					  shape.graphics.lineTo( -100, 0 );
					}

					return [{
					  source : shape,
					  inPoint : startTime,
					  outPoint : endTime,

					  properties :
					  {
						"@position" : Binder.Multi(
						  {
							names : [ "x", "y", "z" ],
							func : curve
						  }),

						scaleX : KeyframesBind(
						{
						  keyframes :
						  [
							Keyframe({ time : startTime, value : 0, interpolation : Interpolation.cubic.easeIn }),
							Keyframe({ time : ( endTime + startTime ) / 2, value : 0.5 + rand.uniform() * 0.5, interpolation : Interpolation.cubic.easeOut }),
							Keyframe({ time : endTime, value : 0 })
						  ]
						}),

						scaleY : Binder.Link({ name : "scaleX" })
					  }
					}];
				  };
				}())
			  ]
			})
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 0,
			outPoint : 13174,

			properties :
			{
			  x : 640,
			  y : 360,

			  "@filterAmount" : function()
			  {
				var wiggle = KeyframesBind({
				  keyframes : WiggleKeyframes({ origin : 5, numSteps : 32, stepTime : 400, startTime : 774, amount : 5, rng : rand, interpolation : Interpolation.linear })
				});

				return function( t )
				{
				  var phase = ( ( t - 774 ) % 400 ) / 1600;
				  return wiggle( t ) * ( 0.5 + phase );
				};
			  }(),

			  filters : Binder.Link(
			  {
				name : "@filterAmount",
				linkFunc : function()
				{
				  var bf = $.createBlurFilter( 0, 0, 1 );
				  return function( v )
				  {
					bf.blurX = v;
					return [ bf ];
				  };
				}()
			  }),

			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 0, value : 0 }),
				  Keyframe({ time : 774, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 2774, value : 1 }),
				  Keyframe({ time : 3174, value : 0 }),
				  Keyframe({ time : 3274, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 6374, value : 1 }),
				  Keyframe({ time : 6774, value : 0 }),
				  Keyframe({ time : 6874, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 9174, value : 1 }),
				  Keyframe({ time : 9574, value : 0 }),
				  Keyframe({ time : 9674, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 12774, value : 1 }),
				  Keyframe({ time : 13174, value : 0 })
				]
			  }),

			  "transform.colorTransform" : Color.rgbToTransformTint( [ 1, 0, 0, 0 ] )
			},

			textProperties : 
			{
			  horizontalAlign : "center",
			  verticalAlign : "center",
			  fontSize : 48,
			  text : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 0, value : "始まるよ", interpolation : Interpolation.hold }),
				  Keyframe({ time : 3174, value : "夢のストーリーが", interpolation : Interpolation.hold }),
				  Keyframe({ time : 6774, value : "追いつづける", interpolation : Interpolation.hold }),
				  Keyframe({ time : 9574, value : "僕らのShining world", interpolation : Interpolation.hold })
				]
			  }),

			  letterSpacing : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 774, value : 0 }),
				  Keyframe({ time : 3173, value : 10, interpolation : Interpolation.hold }),
				  Keyframe({ time : 3174, value : 0 }),
				  Keyframe({ time : 6773, value : 10, interpolation : Interpolation.hold }),
				  Keyframe({ time : 6774, value : 0 }),
				  Keyframe({ time : 9573, value : 10, interpolation : Interpolation.hold }),
				  Keyframe({ time : 9574, value : 0 }),
				  Keyframe({ time : 13173, value : 10, interpolation : Interpolation.hold })
				]
			  })
			}
		  }),
		  Layer(
		  {
			inPoint : 0,
			outPoint : 13174,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 0, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 7164, value : 0,  interpolation : Interpolation.linear }),
				  Keyframe({ time : 7174, value : 0.25, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 7564, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 7574, value : 0.30, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 7964, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 7974, value : 0.35, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 8364, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 8374, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 8764, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 8774, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 9164, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 9174, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 9564, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 9574, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 9964, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 9974, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 10364, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 10374, value : 0.65, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 10764, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 10774, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 11164, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 11174, value : 0.75, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 11564, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 11574, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 11964, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 11974, value : 0.85, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 12364, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 12374, value : 0.90, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 12764, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 12774, value : 0.95, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 13164, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 13174, value : 1, interpolation : Interpolation.linear })
				]
			  })
			}
		  }),
		  Layer(
		  {
			inPoint : 0,
			outPoint : 13174,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  Layer(
		  {
			source : Solid({ width : 1280, height : 720, color : 0x000000 }),
			inPoint : 0,
			outPoint : 774,

			properties :
			{
			  x : 0,
			  y : 0,
			  alpha : function( time )
			  {
				return 1 - time / 774;
			  }
			}
		  }),


		  // S.2
		  Layer(
		  {
			source : Anchor({ source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }) }),
			inPoint : 13174,
			outPoint : 13574,

			properties :
			{
			  x : 640,
			  y : 360,
			  scaleY : function( time )
			  {
				return Interpolation.exponential.easeOut( ( time - 13174 ) / 400, 1, 0 );
			  }
			}
		  })
		]
	  });
	};


	Snw.Part2 = {};

	Snw.Part2.MasterComp = function()
	{
	  // rng
	  var rand = Akari.Utilities.Randomizer.createTwister( 810114514 );

	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 13574,
		duration : 12800,

		layers :
		[
		  // S.3
		  DynamicSourceLayer(
		  {
			inPoint : 13574,
			outPoint : 26374,

			provider : Akari.Display.Three.ThreeComposition(
			{
			  width : 1280,
			  height : 720,

			  startTime : 13574,
			  duration : 12800,

			  cameras :
			  [
				Akari.Display.Three.Camera(
				{
				  inPoint : 13574,
				  outPoint : 26374,
				  position : function( t )
				  {
					return [ 0, 0, 0 ];
				  },
				  target : function( t )
				  {
					var radius = Interpolation.linear( ( t - 13574 ) / 12800, 0, 100 );
					return [ Math.cos( t / 1000 ) * radius, Math.sin( t / 1000 ) * radius, 1000 ];
				  },
				  rotation : function( t )
				  {
					return [ 0, 0, t / 10 ];
				  }
				})
			  ],

			  layers :
			  [
				// object
				DynamicSourceLayer(
				{
				  provider : Snw.Art.Procedural.Deltoidalicositetrahedron(
					{
					  startTime : 19974,
					  duration : 6400,
					  size : 200,

					  color : function( f, data, t )
					  {
						// A pseudo-shading effect
						var lm = f / 24;

						return [
						  Interpolation.cubic.easeInOut( lm, 0.0, 0.7 ),
						  Interpolation.cubic.easeInOut( lm, 0.0, 0.8 ),
						  Interpolation.cubic.easeOut( lm, 0, 1 ),
						  Interpolation.cubic.easeIn( lm, 1, 0.1 )
						];
					  }
					}),

				  inPoint : 19974,
				  outPoint : 26374,

				  properties :
				  {
					rotationX : function( time )
					{
					  return Interpolation.linear( ( time - 19974 ) / 6400, 0, 360 );
					},
					rotationY : function( time )
					{
					  return Interpolation.linear( ( time - 19974 ) / 6400, 0, 720 );
					},

					"@position" : Binder.Multi(
					{
					  names : [ "x", "y", "z" ],
					  func : function( time )
					  {
						var t = ( time - 13574 ) / 12800;
						var radius = t * 100;
						return [ Math.cos( time / 1000 ) * radius, Math.sin( time / 1000 ) * radius, t * 1000 - 600 ];
					  }
					}),
					"@scale" : Binder.Multi(
					{
					  names : [ "scaleX", "scaleY", "scaleZ" ],
					  func : function()
					  {
						var keys = KeyframesBind(
						{
						  keyframes :
						  [
							Keyframe({ time : 19974, value : 0, interpolation : Interpolation.cubic.easeIn }), 
							Keyframe({ time : 20374, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 20764, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 20774, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 21164, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 21174, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 21564, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 21574, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 21964, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 21974, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 22364, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 22374, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 22764, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 22774, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 23164, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 23174, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 23564, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 23574, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 23964, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 23974, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 24364, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 24374, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 24764, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 24774, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 25164, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 25174, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 25564, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 25574, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 25964, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 25974, value : 0.70, interpolation : Interpolation.cubic.easeOut }), 
							Keyframe({ time : 26364, value : 0.50, interpolation : Interpolation.linear }), 
							Keyframe({ time : 26374, value : 0.70 })
						  ]
						});

						return function( time )
						{
						  var scl = keys( time );

						  return [ scl, scl, scl ];
						};
					  }()
					})
				  }
				}),
				// Rings
				Factory.replicate( DynamicSourceLayer, 16, function( i )
				{
				  var inPoint = 19974 + 400 * i;
				  var t = ( inPoint - 13574 ) / 12800;
				  var radius = t * 100;
				  var pos = [ Math.cos( inPoint / 1000 ) * radius, Math.sin( inPoint / 1000 ) * radius, t * 1000 - 600 ];
				  var palette;

				  if ( t < 0.75 )
				  {
					palette = Snw.Art.Palettes.Colorful3;
				  }
				  else
				  {
					palette = Snw.Art.Palettes.Colorful4;
				  }

				  return [{
					provider : Snw.Art.Procedural.Ring(
					{
					  startTime : inPoint,
					  duration : 800,
					  color : palette.pickRandomHardware( rand ),
					  maxWidth : 100,
					  maxRadius : 500 + rand.integer( 0, 200 )
					}),
					inPoint : inPoint,
					outPoint : inPoint + 800,
					properties :
					{
					  x : pos[ 0 ],
					  y : pos[ 1 ],
					  z : pos[ 2 ]
					}
				  }];
				} ),
				// cone
				DynamicSourceLayer(
				{
				  provider : Snw.Art.Procedural.Cone(
					{
					  startTime : 13574,
					  duration : 12800,
					  radius : 1000,
					  steps : 8,
					  depth : 500,

					  color : function()
					  {
						var di = Interpolation.dimension( Interpolation.linear );
						var c1 = Snw.Art.Palettes.Colorful1.colors[ 0 ];
						var c2 = Snw.Art.Palettes.Colorful2.colors[ 0 ];
						var c3 = Snw.Art.Palettes.Colorful3.colors[ 0 ];
						var c4 = Snw.Art.Palettes.Colorful4.colors[ 0 ];

						return function( f, t )
						{
						  var t4 = ( t - 13574 ) / 3200 + f * 0.5 / 8;
						  var bs;

						  if ( t4 < 1.0 )
						  {
							bs = di( t4, c1, c2 );
						  }
						  else if ( t4 < 2.0 )
						  {
							bs = di( t4 - 1, c2, c3 );
						  }
						  else if ( t4 < 3.0 )
						  {
							bs = di( t4 - 2, c3, c4 );
						  }
						  else
						  {
							bs = di( t4 - 3, c4, c1 );
						  }

						  if ( f % 2 === 0 )
						  {
							bs[ 1 ] += 15;
						  }

						  return Color.rgbToTransformTint( Color.labToRgb( bs ) );
						};
					  }()
					}),

				  inPoint : 13574,
				  outPoint : 26374,

				  properties :
				  {
					x : 0,
					y : 0,
					z : 500
				  }
				}),

				// shapes
				Factory.replicate( Layer, 192, function()
				{

				  return function( id )
				  {
					var startTime = rand.integer( 13574, 26374 );
					var endTime = startTime + 1600;

					var ang = rand.uniform() * Math.PI * 2;
					var endX = Math.cos( ang ) * 1000;
					var endY = Math.sin( ang ) * 1000;

					var sides = rand.integer( 3, 8 );
					var size = rand.uniform() * 150 + 50;
					var shape = Shape();
					shape.graphics.moveTo( size, 0 );

					var t4 = ( startTime - 13574 ) / 3200;
					var di = Interpolation.dimension( Interpolation.exponential.easeIn );
					var c1 = Snw.Art.Palettes.Colorful1.pickRandom( rand );
					var c2 = Snw.Art.Palettes.Colorful2.pickRandom( rand );
					var c3 = Snw.Art.Palettes.Colorful3.pickRandom( rand );
					var c4 = Snw.Art.Palettes.Colorful4.pickRandom( rand );
					var bs;
					if ( t4 < 1.0 )
					{
					  bs = di( t4, c1, c2 );
					}
					else if ( t4 < 2.0 )
					{
					  bs = di( t4 - 1, c2, c3 );
					}
					else if ( t4 < 3.0 )
					{
					  bs = di( t4 - 2, c3, c4 );
					}
					else
					{
					  bs = di( t4 - 3, c4, c1 );
					}
					shape.graphics.beginFill( Color.rgbToHardware( Color.labToRgb( bs ) ) );


					for ( var i = sides; i --; )
					{
					  var ang = i * 2 * Math.PI / sides;
					  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
					}
					shape.graphics.endFill();

					return [{
					  source : shape,
					  inPoint : startTime,
					  outPoint : endTime,

					  properties :
					  {
						"@position" : Binder.Multi(
						{
						  names : [ "x", "y", "z" ],
						  func : function( time )
						  {
							var t = ( time - startTime ) / 1600;
							return [
							  Interpolation.linear( t, 0, endX ),
							  Interpolation.linear( t, 0, endY ),
							  Interpolation.linear( t, 500, 0 )
							];
						  }
						}),
						"@scale" : Binder.Multi(
						{
						  names : [ "scaleX", "scaleY", "scaleZ" ],
						  func : function( time )
						  {
							var t = ( time - startTime ) / 1600;
							var sc = Interpolation.linear( t, 0, 1 );
							return [ sc, sc, sc ];
						  }
						})
					  }
					}];
				  };
				}() )
			  ]
			})
		  }),

		  DynamicSourceLayer(
		  {
			inPoint : 13574,
			outPoint : 20374,

			properties :
			{
			  alpha : KeyframesBind(
			  {
				keyframes : [
				  Keyframe({ time : 19974, value : 1 }),
				  Keyframe({ time : 20374, value : 0 })
				]
			  }),

			  scaleX : KeyframesBind(
			  {
				keyframes : [
				  Keyframe({ time : 13574, value : 1 }),
				  Keyframe({ time : 19974, value : 1, interpolation : Interpolation.exponential.easeOut }),
				  Keyframe({ time : 20374, value : 1.2 })
				]
			  }),
			  scaleY : Binder.Link({ name : "scaleX" }),

			  x : Binder.Link(
			  {
				name : "scaleX",
				linkFunc : function( v )
				{
				  return 640 * ( 1 - v );
				}
			  }),
			  y : Binder.Link(
			  {
				name : "scaleX",
				linkFunc : function( v )
				{
				  return 360 * ( 1 - v );
				}
			  })
			},

			provider : Composition(
			{
			  width : 1280,
			  height : 720,
			  startTime : 13574,
			  duration : 6800,
			  layers : [
				DynamicVectorTextLayer(
				{
				  inPoint : 13574,
				  outPoint : 20374,

				  font : Snw.Art.Fonts.DFPSG,

				  properties : {
					x : 240,
					y : 320
				  }, 

				  textProperties : {
					fontSize : 32,
					verticalAlign : "bottom",
					text : "from beatmania IIDX 20 tricoro\nDJ Genki feat yucakko"
				  },

				  animators : [
					Animator(
					{
					  selector : RangeSelector(
					  {
						shapingFunc : RangeShape.rampUp,
						properties :
						{
						  start : 0,
						  end : 1,

						  offset : KeyframesBind(
						  {
							keyframes :
							[
							  Keyframe({ time : 13574, value : 1, interpolation : Interpolation.cubic.easeOut }),
							  Keyframe({ time : 19574, value : -1 })
							]
						  })
						}
					  }),
					  bindings :
					  {
						z : 3000
					  },
					  blendingFunc : function( v1, v2, ef )
					  {
						return v2 * ( 1 - ef );
					  }
					}),
					Animator(
					{
					  selector : RangeSelector(
					  {
						shapingFunc : RangeShape.rampUp,
						properties :
						{
						  start : 0,
						  end : 1,

						  offset : KeyframesBind(
						  {
							keyframes :
							[
							  Keyframe({ time : 13574, value : 1, interpolation : Interpolation.cubic.easeOut }),
							  Keyframe({ time : 19574, value : -1 })
							]
						  })
						}
					  }),
					  bindings :
					  {
						scaleX : 1,
						scaleY : 1,
						scaleZ : 1
					  },
					  blendingFunc : function( v1, v2, ef )
					  {
						return v1 * ef;
					  }
					})
				  ]
				}),

				DynamicVectorTextLayer(
				{
				  inPoint : 13574,
				  outPoint : 20374,

				  font : Snw.Art.Fonts.DFPSG,

				  properties : {
					x : 240,
					y : 400
				  }, 

				  textProperties : {
					fontSize : 96,
					verticalAlign : "center",
					text : "Shining World"
				  },

				  animators : [
					Animator(
					{
					  selector : RangeSelector(
					  {
						shapingFunc : RangeShape.rampUp,
						properties :
						{
						  start : 0,
						  end : 1,

						  offset : KeyframesBind(
						  {
							keyframes :
							[
							  Keyframe({ time : 13574, value : 1 }),
							  Keyframe({ time : 19574, value : -1 })
							]
						  })
						}
					  }),
					  bindings :
					  {
						z : 3000
					  },
					  blendingFunc : function( v1, v2, ef )
					  {
						return v2 * ( 1 - ef );
					  }
					}),
					Animator(
					{
					  selector : RangeSelector(
					  {
						shapingFunc : RangeShape.rampUp,
						properties :
						{
						  start : 0,
						  end : 1,

						  offset : KeyframesBind(
						  {
							keyframes :
							[
							  Keyframe({ time : 13574, value : 1 }),
							  Keyframe({ time : 19574, value : -1 })
							]
						  })
						}
					  }),
					  bindings :
					  {
						scaleX : 1,
						scaleY : 1,
						scaleZ : 1
					  },
					  blendingFunc : function( v1, v2, ef )
					  {
						return v1 * ef;
					  }
					})
				  ]
				}),

				Layer(
				{
				  inPoint : 19574,
				  outPoint : 20374,
				  source : Solid({ width : 1280, height : 20, color : 0xFFFFFF }),
				  properties : {
					x : function( t )
					{
					  return Math.max( 0, Interpolation.linear( ( t - 19574 ) / 400, 1280, 0 ) );
					},
					y : 330
				  }
				})
			  ]
			})
		  }),

		  // Vignette filter
		  Layer(
		  {
			inPoint : 13574,
			outPoint : 26374,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  Layer(
		  {
			inPoint : 25574,
			outPoint : 26374,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 25574, value : 0, interpolation : Interpolation.exponential.easeIn }),
				  Keyframe({ time : 26374, value : 1, interpolation : Interpolation.linear })
				]
			  })
			}
		  })
		]
	  });
	};





	Snw.Part3 = {};

	Snw.Part3.MasterComp = function()
	{
	  var rand = Randomizer.createTwister( 893810 );
	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 26374,
		duration : 12800,

		layers :
		[
		  // background s4
		  Factory.replicate( Layer, 16, function( i )
		  {
			var inPoint = 26374 + 400 * i;
			var shp = Shape();
			shp.graphics.beginFill( ( Snw.Art.Palettes[ "Colorful" + ( i % 4 + 1 ) ] ).pickRandomHardware( rand ) );
			shp.graphics.lineTo( 1280, 0 );
			shp.graphics.lineTo( 1280, 500 );
			shp.graphics.lineTo( 0, 400 );
			shp.graphics.lineTo( 0, 0 );
			shp.graphics.endFill();

			return [{
			  source : shp,
			  inPoint : inPoint,
			  outPoint : inPoint + 1600,
			  properties :
			  {
				y : function( time )
				{
				  var r = Interpolation.cubic.easeOut( ( time - inPoint ) / 1600, -500, 320 );
				  if ( r > 320 ) {
					return 320;
				  }
				  return r;
				},

				filters : [ $.createGlowFilter( 0, 1, 0, 32, 2, 1, false, false ) ]
			  }
			}];
		  }),
		  // background s5
		  Factory.replicate( Layer, 16, function( i )
		  {
			var inPoint = 32774 + 400 * i;
			var shp = Shape();
			shp.graphics.beginFill( ( Snw.Art.Palettes[ "Colorful" + ( 4 - ( i % 4 ) ) ] ).pickRandomHardware( rand ) );
			shp.graphics.lineTo( 0, 500 );
			shp.graphics.lineTo( 1280, 400 );
			shp.graphics.lineTo( 1280, 0 );
			shp.graphics.lineTo( 0, 0 );
			shp.graphics.endFill();

			return [{
			  source : shp,
			  inPoint : inPoint,
			  outPoint : inPoint + 1600,
			  properties :
			  {
				y : function( time )
				{
				  var r = Interpolation.cubic.easeOut( ( time - inPoint ) / 1600, -500, 320 );
				  if ( r > 320 ) {
					return 320;
				  }
				  return r;
				},

				filters : [ $.createGlowFilter( 0, 1, 0, 32, 2, 1, false, false ) ]
			  }
			}];
		  }),
		  Layer(
		  {
			source : Snw.Art.Drawings.unpack( Snw.Art.Drawings.P2 ),
			inPoint : 26374,
			outPoint : 32774,
			properties :
			{
			  x : KeyframesBind(
			  {
				keyframes : [
				  Keyframe({ time : 26374, value : 2280 - 159, interpolation : Interpolation.exponential.easeOut }),
				  Keyframe({ time : 32774, value : 250 - 159 })
				]
			  }),
			  y : 360 - 382,

			  scaleX : 1.2,
			  scaleY : 1.2
			}
		  }),
		  Layer(
		  {
			source : Snw.Art.Drawings.unpack( Snw.Art.Drawings.P3 ),
			inPoint : 32774,
			outPoint : 39174,
			properties :
			{
			  x : KeyframesBind(
			  {
				keyframes : [
				  Keyframe({ time : 32774, value : -1000 - 177, interpolation : Interpolation.exponential.easeOut }),
				  Keyframe({ time : 39174, value : 1030 - 177 })
				]
			  }),
			  y : 360 - 406,

			  scaleX : 1.2,
			  scaleY : 1.2
			}
		  }),
		  // rings
		  DynamicSourceLayer(
		  {
			inPoint : 26374,
			outPoint : 39174,

			provider : Composition(
			{
			  width : 1280,
			  height : 720,

			  startTime : 26374,
			  duration : 12800,

			  layers : Factory.replicate( DynamicSourceLayer, 80, function()
			  {
				var offsets = [ 0, 200, 400, 500, 600, 800, 1000, 1100, 1300, 1400 ];

				return function( i )
				{
				  var inPoint = 26374 + 1600 * Math.floor( i / 10 ) + offsets[ i % 10 ];
				  var pos = [ rand.integer( 0, 1280 ), rand.integer( 0, 720 ) ];

				  return [{
					provider : Snw.Art.Procedural.Ring(
					{
					  startTime : inPoint,
					  duration : 800,
					  maxWidth : 100,
					  color : 0xA3A3A3,
					  maxRadius : 500 + rand.integer( 0, 200 )
					}),
					inPoint : inPoint,
					outPoint : inPoint + 800,
					properties :
					{
					  x : pos[ 0 ],
					  y : pos[ 1 ]
					}
				  }];
				};
			  }())
			}),

			properties :
			{
			  blendMode : "multiply"
			}
		  }),
		  // text
		  Layer(
		  {
			inPoint : 26374,
			outPoint : 32774,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginFill( 0xFFFFFF );
			  shp.graphics.drawPath( Snw.Art.Fonts.DFPHZ[ "羽" ].commands, Snw.Art.Fonts.DFPHZ[ "羽" ].paths, "nonZero" );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : KeyframesBind(
				{
				  keyframes : [
					Keyframe({ time : 26374, value : [ 1280, 80 ], interpolation : Interpolation.dimension( Interpolation.cubic.easeOut ) }),
					Keyframe({ time : 27974, value : [ 548, 80 ] })
				  ]
				})
			  }),

			  scaleX : 150 / 72,
			  scaleY : 150 / 72
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 26774,
			outPoint : 32774,

			properties :
			{
			  x : 742,
			  y : 102
			},

			textProperties : 
			{
			  fontSize : 96,
			  text : "が生えた"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampUp,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 26774, value : -1, interpolation : Interpolation.cubic.easeOut }),
						Keyframe({ time : 29974, value : 1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  y : -400
				}
			  })
			]
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 28974,
			outPoint : 32774,

			properties :
			{
			  x : 742,
			  y : 252
			},

			textProperties : 
			{
			  fontSize : 72,
			  text : "ような"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampUp,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 28974, value : -1 }),
						Keyframe({ time : 30774, value : 1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  y : 500
				}
			  })
			]
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 29974,
			outPoint : 32774,

			properties :
			{
			  x : 540,
			  y : 361
			},

			textProperties : 
			{
			  fontSize : 96,
			  text : "dreamin"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampUp,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 29974, value : -1 }),
						Keyframe({ time : 31174, value : 1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  x : 200,
				  y : 360
				}
			  })
			]
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 30374,
			outPoint : 32774,

			properties :
			{
			  x : 1008,
			  y : 475
			},

			textProperties : 
			{
			  fontSize : 96,
			  text : "sky"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampUp,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 30374, value : -1 }),
						Keyframe({ time : 31974, value : 1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  x : -200,
				  y : 260
				}
			  })
			]
		  }),
		  // s5
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 32774,
			outPoint : 39174,

			properties :
			{
			  x : 41,
			  y : 132
			},

			textProperties : 
			{
			  fontSize : 128,
			  text : "不可能"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampDown,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 32774, value : 1, interpolation : Interpolation.cubic.easeOut }),
						Keyframe({ time : 33574, value : -1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  y : -300
				}
			  })
			]
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 33174,
			outPoint : 39174,

			properties :
			{
			  x : 321,
			  y : 306
			},

			textProperties : 
			{
			  fontSize : 64,
			  text : "なんてない"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampDown,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 33174, value : 1, interpolation : Interpolation.cubic.easeOut }),
						Keyframe({ time : 35274, value : -1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  y : 600
				}
			  })
			]
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 34374,
			outPoint : 39174,

			properties :
			{
			  x : 27,
			  y : 406
			},

			textProperties : 
			{
			  fontSize : 128,
			  text : "無限"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampDown,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 34374, value : 1, interpolation : Interpolation.cubic.easeOut }),
						Keyframe({ time : 36374, value : -1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  x : -350
				}
			  })
			]
		  }),
		  Layer(
		  {
			inPoint : 35574,
			outPoint : 39174,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginFill( 0xFFFFFF );
			  shp.graphics.drawPath( Snw.Art.Fonts.DFPHZ[ "の" ].commands, Snw.Art.Fonts.DFPHZ[ "の" ].paths, "nonZero" );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : KeyframesBind(
				{
				  keyframes : [
					Keyframe({ time : 35574, value : [ 381, 720 ], interpolation : Interpolation.dimension( Interpolation.cubic.easeOut ) }),
					Keyframe({ time : 37074, value : [ 381, 517 ] })
				  ]
				})
			  }),

			  scaleX : 64 / 72,
			  scaleY : 64 / 72
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 35974,
			outPoint : 39174,

			properties :
			{
			  x : 464,
			  y : 412
			},

			textProperties : 
			{
			  fontSize : 96,
			  text : "パワー"
			},

			animators :
			[
			  Animator(
			  {
				selector : RangeSelector(
				{
				  shapingFunc : RangeShape.rampDown,
				  properties :
				  {
					start : 0,
					end : 1,

					offset : KeyframesBind(
					{
					  keyframes :
					  [
						Keyframe({ time : 35974, value : 1, interpolation : Interpolation.cubic.easeOut }),
						Keyframe({ time : 39174, value : -1 })
					  ]
					})
				  }
				}),
				bindings :
				{
				  x : 200,
				  y : 400
				}
			  })
			]
		  }),
		  // Vignette filter
		  Layer(
		  {
			inPoint : 26374,
			outPoint : 39174,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  // transition 1
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 31874 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 33174,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 - 720 * i / 8,
				rotation : 29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > 32774 )
				  {
					return 1 - ( time - 32774 ) / 400;
				  }
				  else if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  }),
		  // transition 2
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 38274 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 39174,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 * i / 8,
				rotation : -29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  })
		]
	  });
	};





	Snw.Part4 = {};

	Snw.Part4.MasterComp = function()
	{
	  var rand = Randomizer.createTwister( 334114514 );
	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 39174,
		duration : 12400,

		layers :
		[
		  Layer(
		  {
			inPoint : 39174,
			outPoint : 51574,

			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF })
		  }),
		  // shapes
		  Factory.replicate( Layer, 48, function( id )
		  {
			var startTime = rand.integer( 39174, 51974 );
			var duraton = rand.integer( 800, 3200 );
			var endTime = startTime + duraton;
			var xPos = rand.integer( 0, 1280 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var size = rand.uniform() * 250 + 50;
			var shape = Shape();
			shape.graphics.moveTo( size, 0 );
			shape.graphics.lineStyle( rand.integer( 4, 8 ), 0xA3A3A3 );

			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.lineStyle();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : endTime,

			  properties :
			  {
				x : xPos,
				y : KeyframesBind(
				{
				  keyframes :
				  [
					Keyframe({ time : startTime, value : 720 + size, interpolation : Interpolation.cubic.easeInOut }),
					Keyframe({ time : endTime, value : -size, interpolation : Interpolation.cubic.easeInOut })
				  ]
				}),
				rotation : function( time )
				{
				  return time * rotSpeed;
				}
			  }
			}];
		  }),
		  DynamicVectorTextLayer(
		  {
			font : Snw.Art.Fonts.DFPHZ,
			inPoint : 39174,
			outPoint : 51574,

			properties :
			{
			  x : 640,
			  y : 360,

			  "@filterAmount" : function()
			  {
				var wiggle = KeyframesBind({
				  keyframes : WiggleKeyframes({ origin : 5, numSteps : 32, stepTime : 400, startTime : 39174, amount : 5, rng : rand, interpolation : Interpolation.linear })
				});

				return function( t )
				{
				  var phase = ( ( t - 39174 ) % 400 ) / 1600;
				  return wiggle( t ) * ( 0.5 + phase );
				};
			  }(),

			  filters : Binder.Link(
			  {
				name : "@filterAmount",
				linkFunc : function()
				{
				  var bf = $.createBlurFilter( 0, 0, 1 );
				  return function( v )
				  {
					bf.blurX = v;
					return [ bf ];
				  };
				}()
			  }),

			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 39174, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 41974, value : 1 }),
				  Keyframe({ time : 42274, value : 0 }),
				  Keyframe({ time : 42374, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 45174, value : 1 }),
				  Keyframe({ time : 45474, value : 0 }),
				  Keyframe({ time : 45574, value : 1, interpolation : Interpolation.hold }),
				  Keyframe({ time : 48374, value : 1 }),
				  Keyframe({ time : 48674, value : 0 }),
				  Keyframe({ time : 48774, value : 1, interpolation : Interpolation.hold })
				]
			  }),

			  "transform.colorTransform" : Color.rgbToTransformTint( [ 1, 0, 0, 0 ] )
			},

			textProperties : 
			{
			  horizontalAlign : "center",
			  verticalAlign : "center",
			  fontSize : 48,
			  text : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 39174, value : "明日は", interpolation : Interpolation.hold }),
				  Keyframe({ time : 42274, value : "どうなるかな", interpolation : Interpolation.hold }),
				  Keyframe({ time : 45474, value : "誰にも", interpolation : Interpolation.hold }),
				  Keyframe({ time : 48674, value : "分からない", interpolation : Interpolation.hold })
				]
			  }),

			  letterSpacing : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 39174, value : 0 }),
				  Keyframe({ time : 42273, value : 10, interpolation : Interpolation.hold }),
				  Keyframe({ time : 42274, value : 0 }),
				  Keyframe({ time : 45573, value : 10, interpolation : Interpolation.hold }),
				  Keyframe({ time : 45574, value : 0 }),
				  Keyframe({ time : 48773, value : 10, interpolation : Interpolation.hold })
				]
			  })
			}
		  }),
		  Layer(
		  {
			inPoint : 48774,
			outPoint : 51574,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : KeyframesBind(
			  {
				keyframes :
				[
				  Keyframe({ time : 48774, value : 0.25, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 48973, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 48974, value : 0.30, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 49173, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 49174, value : 0.35, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 49373, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 49374, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 49573, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 49574, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 49773, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 49774, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 49973, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 49974, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50173, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50174, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50373, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50374, value : 0.40, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50473, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50474, value : 0.45, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50573, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50574, value : 0.50, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50673, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50674, value : 0.55, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50773, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50774, value : 0.60, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50873, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50874, value : 0.65, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 50973, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 50974, value : 0.70, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51073, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51074, value : 0.75, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51173, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51174, value : 0.80, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51273, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51274, value : 0.85, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51373, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51374, value : 0.90, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51473, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51474, value : 0.95, interpolation : Interpolation.cubic.easeOut }),
				  Keyframe({ time : 51573, value : 0, interpolation : Interpolation.linear }),
				  Keyframe({ time : 51574, value : 1, interpolation : Interpolation.cubic.easeOut })
				]
			  })
			}
		  }),
		  // Vignette filter
		  Layer(
		  {
			inPoint : 39174,
			outPoint : 51574,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  // intro flash
		  Layer(
		  {
			inPoint : 39174,
			outPoint : 39974,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : function( t )
			  {
				return 1 - ( t - 39174 ) / 800;
			  }
			}
		  })
		]
	  });
	};






	Snw.Part5 = {};

	Snw.Part5.MasterComp = function()
	{
	  var rand = Randomizer.createTwister( 334 );
	  return Composition(
	  {
		width : 1280,
		height : 720,

		startTime : 51574,
		duration : 26000,

		layers :
		[
		  // backgrounds
		  Layer(
		  {
			source : function()
			{
			  var shp = Shape();
			  var gStart = Factory.clone( Snw.Art.Palettes.Colorful1.colors[ 0 ] );
			  var gEnd = Factory.clone( Snw.Art.Palettes.Colorful1.colors[ 0 ] );
			  gStart[ 1 ] -= 20;
			  gEnd[ 1 ] += 20;
			  gStart = Color.rgbToHardware( Color.labToRgb( gStart ) );
			  gEnd = Color.rgbToHardware( Color.labToRgb( gEnd ) );
			  shp.graphics.beginGradientFill( "linear", [ gStart, gEnd, gStart ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1280, 720, 97 * Math.PI / 180, 0, 0 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			inPoint : 51574,
			outPoint : 58374
		  }),
		  Layer(
		  {
			source : function()
			{
			  var shp = Shape();
			  var gStart = Factory.clone( Snw.Art.Palettes.Colorful2.colors[ 0 ] );
			  var gEnd = Factory.clone( Snw.Art.Palettes.Colorful2.colors[ 0 ] );
			  gStart[ 1 ] -= 40;
			  gStart = Color.rgbToHardware( Color.labToRgb( gStart ) );
			  gEnd = Color.rgbToHardware( Color.labToRgb( gEnd ) );
			  shp.graphics.beginGradientFill( "linear", [ gStart, gEnd, gStart ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1280, 720, 83 * Math.PI / 180, 0, 0 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			inPoint : 58374,
			outPoint : 64774
		  }),
		  Layer(
		  {
			source : function()
			{
			  var shp = Shape();
			  var gStart = Factory.clone( Snw.Art.Palettes.Colorful3.colors[ 0 ] );
			  var gEnd = Factory.clone( Snw.Art.Palettes.Colorful3.colors[ 0 ] );
			  gStart[ 1 ] -= 40;
			  gStart = Color.rgbToHardware( Color.labToRgb( gStart ) );
			  gEnd = Color.rgbToHardware( Color.labToRgb( gEnd ) );
			  shp.graphics.beginGradientFill( "linear", [ gStart, gEnd, gStart ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1280, 720, 0, 0, 0 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			inPoint : 64774,
			outPoint : 71174
		  }),
		  Layer(
		  {
			source : function()
			{
			  var shp = Shape();
			  var gStart = Factory.clone( Snw.Art.Palettes.Colorful4.colors[ 0 ] );
			  var gEnd = Factory.clone( Snw.Art.Palettes.Colorful4.colors[ 0 ] );
			  gStart[ 1 ] -= 40;
			  gStart = Color.rgbToHardware( Color.labToRgb( gStart ) );
			  gEnd = Color.rgbToHardware( Color.labToRgb( gEnd ) );
			  shp.graphics.beginGradientFill( "linear", [ gStart, gEnd, gStart ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1280, 720, 0, 0, 0 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			inPoint : 71174,
			outPoint : 77574
		  }),
		  // text
		  DynamicVectorTextLayer(
		  {
			inPoint : 51774,
			outPoint : 54374,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "many",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * ( 1 - t ) - this.source.width;
				  var y = 300 + Math.sin( 7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : 7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 52574,
			outPoint : 54374,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "many dream",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * ( 1 - t ) - this.source.width;
				  var y = 420 + Math.sin( 7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : 7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 54374,
			outPoint : 58374,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "キラキラ\n        世界は",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * ( 1 - t ) - this.source.width - 160;
				  var y = 360 + Math.sin( 7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : 7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 58374,
			outPoint : 60774,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "many",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * t - this.source.width;
				  var y = 300 + Math.sin( -7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : -7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 59174,
			outPoint : 60774,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "many happy",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * t - this.source.width;
				  var y = 420 + Math.sin( -7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : -7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 60774,
			outPoint : 64774,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "        きっと\n待ってる",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  "@position" : Binder.Multi(
			  {
				names : [ "x", "y" ],
				func : function( time )
				{
				  var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				  if ( t < 0.5 )
				  {
					t = 1 - t * 2;
					t = 0.5 - t * t / 2;
				  }
				  else
				  {
					t = t * 2 - 1;
					t = t * t / 2 + 0.5;
				  }
				  var x = ( 1280 + this.source.width + this.source.width ) * t - this.source.width - 180;
				  var y = 360 + Math.sin( -7 * Math.PI / 180 ) * ( x - 640 );

				  return [ x, y ];
				}
			  }),

			  rotation : -7
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 64774,
			outPoint : 67174,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "この魔法",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  x : 640,
			  y : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return ( 1 - t ) * ( 720 + this.source.height + this.source.height ) - this.source.height;
			  },
			  rotation : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return ( 1 - t ) * 14 - 7;
			  }
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 67174,
			outPoint : 71174,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "かけたならば\n   ほら",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  x : 640,
			  y : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return ( 1 - t ) * ( 720 + this.source.height + this.source.height ) - this.source.height;
			  },
			  rotation : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return 7 - ( 1 - t ) * 14;
			  }
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 71174,
			outPoint : 73574,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "The world\nwhich you love",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  x : 640,
			  y : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return t * ( 720 + this.source.height + this.source.height ) - this.source.height;
			  },
			  rotation : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return ( 1 - t ) * 14 - 7;
			  }
			}
		  }),
		  DynamicVectorTextLayer(
		  {
			inPoint : 73574,
			outPoint : 77574,

			font : Snw.Art.Fonts.DFPHZ,

			textProperties :
			{
			  text : "僕らは\n止まらない",
			  fontSize : 96,
			  horizontalAlign : "center",
			  verticalAlign : "center"
			},

			properties :
			{
			  x : 640,
			  y : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return t * ( 720 + this.source.height + this.source.height ) - this.source.height;
			  },
			  rotation : function( time )
			  {
				var t = ( time - this.inPoint ) / ( this.outPoint - this.inPoint );
				if ( t < 0.5 )
				{
				  t = 1 - t * 2;
				  t = 0.5 - t * t / 2;
				}
				else
				{
				  t = t * 2 - 1;
				  t = t * t / 2 + 0.5;
				}

				return 7 - ( 1 - t ) * 14;
			  }
			}
		  }),
		  // shapes
		  Factory.replicate( Layer, 48, function( id )
		  {
			var size = id * 4 + 50;

			var startTime = rand.integer( 51574, 58374 );
			// perspective EMURATED
			var duration = ( 1280 + size + size ) / Math.cos( 7 * Math.PI / 180 ) / ( size / 50 );
			var yPos = rand.integer( 0, 720 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var shape = Shape();

			shape.graphics.moveTo( size, 0 );
			shape.graphics.beginFill( Snw.Art.Palettes.Colorful1.pickRandomHardware() );
			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.endFill();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : Math.min( startTime + duration, 58374 ),

			  properties :
			  {
				"@position" : Binder.Multi(
				{
				  names : [ "x", "y" ],
				  func : function( time )
				  {
					var t = ( time - startTime ) / duration;
					var x = ( 1280 + size + size ) * ( 1 - t ) - size;
					var y = yPos + Math.sin( 7 * Math.PI / 180 ) * ( x - 640 );

					return [ x, y ];
				  }
				}),
				rotation : function( time )
				{
				  return time * rotSpeed;
				},
				filters : [ $.createGlowFilter( 0, 1, 16, 16, 0.5, 1, false, false ) ]
			  }
			}];
		  }),
		  Factory.replicate( Layer, 48, function( id )
		  {
			var size = id * 4 + 50;

			var startTime = rand.integer( 58374, 64774 );
			// perspective EMURATED
			var duration = ( 1280 + size + size ) / Math.cos( -7 * Math.PI / 180 ) / ( size / 50 );
			var yPos = rand.integer( 0, 720 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var shape = Shape();
			shape.graphics.moveTo( size, 0 );

			shape.graphics.beginFill( Snw.Art.Palettes.Colorful2.pickRandomHardware() );
			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.endFill();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : Math.min( startTime + duration, 64774 ),

			  properties :
			  {
				"@position" : Binder.Multi(
				{
				  names : [ "x", "y" ],
				  func : function( time )
				  {
					var t = ( time - startTime ) / duration;
					var x = ( 1280 + size + size ) * t - size;
					var y = yPos + Math.sin( -7 * Math.PI / 180 ) * ( x - 640 );

					return [ x, y ];
				  }
				}),
				rotation : function( time )
				{
				  return time * rotSpeed;
				},
				filters : [ $.createGlowFilter( 0, 1, 16, 16, 0.5, 1, false, false ) ]
			  }
			}];
		  }),
		  Factory.replicate( Layer, 48, function( id )
		  {
			var size = id * 4 + 50;

			var startTime = rand.integer( 64774, 71174 );
			// perspective EMURATED
			var duration = ( 720 + size + size ) / ( size / 50 );
			var xPos = rand.integer( 0, 1280 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var shape = Shape();
			shape.graphics.moveTo( size, 0 );

			shape.graphics.beginFill( Snw.Art.Palettes.Colorful4.pickRandomHardware() );
			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.endFill();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : Math.min( startTime + duration, 71174 ),

			  properties :
			  {
				x : xPos,
				y : function( time )
				{
				  return 720 - ( time - startTime ) / duration * ( 720 + size + size ) + size;
				},
				rotation : function( time )
				{
				  return time * rotSpeed;
				},
				filters : [ $.createGlowFilter( 0, 1, 16, 16, 0.5, 1, false, false ) ]
			  }
			}];
		  }),
		  Factory.replicate( Layer, 48, function( id )
		  {
			var size = id * 4 + 50;

			var startTime = rand.integer( 71174, 77574 );
			// perspective EMURATED
			var duration = ( 720 + size + size ) / ( size / 50 );
			var xPos = rand.integer( 0, 1280 );
			var rotSpeed = rand.uniform() - 0.5;

			var sides = rand.integer( 3, 8 );
			var shape = Shape();
			shape.graphics.moveTo( size, 0 );

			shape.graphics.beginFill( Snw.Art.Palettes.Colorful4.pickRandomHardware() );
			for ( var i = sides; i --; )
			{
			  var ang = i * 2 * Math.PI / sides;
			  shape.graphics.lineTo( Math.cos( ang ) * size, Math.sin( ang ) * size );
			}
			shape.graphics.endFill();

			return [{
			  source : shape,
			  inPoint : startTime,
			  outPoint : Math.min( startTime + duration, 77574 ),

			  properties :
			  {
				x : xPos,
				y : function( time )
				{
				  return ( time - startTime ) / duration * ( 720 + size + size ) - size;
				},
				rotation : function( time )
				{
				  return time * rotSpeed;
				},
				filters : [ $.createGlowFilter( 0, 1, 16, 16, 0.5, 1, false, false ) ]
			  }
			}];
		  }),
		  // Vignette filter
		  Layer(
		  {
			inPoint : 51574,
			outPoint : 77574,

			source : function()
			{
			  var shp = Shape();

			  shp.graphics.beginGradientFill( "radial", [ 0x000000, 0x101010, 0x404040 ], [ 1, 1, 1 ], [ 0, 128, 255 ], $.createGradientBox( 1920, 1080, 0, -320, -180 ) );
			  shp.graphics.drawRect( 0, 0, 1280, 720 );
			  shp.graphics.endFill();

			  return shp;
			}(),

			properties :
			{
			  blendMode : "subtract"
			}
		  }),
		  // transition 1
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 57474 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 58774,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 - 720 * i / 8,
				rotation : 29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > 58374 )
				  {
					return 1 - ( time - 58374 ) / 400;
				  }
				  else if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  }),
		  // transition 2
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 63874 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 65174,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 * i / 8,
				rotation : -29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > 64774 )
				  {
					return 1 - ( time - 64774 ) / 400;
				  }
				  else if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  }),
		  // transition 3
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 70274 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 71574,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 - 720 * i / 8,
				rotation : 29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > 71174 )
				  {
					return 1 - ( time - 71174 ) / 400;
				  }
				  else if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  }),
		  // transition 4
		  Factory.replicate( Layer, 9, function( i )
		  {
			var inPoint = 76674 + 100 * i;

			return [{
			  source : Anchor({ source : Solid({ width : 1469, height : 184, color : 0xFFFFFF }), y : 0 }),
			  inPoint : inPoint,
			  outPoint : 77574,
			  properties :
			  {
				x : 1280 * i / 8,
				y : 720 * i / 8,
				rotation : -29.357753542791272,
				
				scaleY : function( time )
				{
				  if ( time > inPoint + 100 )
				  {
					return 1;
				  }
				  else
				  {
					return ( time - inPoint ) / 100;
				  }
				}
			  }
			}];
		  }),
		  // intro flash
		  Layer(
		  {
			inPoint : 51574,
			outPoint : 52374,
			source : Solid({ width : 1280, height : 720, color : 0xFFFFFF }),
			properties :
			{
			  blendMode : "add",
			  alpha : function( t )
			  {
				return 1 - ( t - 51574 ) / 800;
			  }
			}
		  })
		]
	  });
	};



Global._set( "___bw3_snw_maincomp", Snw.MainComp() );
Global._set( "SNW.Pic", Snw.Art.Drawings.P4  );
//Global._set( "SNW.PicComp", Snw.Part3.MasterComp()  );

if (playerState == 'playing')
{
  Player.play();
 ($G._("loading")).change(90);
 if($G._("___bw3_snw_p3") && $G._("___bw3_snw_p4") )
   ($G._("loading")).changeT("毁灭地喷射白光!pa!...\n");
  //$$.appendLog('20%...');
};